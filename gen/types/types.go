package types

import (
	"encoding/json"
	"fmt"
	scale "github.com/centrifuge/go-substrate-rpc-client/v4/scale"
	types "github.com/centrifuge/go-substrate-rpc-client/v4/types"
	codec "github.com/centrifuge/go-substrate-rpc-client/v4/types/codec"
)

const encMeta = "0x6d6574610e2d08000c1c73705f636f72651863727970746f2c4163636f756e7449643332000004000401205b75383b2033325d0000040000032000000008000800000503000c08306672616d655f73797374656d2c4163636f756e74496e666f08144e6f6e636501102c4163636f756e74446174610114001401146e6f6e63651001144e6f6e6365000124636f6e73756d657273100120526566436f756e7400012470726f766964657273100120526566436f756e7400012c73756666696369656e7473100120526566436f756e740001106461746114012c4163636f756e74446174610000100000050500140c3c70616c6c65745f62616c616e6365731474797065732c4163636f756e7444617461041c42616c616e63650118001001106672656518011c42616c616e6365000120726573657276656418011c42616c616e636500011866726f7a656e18011c42616c616e6365000114666c6167731c01284578747261466c61677300001800000507001c0c3c70616c6c65745f62616c616e636573147479706573284578747261466c61677300000400180110753132380000200000050000240c346672616d655f737570706f7274206469737061746368405065724469737061746368436c6173730404540128000c01186e6f726d616c2801045400012c6f7065726174696f6e616c280104540001246d616e6461746f7279280104540000280c2873705f77656967687473247765696768745f76321857656967687400000801207265665f74696d652c010c75363400012870726f6f665f73697a652c010c75363400002c000006300030000005060034083c7072696d69746976655f74797065731048323536000004000401205b75383b2033325d00003800000208003c102873705f72756e74696d651c67656e65726963186469676573741844696765737400000401106c6f677340013c5665633c4469676573744974656d3e000040000002440044102873705f72756e74696d651c67656e6572696318646967657374284469676573744974656d0001142850726552756e74696d650800480144436f6e73656e737573456e67696e654964000038011c5665633c75383e00060024436f6e73656e7375730800480144436f6e73656e737573456e67696e654964000038011c5665633c75383e000400105365616c0800480144436f6e73656e737573456e67696e654964000038011c5665633c75383e000500144f74686572040038011c5665633c75383e0000006452756e74696d65456e7669726f6e6d656e745570646174656400080000480000030400000008004c00000250005008306672616d655f73797374656d2c4576656e745265636f7264080445015404540134000c011470686173654d02011450686173650001146576656e7454010445000118746f70696373510201185665633c543e000054085c70617261636861696e5f77657465655f72756e74696d653052756e74696d654576656e740001681853797374656d04005801706672616d655f73797374656d3a3a4576656e743c52756e74696d653e0000003c50617261636861696e53797374656d04007c01bc63756d756c75735f70616c6c65745f70617261636861696e5f73797374656d3a3a4576656e743c52756e74696d653e0001002042616c616e636573040084017c70616c6c65745f62616c616e6365733a3a4576656e743c52756e74696d653e000a00485472616e73616374696f6e5061796d656e7404008c01a870616c6c65745f7472616e73616374696f6e5f7061796d656e743a3a4576656e743c52756e74696d653e000b00105375646f040090016c70616c6c65745f7375646f3a3a4576656e743c52756e74696d653e000f0044436f6c6c61746f7253656c656374696f6e0400a001a470616c6c65745f636f6c6c61746f725f73656c656374696f6e3a3a4576656e743c52756e74696d653e0015001c53657373696f6e0400a8015470616c6c65745f73657373696f6e3a3a4576656e740016002458636d7051756575650400ac01a463756d756c75735f70616c6c65745f78636d705f71756575653a3a4576656e743c52756e74696d653e001e002c506f6c6b61646f7458636d0400b0016870616c6c65745f78636d3a3a4576656e743c52756e74696d653e001f002843756d756c757358636d0400dd01018863756d756c75735f70616c6c65745f78636d3a3a4576656e743c52756e74696d653e002000304d65737361676551756575650400e101019070616c6c65745f6d6573736167655f71756575653a3a4576656e743c52756e74696d653e00210018546f6b656e730400f101016c6f726d6c5f746f6b656e733a3a4576656e743c52756e74696d653e006b004457655445454d65737361676551756575650400f501018c77657465655f6d6573736167655f71756575653a3a4576656e743c52756e74696d653e006d001c5574696c6974790400fd01015470616c6c65745f7574696c6974793a3a4576656e74006e002057655445454f726704000102016477657465655f6f72673a3a4576656e743c52756e74696d653e006f00285765544545417373657404000502017077657465655f6173736574733a3a4576656e743c52756e74696d653e0070002457655445455375646f04001102016877657465655f7375646f3a3a4576656e743c52756e74696d653e0071002857655445454775696c6404001502016c77657465655f6775696c643a3a4576656e743c52756e74696d653e00720030576554454550726f6a65637404001902017477657465655f70726f6a6563743a3a4576656e743c52756e74696d653e007300205765544545476f7604001d02016477657465655f676f763a3a4576656e743c52756e74696d653e007400345765544545547265617375727904002502017877657465655f74726561737572793a3a4576656e743c52756e74696d653e00750020576554454541707004002902016477657465655f6170703a3a4576656e743c52756e74696d653e0076002457655445455461736b04003502016877657465655f7461736b3a3a4576656e743c52756e74696d653e00770020576554454547707504003902016477657465655f6770753a3a4576656e743c52756e74696d653e0078002c5765544545576f726b657204003d02017077657465655f776f726b65723a3a4576656e743c52756e74696d653e00790024436f6e74726163747304004102018070616c6c65745f636f6e7472616374733a3a4576656e743c52756e74696d653e007a0000580c306672616d655f73797374656d1870616c6c6574144576656e7404045400011c4045787472696e7369635375636365737304013464697370617463685f696e666f5c01304469737061746368496e666f00000490416e2065787472696e73696320636f6d706c65746564207375636365737366756c6c792e3c45787472696e7369634661696c656408013864697370617463685f6572726f7268013444697370617463684572726f7200013464697370617463685f696e666f5c01304469737061746368496e666f00010450416e2065787472696e736963206661696c65642e2c436f64655570646174656400020450603a636f6465602077617320757064617465642e284e65774163636f756e7404011c6163636f756e74000130543a3a4163636f756e7449640003046841206e6577206163636f756e742077617320637265617465642e344b696c6c65644163636f756e7404011c6163636f756e74000130543a3a4163636f756e74496400040458416e206163636f756e7420776173207265617065642e2052656d61726b656408011873656e646572000130543a3a4163636f756e7449640001106861736834011c543a3a48617368000504704f6e206f6e2d636861696e2072656d61726b2068617070656e65642e4455706772616465417574686f72697a6564080124636f64655f6861736834011c543a3a48617368000134636865636b5f76657273696f6e200110626f6f6c00060468416e20757067726164652077617320617574686f72697a65642e04704576656e7420666f72207468652053797374656d2070616c6c65742e5c0c346672616d655f737570706f7274206469737061746368304469737061746368496e666f00000c0118776569676874280118576569676874000114636c6173736001344469737061746368436c617373000120706179735f666565640110506179730000600c346672616d655f737570706f7274206469737061746368344469737061746368436c61737300010c184e6f726d616c0000002c4f7065726174696f6e616c000100244d616e6461746f727900020000640c346672616d655f737570706f727420646973706174636810506179730001080c596573000000084e6f0001000068082873705f72756e74696d653444697370617463684572726f72000138144f746865720000003043616e6e6f744c6f6f6b7570000100244261644f726967696e000200184d6f64756c6504006c012c4d6f64756c654572726f7200030044436f6e73756d657252656d61696e696e670004002c4e6f50726f76696465727300050040546f6f4d616e79436f6e73756d65727300060014546f6b656e0400700128546f6b656e4572726f720007002841726974686d65746963040074013c41726974686d657469634572726f72000800345472616e73616374696f6e616c04007801485472616e73616374696f6e616c4572726f7200090024457868617573746564000a0028436f7272757074696f6e000b002c556e617661696c61626c65000c0038526f6f744e6f74416c6c6f776564000d00006c082873705f72756e74696d652c4d6f64756c654572726f720000080114696e64657808010875380001146572726f7248018c5b75383b204d41585f4d4f44554c455f4552524f525f454e434f4445445f53495a455d000070082873705f72756e74696d6528546f6b656e4572726f720001284046756e6473556e617661696c61626c65000000304f6e6c7950726f76696465720001003042656c6f774d696e696d756d0002003043616e6e6f7443726561746500030030556e6b6e6f776e41737365740004001846726f7a656e0005002c556e737570706f727465640006004043616e6e6f74437265617465486f6c64000700344e6f74457870656e6461626c650008001c426c6f636b65640009000074083473705f61726974686d657469633c41726974686d657469634572726f7200010c24556e646572666c6f77000000204f766572666c6f77000100384469766973696f6e42795a65726f0002000078082873705f72756e74696d65485472616e73616374696f6e616c4572726f72000108304c696d6974526561636865640000001c4e6f4c61796572000100007c0c7c63756d756c75735f70616c6c65745f70617261636861696e5f73797374656d1870616c6c6574144576656e740404540001186056616c69646174696f6e46756e6374696f6e53746f726564000004d05468652076616c69646174696f6e2066756e6374696f6e20686173206265656e207363686564756c656420746f206170706c792e6456616c69646174696f6e46756e6374696f6e4170706c69656404015472656c61795f636861696e5f626c6f636b5f6e756d10015452656c6179436861696e426c6f636b4e756d62657200010445015468652076616c69646174696f6e2066756e6374696f6e20776173206170706c696564206173206f662074686520636f6e7461696e65642072656c617920636861696e20626c6f636b206e756d6265722e6c56616c69646174696f6e46756e6374696f6e446973636172646564000204b05468652072656c61792d636861696e2061626f727465642074686520757067726164652070726f636573732e60446f776e776172644d657373616765735265636569766564040114636f756e7410010c7533320003040101536f6d6520646f776e77617264206d657373616765732068617665206265656e20726563656976656420616e642077696c6c2062652070726f6365737365642e64446f776e776172644d6573736167657350726f63657373656408012c7765696768745f75736564280118576569676874000120646d715f6865616434014472656c61795f636861696e3a3a48617368000404e0446f776e77617264206d6573736167657320776572652070726f636573736564207573696e672074686520676976656e207765696768742e445570776172644d65737361676553656e740401306d6573736167655f6861736880013c4f7074696f6e3c58636d486173683e000504b8416e20757077617264206d657373616765207761732073656e7420746f207468652072656c617920636861696e2e047c54686520604576656e746020656e756d206f6620746869732070616c6c65748004184f7074696f6e04045401040108104e6f6e6500000010536f6d650400040000010000840c3c70616c6c65745f62616c616e6365731870616c6c6574144576656e740804540004490001581c456e646f77656408011c6163636f756e74000130543a3a4163636f756e744964000130667265655f62616c616e6365180128543a3a42616c616e6365000004b8416e206163636f756e74207761732063726561746564207769746820736f6d6520667265652062616c616e63652e20447573744c6f737408011c6163636f756e74000130543a3a4163636f756e744964000118616d6f756e74180128543a3a42616c616e63650001083d01416e206163636f756e74207761732072656d6f7665642077686f73652062616c616e636520776173206e6f6e2d7a65726f206275742062656c6f77204578697374656e7469616c4465706f7369742c78726573756c74696e6720696e20616e206f75747269676874206c6f73732e205472616e736665720c011066726f6d000130543a3a4163636f756e744964000108746f000130543a3a4163636f756e744964000118616d6f756e74180128543a3a42616c616e63650002044c5472616e73666572207375636365656465642e2842616c616e636553657408010c77686f000130543a3a4163636f756e74496400011066726565180128543a3a42616c616e636500030468412062616c616e6365207761732073657420627920726f6f742e20526573657276656408010c77686f000130543a3a4163636f756e744964000118616d6f756e74180128543a3a42616c616e6365000404e0536f6d652062616c616e63652077617320726573657276656420286d6f7665642066726f6d206672656520746f207265736572766564292e28556e726573657276656408010c77686f000130543a3a4163636f756e744964000118616d6f756e74180128543a3a42616c616e6365000504e8536f6d652062616c616e63652077617320756e726573657276656420286d6f7665642066726f6d20726573657276656420746f2066726565292e4852657365727665526570617472696174656410011066726f6d000130543a3a4163636f756e744964000108746f000130543a3a4163636f756e744964000118616d6f756e74180128543a3a42616c616e636500014864657374696e6174696f6e5f7374617475738801185374617475730006084d01536f6d652062616c616e636520776173206d6f7665642066726f6d207468652072657365727665206f6620746865206669727374206163636f756e7420746f20746865207365636f6e64206163636f756e742ed846696e616c20617267756d656e7420696e64696361746573207468652064657374696e6174696f6e2062616c616e636520747970652e1c4465706f73697408010c77686f000130543a3a4163636f756e744964000118616d6f756e74180128543a3a42616c616e6365000704d8536f6d6520616d6f756e7420776173206465706f73697465642028652e672e20666f72207472616e73616374696f6e2066656573292e20576974686472617708010c77686f000130543a3a4163636f756e744964000118616d6f756e74180128543a3a42616c616e63650008041d01536f6d6520616d6f756e74207761732077697468647261776e2066726f6d20746865206163636f756e742028652e672e20666f72207472616e73616374696f6e2066656573292e1c536c617368656408010c77686f000130543a3a4163636f756e744964000118616d6f756e74180128543a3a42616c616e63650009040101536f6d6520616d6f756e74207761732072656d6f7665642066726f6d20746865206163636f756e742028652e672e20666f72206d69736265686176696f72292e184d696e74656408010c77686f000130543a3a4163636f756e744964000118616d6f756e74180128543a3a42616c616e6365000a049c536f6d6520616d6f756e7420776173206d696e74656420696e746f20616e206163636f756e742e184275726e656408010c77686f000130543a3a4163636f756e744964000118616d6f756e74180128543a3a42616c616e6365000b049c536f6d6520616d6f756e7420776173206275726e65642066726f6d20616e206163636f756e742e2453757370656e64656408010c77686f000130543a3a4163636f756e744964000118616d6f756e74180128543a3a42616c616e6365000c041501536f6d6520616d6f756e74207761732073757370656e6465642066726f6d20616e206163636f756e74202869742063616e20626520726573746f726564206c61746572292e20526573746f72656408010c77686f000130543a3a4163636f756e744964000118616d6f756e74180128543a3a42616c616e6365000d04a4536f6d6520616d6f756e742077617320726573746f72656420696e746f20616e206163636f756e742e20557067726164656404010c77686f000130543a3a4163636f756e744964000e0460416e206163636f756e74207761732075706772616465642e18497373756564040118616d6f756e74180128543a3a42616c616e6365000f042d01546f74616c2069737375616e63652077617320696e637265617365642062792060616d6f756e74602c206372656174696e6720612063726564697420746f2062652062616c616e6365642e2452657363696e646564040118616d6f756e74180128543a3a42616c616e63650010042501546f74616c2069737375616e636520776173206465637265617365642062792060616d6f756e74602c206372656174696e672061206465627420746f2062652062616c616e6365642e184c6f636b656408010c77686f000130543a3a4163636f756e744964000118616d6f756e74180128543a3a42616c616e636500110460536f6d652062616c616e636520776173206c6f636b65642e20556e6c6f636b656408010c77686f000130543a3a4163636f756e744964000118616d6f756e74180128543a3a42616c616e636500120468536f6d652062616c616e63652077617320756e6c6f636b65642e1846726f7a656e08010c77686f000130543a3a4163636f756e744964000118616d6f756e74180128543a3a42616c616e636500130460536f6d652062616c616e6365207761732066726f7a656e2e1854686177656408010c77686f000130543a3a4163636f756e744964000118616d6f756e74180128543a3a42616c616e636500140460536f6d652062616c616e636520776173207468617765642e4c546f74616c49737375616e6365466f7263656408010c6f6c64180128543a3a42616c616e636500010c6e6577180128543a3a42616c616e6365001504ac5468652060546f74616c49737375616e6365602077617320666f72636566756c6c79206368616e6765642e047c54686520604576656e746020656e756d206f6620746869732070616c6c65748814346672616d655f737570706f72741874726169747318746f6b656e73106d6973633442616c616e63655374617475730001081046726565000000205265736572766564000100008c0c6870616c6c65745f7472616e73616374696f6e5f7061796d656e741870616c6c6574144576656e74040454000104485472616e73616374696f6e466565506169640c010c77686f000130543a3a4163636f756e74496400012861637475616c5f66656518013042616c616e63654f663c543e00010c74697018013042616c616e63654f663c543e000008590141207472616e73616374696f6e20666565206061637475616c5f666565602c206f662077686963682060746970602077617320616464656420746f20746865206d696e696d756d20696e636c7573696f6e206665652c5c686173206265656e2070616964206279206077686f602e047c54686520604576656e746020656e756d206f6620746869732070616c6c6574900c2c70616c6c65745f7375646f1870616c6c6574144576656e7404045400011014537564696404012c7375646f5f726573756c749401384469737061746368526573756c7404b454686520726573756c74206f66207468652063616c6c206d61646520627920746865207375646f20757365722e00047041207375646f2063616c6c206a75737420746f6f6b20706c6163652e284b65794368616e67656408010c6f6c649c01504f7074696f6e3c543a3a4163636f756e7449643e04b4546865206f6c64207375646f206b657920286966206f6e65207761732070726576696f75736c7920736574292e010c6e6577000130543a3a4163636f756e7449640488546865206e6577207375646f206b657920286966206f6e652077617320736574292e010478546865207375646f206b657920686173206265656e20757064617465642e284b657952656d6f76656400020480546865206b657920776173207065726d616e656e746c792072656d6f7665642e285375646f4173446f6e6504012c7375646f5f726573756c749401384469737061746368526573756c7404b454686520726573756c74206f66207468652063616c6c206d61646520627920746865207375646f20757365722e0304c841205b7375646f5f61735d2850616c6c65743a3a7375646f5f6173292063616c6c206a75737420746f6f6b20706c6163652e047c54686520604576656e746020656e756d206f6620746869732070616c6c6574940418526573756c740804540198044501680108084f6b040098000000000c45727204006800000100009800000400009c04184f7074696f6e04045401000108104e6f6e6500000010536f6d650400000000010000a00c6470616c6c65745f636f6c6c61746f725f73656c656374696f6e1870616c6c6574144576656e74040454000128404e6577496e76756c6e657261626c6573040134696e76756c6e657261626c6573a401445665633c543a3a4163636f756e7449643e0000046c4e657720496e76756c6e657261626c65732077657265207365742e44496e76756c6e657261626c6541646465640401286163636f756e745f6964000130543a3a4163636f756e7449640001047441206e657720496e76756c6e657261626c65207761732061646465642e4c496e76756c6e657261626c6552656d6f7665640401286163636f756e745f6964000130543a3a4163636f756e74496400020470416e20496e76756c6e657261626c65207761732072656d6f7665642e504e65774465736972656443616e64696461746573040148646573697265645f63616e6469646174657310010c753332000304a4546865206e756d626572206f6620646573697265642063616e6469646174657320776173207365742e404e657743616e646964616379426f6e6404012c626f6e645f616d6f756e7418013042616c616e63654f663c543e0004046c5468652063616e64696461637920626f6e6420776173207365742e3843616e64696461746541646465640801286163636f756e745f6964000130543a3a4163636f756e74496400011c6465706f73697418013042616c616e63654f663c543e0005045c41206e65772063616e646964617465206a6f696e65642e5043616e646964617465426f6e64557064617465640801286163636f756e745f6964000130543a3a4163636f756e74496400011c6465706f73697418013042616c616e63654f663c543e00060470426f6e64206f6620612063616e64696461746520757064617465642e4043616e64696461746552656d6f7665640401286163636f756e745f6964000130543a3a4163636f756e74496400070460412063616e646964617465207761732072656d6f7665642e4443616e6469646174655265706c616365640c010c6f6c64000130543a3a4163636f756e74496400010c6e6577000130543a3a4163636f756e74496400011c6465706f73697418013042616c616e63654f663c543e000804f4416e206163636f756e7420776173207265706c6163656420696e207468652063616e646964617465206c69737420627920616e6f74686572206f6e652e68496e76616c6964496e76756c6e657261626c65536b69707065640401286163636f756e745f6964000130543a3a4163636f756e7449640009085501416e206163636f756e742077617320756e61626c6520746f20626520616464656420746f2074686520496e76756c6e657261626c65732062656361757365207468657920646964206e6f742068617665206b657973c8726567697374657265642e204f7468657220496e76756c6e657261626c6573206d61792068617665206265656e207365742e047c54686520604576656e746020656e756d206f6620746869732070616c6c6574a40000020000a80c3870616c6c65745f73657373696f6e1870616c6c6574144576656e74000104284e657753657373696f6e04013473657373696f6e5f696e64657810013053657373696f6e496e64657800000839014e65772073657373696f6e206861732068617070656e65642e204e6f746520746861742074686520617267756d656e74206973207468652073657373696f6e20696e6465782c206e6f74207468659c626c6f636b206e756d626572206173207468652074797065206d6967687420737567676573742e047c54686520604576656e746020656e756d206f6620746869732070616c6c6574ac0c6463756d756c75735f70616c6c65745f78636d705f71756575651870616c6c6574144576656e740404540001043c58636d704d65737361676553656e740401306d6573736167655f6861736804011c58636d48617368000004c0416e2048524d50206d657373616765207761732073656e7420746f2061207369626c696e672070617261636861696e2e047c54686520604576656e746020656e756d206f6620746869732070616c6c6574b00c2870616c6c65745f78636d1870616c6c6574144576656e7404045400016024417474656d7074656404011c6f7574636f6d65b4015078636d3a3a6c61746573743a3a4f7574636f6d65000004a8457865637574696f6e206f6620616e2058434d206d6573736167652077617320617474656d707465642e1053656e741001186f726967696ebc01204c6f636174696f6e00012c64657374696e6174696f6ebc01204c6f636174696f6e00011c6d6573736167650501011c58636d3c28293e0001286d6573736167655f696404011c58636d486173680001045c412058434d206d657373616765207761732073656e742e48556e6578706563746564526573706f6e73650801186f726967696ebc01204c6f636174696f6e00012071756572795f696430011c5175657279496400020c5901517565727920726573706f6e736520726563656976656420776869636820646f6573206e6f74206d61746368206120726567697374657265642071756572792e2054686973206d61792062652062656361757365206155016d61746368696e6720717565727920776173206e6576657220726567697374657265642c206974206d617920626520626563617573652069742069732061206475706c696361746520726573706f6e73652c206f727062656361757365207468652071756572792074696d6564206f75742e34526573706f6e7365526561647908012071756572795f696430011c51756572794964000120726573706f6e736531010120526573706f6e73650003085d01517565727920726573706f6e736520686173206265656e20726563656976656420616e6420697320726561647920666f722074616b696e672077697468206074616b655f726573706f6e7365602e205468657265206973806e6f2072656769737465726564206e6f74696669636174696f6e2063616c6c2e204e6f7469666965640c012071756572795f696430011c5175657279496400013070616c6c65745f696e646578080108753800012863616c6c5f696e64657808010875380004085901517565727920726573706f6e736520686173206265656e20726563656976656420616e642071756572792069732072656d6f7665642e205468652072656769737465726564206e6f74696669636174696f6e20686173a86265656e206469737061746368656420616e64206578656375746564207375636365737366756c6c792e404e6f746966794f76657277656967687414012071756572795f696430011c5175657279496400013070616c6c65745f696e646578080108753800012863616c6c5f696e646578080108753800013461637475616c5f77656967687428011857656967687400014c6d61785f62756467657465645f77656967687428011857656967687400050c4901517565727920726573706f6e736520686173206265656e20726563656976656420616e642071756572792069732072656d6f7665642e205468652072656769737465726564206e6f74696669636174696f6e5901636f756c64206e6f742062652064697370617463686564206265636175736520746865206469737061746368207765696768742069732067726561746572207468616e20746865206d6178696d756d20776569676874e46f726967696e616c6c7920627564676574656420627920746869732072756e74696d6520666f722074686520717565727920726573756c742e4c4e6f7469667944697370617463684572726f720c012071756572795f696430011c5175657279496400013070616c6c65745f696e646578080108753800012863616c6c5f696e64657808010875380006085501517565727920726573706f6e736520686173206265656e20726563656976656420616e642071756572792069732072656d6f7665642e2054686572652077617320612067656e6572616c206572726f722077697468886469737061746368696e6720746865206e6f74696669636174696f6e2063616c6c2e484e6f746966794465636f64654661696c65640c012071756572795f696430011c5175657279496400013070616c6c65745f696e646578080108753800012863616c6c5f696e646578080108753800070c5101517565727920726573706f6e736520686173206265656e20726563656976656420616e642071756572792069732072656d6f7665642e205468652064697370617463682077617320756e61626c6520746f20626559016465636f64656420696e746f2061206043616c6c603b2074686973206d696768742062652064756520746f2064697370617463682066756e6374696f6e20686176696e672061207369676e6174757265207768696368946973206e6f742060286f726967696e2c20517565727949642c20526573706f6e736529602e40496e76616c6964526573706f6e6465720c01186f726967696ebc01204c6f636174696f6e00012071756572795f696430011c5175657279496400014465787065637465645f6c6f636174696f6e550101404f7074696f6e3c4c6f636174696f6e3e00080c5901457870656374656420717565727920726573706f6e736520686173206265656e2072656365697665642062757420746865206f726967696e206c6f636174696f6e206f662074686520726573706f6e736520646f657355016e6f74206d6174636820746861742065787065637465642e205468652071756572792072656d61696e73207265676973746572656420666f722061206c617465722c2076616c69642c20726573706f6e736520746f6c626520726563656976656420616e642061637465642075706f6e2e5c496e76616c6964526573706f6e64657256657273696f6e0801186f726967696ebc01204c6f636174696f6e00012071756572795f696430011c5175657279496400091c5101457870656374656420717565727920726573706f6e736520686173206265656e2072656365697665642062757420746865206578706563746564206f726967696e206c6f636174696f6e20706c6163656420696e4d0173746f7261676520627920746869732072756e74696d652070726576696f75736c792063616e6e6f74206265206465636f6465642e205468652071756572792072656d61696e7320726567697374657265642e0041015468697320697320756e6578706563746564202873696e63652061206c6f636174696f6e20706c6163656420696e2073746f7261676520696e20612070726576696f75736c7920657865637574696e674d0172756e74696d652073686f756c64206265207265616461626c65207072696f7220746f2071756572792074696d656f75742920616e642064616e6765726f75732073696e63652074686520706f737369626c79590176616c696420726573706f6e73652077696c6c2062652064726f707065642e204d616e75616c20676f7665726e616e636520696e74657276656e74696f6e2069732070726f6261626c7920676f696e6720746f2062651c6e65656465642e34526573706f6e736554616b656e04012071756572795f696430011c51756572794964000a04c8526563656976656420717565727920726573706f6e736520686173206265656e207265616420616e642072656d6f7665642e34417373657473547261707065640c011068617368340110483235360001186f726967696ebc01204c6f636174696f6e0001186173736574737501013c56657273696f6e6564417373657473000b04b8536f6d65206173736574732068617665206265656e20706c6163656420696e20616e20617373657420747261702e5456657273696f6e4368616e67654e6f74696669656410012c64657374696e6174696f6ebc01204c6f636174696f6e000118726573756c7410012858636d56657273696f6e000110636f7374110101184173736574730001286d6573736167655f696404011c58636d48617368000c0c2501416e2058434d2076657273696f6e206368616e6765206e6f74696669636174696f6e206d65737361676520686173206265656e20617474656d7074656420746f2062652073656e742e00e054686520636f7374206f662073656e64696e672069742028626f726e652062792074686520636861696e2920697320696e636c756465642e5c537570706f7274656456657273696f6e4368616e6765640801206c6f636174696f6ebc01204c6f636174696f6e00011c76657273696f6e10012858636d56657273696f6e000d08390154686520737570706f727465642076657273696f6e206f662061206c6f636174696f6e20686173206265656e206368616e6765642e2054686973206d69676874206265207468726f75676820616ec06175746f6d61746963206e6f74696669636174696f6e206f722061206d616e75616c20696e74657276656e74696f6e2e504e6f7469667954617267657453656e644661696c0c01206c6f636174696f6ebc01204c6f636174696f6e00012071756572795f696430011c517565727949640001146572726f72b8012058636d4572726f72000e0859014120676976656e206c6f636174696f6e2077686963682068616420612076657273696f6e206368616e676520737562736372697074696f6e207761732064726f70706564206f77696e6720746f20616e206572726f727c73656e64696e6720746865206e6f74696669636174696f6e20746f2069742e644e6f746966795461726765744d6967726174696f6e4661696c0801206c6f636174696f6ed901014456657273696f6e65644c6f636174696f6e00012071756572795f696430011c51756572794964000f0859014120676976656e206c6f636174696f6e2077686963682068616420612076657273696f6e206368616e676520737562736372697074696f6e207761732064726f70706564206f77696e6720746f20616e206572726f72b46d6967726174696e6720746865206c6f636174696f6e20746f206f7572206e65772058434d20666f726d61742e54496e76616c69645175657269657256657273696f6e0801186f726967696ebc01204c6f636174696f6e00012071756572795f696430011c5175657279496400101c5501457870656374656420717565727920726573706f6e736520686173206265656e20726563656976656420627574207468652065787065637465642071756572696572206c6f636174696f6e20706c6163656420696e4d0173746f7261676520627920746869732072756e74696d652070726576696f75736c792063616e6e6f74206265206465636f6465642e205468652071756572792072656d61696e7320726567697374657265642e0041015468697320697320756e6578706563746564202873696e63652061206c6f636174696f6e20706c6163656420696e2073746f7261676520696e20612070726576696f75736c7920657865637574696e674d0172756e74696d652073686f756c64206265207265616461626c65207072696f7220746f2071756572792074696d656f75742920616e642064616e6765726f75732073696e63652074686520706f737369626c79590176616c696420726573706f6e73652077696c6c2062652064726f707065642e204d616e75616c20676f7665726e616e636520696e74657276656e74696f6e2069732070726f6261626c7920676f696e6720746f2062651c6e65656465642e38496e76616c6964517565726965721001186f726967696ebc01204c6f636174696f6e00012071756572795f696430011c5175657279496400014065787065637465645f71756572696572bc01204c6f636174696f6e0001506d617962655f61637475616c5f71756572696572550101404f7074696f6e3c4c6f636174696f6e3e00110c5d01457870656374656420717565727920726573706f6e736520686173206265656e20726563656976656420627574207468652071756572696572206c6f636174696f6e206f662074686520726573706f6e736520646f657351016e6f74206d61746368207468652065787065637465642e205468652071756572792072656d61696e73207265676973746572656420666f722061206c617465722c2076616c69642c20726573706f6e736520746f6c626520726563656976656420616e642061637465642075706f6e2e5056657273696f6e4e6f74696679537461727465640c012c64657374696e6174696f6ebc01204c6f636174696f6e000110636f7374110101184173736574730001286d6573736167655f696404011c58636d486173680012085901412072656d6f746520686173207265717565737465642058434d2076657273696f6e206368616e6765206e6f74696669636174696f6e2066726f6d20757320616e64207765206861766520686f6e6f7265642069742e1d01412076657273696f6e20696e666f726d6174696f6e206d6573736167652069732073656e7420746f207468656d20616e642069747320636f737420697320696e636c756465642e5856657273696f6e4e6f746966795265717565737465640c012c64657374696e6174696f6ebc01204c6f636174696f6e000110636f7374110101184173736574730001286d6573736167655f696404011c58636d486173680013043d015765206861766520726571756573746564207468617420612072656d6f746520636861696e2073656e642075732058434d2076657273696f6e206368616e6765206e6f74696669636174696f6e732e6056657273696f6e4e6f74696679556e7265717565737465640c012c64657374696e6174696f6ebc01204c6f636174696f6e000110636f7374110101184173736574730001286d6573736167655f696404011c58636d4861736800140825015765206861766520726571756573746564207468617420612072656d6f746520636861696e2073746f70732073656e64696e672075732058434d2076657273696f6e206368616e6765386e6f74696669636174696f6e732e204665657350616964080118706179696e67bc01204c6f636174696f6e0001106665657311010118417373657473001504310146656573207765726520706169642066726f6d2061206c6f636174696f6e20666f7220616e206f7065726174696f6e20286f6674656e20666f72207573696e67206053656e6458636d60292e34417373657473436c61696d65640c011068617368340110483235360001186f726967696ebc01204c6f636174696f6e0001186173736574737501013c56657273696f6e6564417373657473001604c0536f6d65206173736574732068617665206265656e20636c61696d65642066726f6d20616e20617373657420747261706056657273696f6e4d6967726174696f6e46696e697368656404011c76657273696f6e10012858636d56657273696f6e00170484412058434d2076657273696f6e206d6967726174696f6e2066696e69736865642e047c54686520604576656e746020656e756d206f6620746869732070616c6c6574b4102c73746167696e675f78636d087634187472616974731c4f7574636f6d6500010c20436f6d706c6574650401107573656428011857656967687400000028496e636f6d706c657465080110757365642801185765696768740001146572726f72b801144572726f72000100144572726f720401146572726f72b801144572726f7200020000b8100c78636d08763318747261697473144572726f720001a0204f766572666c6f7700000034556e696d706c656d656e74656400010060556e74727573746564526573657276654c6f636174696f6e00020064556e7472757374656454656c65706f72744c6f636174696f6e000300304c6f636174696f6e46756c6c000400544c6f636174696f6e4e6f74496e7665727469626c65000500244261644f726967696e0006003c496e76616c69644c6f636174696f6e0007003441737365744e6f74466f756e64000800544661696c6564546f5472616e7361637441737365740009003c4e6f74576974686472617761626c65000a00484c6f636174696f6e43616e6e6f74486f6c64000b0054457863656564734d61784d65737361676553697a65000c005844657374696e6174696f6e556e737570706f72746564000d00245472616e73706f7274000e0028556e726f757461626c65000f0030556e6b6e6f776e436c61696d001000384661696c6564546f4465636f6465001100404d6178576569676874496e76616c6964001200384e6f74486f6c64696e674665657300130030546f6f457870656e736976650014001054726170040030010c753634001500404578706563746174696f6e46616c73650016003850616c6c65744e6f74466f756e64001700304e616d654d69736d617463680018004c56657273696f6e496e636f6d70617469626c6500190050486f6c64696e67576f756c644f766572666c6f77001a002c4578706f72744572726f72001b00385265616e63686f724661696c6564001c00184e6f4465616c001d0028466565734e6f744d6574001e00244c6f636b4572726f72001f00304e6f5065726d697373696f6e00200028556e616e63686f726564002100384e6f744465706f73697461626c650022004c556e68616e646c656458636d56657273696f6e002300485765696768744c696d69745265616368656404002801185765696768740024001c426172726965720025004c5765696768744e6f74436f6d70757461626c650026004445786365656473537461636b4c696d697400270000bc102c73746167696e675f78636d087634206c6f636174696f6e204c6f636174696f6e000008011c706172656e74730801087538000120696e746572696f72c001244a756e6374696f6e730000c0102c73746167696e675f78636d087634246a756e6374696f6e73244a756e6374696f6e7300012410486572650000000858310400c401484172633c5b4a756e6374696f6e3b20315d3e0001000858320400e801484172633c5b4a756e6374696f6e3b20325d3e0002000858330400ec01484172633c5b4a756e6374696f6e3b20335d3e0003000858340400f001484172633c5b4a756e6374696f6e3b20345d3e0004000858350400f401484172633c5b4a756e6374696f6e3b20355d3e0005000858360400f801484172633c5b4a756e6374696f6e3b20365d3e0006000858370400fc01484172633c5b4a756e6374696f6e3b20375d3e0007000858380400010101484172633c5b4a756e6374696f6e3b20385d3e00080000c400000301000000c800c8102c73746167696e675f78636d087634206a756e6374696f6e204a756e6374696f6e0001282450617261636861696e0400cc010c7533320000002c4163636f756e744964333208011c6e6574776f726bd001444f7074696f6e3c4e6574776f726b49643e00010869640401205b75383b2033325d000100384163636f756e74496e646578363408011c6e6574776f726bd001444f7074696f6e3c4e6574776f726b49643e000114696e6465782c010c753634000200304163636f756e744b6579323008011c6e6574776f726bd001444f7074696f6e3c4e6574776f726b49643e00010c6b6579d801205b75383b2032305d0003003850616c6c6574496e7374616e6365040008010875380004003047656e6572616c496e6465780400dc0110753132380005002847656e6572616c4b65790801186c656e6774680801087538000110646174610401205b75383b2033325d000600244f6e6c794368696c6400070024506c7572616c6974790801086964e00118426f6479496400011070617274e40120426f6479506172740008003c476c6f62616c436f6e73656e7375730400d401244e6574776f726b496400090000cc0000061000d004184f7074696f6e04045401d40108104e6f6e6500000010536f6d650400d40000010000d4102c73746167696e675f78636d087634206a756e6374696f6e244e6574776f726b496400012c24427947656e6573697304000401205b75383b2033325d000000184279466f726b080130626c6f636b5f6e756d62657230010c753634000128626c6f636b5f686173680401205b75383b2033325d00010020506f6c6b61646f74000200184b7573616d610003001c57657374656e6400040018526f636f636f00050018576f636f636f00060020457468657265756d040120636861696e5f69642c010c7536340007002c426974636f696e436f72650008002c426974636f696e4361736800090040506f6c6b61646f7442756c6c6574696e000a0000d8000003140000000800dc0000061800e0100c78636d087633206a756e6374696f6e18426f6479496400012810556e69740000001c4d6f6e696b6572040048011c5b75383b20345d00010014496e6465780400cc010c7533320002002445786563757469766500030024546563686e6963616c0004002c4c656769736c6174697665000500204a7564696369616c0006001c446566656e73650007003841646d696e697374726174696f6e00080020547265617375727900090000e4100c78636d087633206a756e6374696f6e20426f64795061727400011414566f6963650000001c4d656d62657273040114636f756e74cc010c753332000100204672616374696f6e08010c6e6f6dcc010c75333200011464656e6f6dcc010c7533320002004441744c6561737450726f706f7274696f6e08010c6e6f6dcc010c75333200011464656e6f6dcc010c753332000300484d6f72655468616e50726f706f7274696f6e08010c6e6f6dcc010c75333200011464656e6f6dcc010c75333200040000e800000302000000c800ec00000303000000c800f000000304000000c800f400000305000000c800f800000306000000c800fc00000307000000c800010100000308000000c80005010c2c73746167696e675f78636d0876340c58636d041043616c6c00000400090101585665633c496e737472756374696f6e3c43616c6c3e3e000009010000020d01000d010c2c73746167696e675f78636d0876342c496e737472756374696f6e041043616c6c0001c03457697468647261774173736574040011010118417373657473000000545265736572766541737365744465706f7369746564040011010118417373657473000100585265636569766554656c65706f727465644173736574040011010118417373657473000200345175657279526573706f6e736510012071756572795f69642c011c51756572794964000120726573706f6e736531010120526573706f6e73650001286d61785f77656967687428011857656967687400011c71756572696572550101404f7074696f6e3c4c6f636174696f6e3e000300345472616e7366657241737365740801186173736574731101011841737365747300012c62656e6566696369617279bc01204c6f636174696f6e000400505472616e736665725265736572766541737365740c01186173736574731101011841737365747300011064657374bc01204c6f636174696f6e00010c78636d0501011c58636d3c28293e000500205472616e736163740c012c6f726967696e5f6b696e64590101284f726967696e4b696e64000158726571756972655f7765696768745f61745f6d6f737428011857656967687400011063616c6c5d01014c446f75626c65456e636f6465643c43616c6c3e0006006448726d704e65774368616e6e656c4f70656e526571756573740c011873656e646572cc010c7533320001406d61785f6d6573736167655f73697a65cc010c7533320001306d61785f6361706163697479cc010c7533320007004c48726d704368616e6e656c4163636570746564040124726563697069656e74cc010c7533320008004848726d704368616e6e656c436c6f73696e670c0124696e69746961746f72cc010c75333200011873656e646572cc010c753332000124726563697069656e74cc010c7533320009002c436c6561724f726967696e000a003444657363656e644f726967696e0400c00140496e746572696f724c6f636174696f6e000b002c5265706f72744572726f720400610101445175657279526573706f6e7365496e666f000c00304465706f73697441737365740801186173736574736501012c417373657446696c74657200012c62656e6566696369617279bc01204c6f636174696f6e000d004c4465706f7369745265736572766541737365740c01186173736574736501012c417373657446696c74657200011064657374bc01204c6f636174696f6e00010c78636d0501011c58636d3c28293e000e003445786368616e676541737365740c0110676976656501012c417373657446696c74657200011077616e741101011841737365747300011c6d6178696d616c200110626f6f6c000f005c496e6974696174655265736572766557697468647261770c01186173736574736501012c417373657446696c74657200011c72657365727665bc01204c6f636174696f6e00010c78636d0501011c58636d3c28293e00100040496e69746961746554656c65706f72740c01186173736574736501012c417373657446696c74657200011064657374bc01204c6f636174696f6e00010c78636d0501011c58636d3c28293e001100345265706f7274486f6c64696e67080134726573706f6e73655f696e666f610101445175657279526573706f6e7365496e666f0001186173736574736501012c417373657446696c74657200120030427579457865637574696f6e080110666565731901011441737365740001307765696768745f6c696d69747101012c5765696768744c696d697400130034526566756e64537572706c75730014003c5365744572726f7248616e646c657204000501012458636d3c43616c6c3e0015002c536574417070656e64697804000501012458636d3c43616c6c3e00160028436c6561724572726f7200170028436c61696d4173736574080118617373657473110101184173736574730001187469636b6574bc01204c6f636174696f6e001800105472617004002c010c7536340019004053756273637269626556657273696f6e08012071756572795f69642c011c5175657279496400014c6d61785f726573706f6e73655f776569676874280118576569676874001a0048556e73756273637269626556657273696f6e001b00244275726e4173736574040011010118417373657473001c002c4578706563744173736574040011010118417373657473001d00304578706563744f726967696e0400550101404f7074696f6e3c4c6f636174696f6e3e001e002c4578706563744572726f720400350101504f7074696f6e3c287533322c204572726f72293e001f00504578706563745472616e7361637453746174757304004d0101384d617962654572726f72436f64650020002c517565727950616c6c657408012c6d6f64756c655f6e616d6538011c5665633c75383e000134726573706f6e73655f696e666f610101445175657279526573706f6e7365496e666f0021003045787065637450616c6c6574140114696e646578cc010c7533320001106e616d6538011c5665633c75383e00012c6d6f64756c655f6e616d6538011c5665633c75383e00012c63726174655f6d616a6f72cc010c75333200013c6d696e5f63726174655f6d696e6f72cc010c753332002200505265706f72745472616e736163745374617475730400610101445175657279526573706f6e7365496e666f0023004c436c6561725472616e736163745374617475730024003c556e6976657273616c4f726967696e0400c801204a756e6374696f6e002500344578706f72744d6573736167650c011c6e6574776f726bd401244e6574776f726b496400012c64657374696e6174696f6ec00140496e746572696f724c6f636174696f6e00010c78636d0501011c58636d3c28293e002600244c6f636b41737365740801146173736574190101144173736574000120756e6c6f636b6572bc01204c6f636174696f6e0027002c556e6c6f636b41737365740801146173736574190101144173736574000118746172676574bc01204c6f636174696f6e002800384e6f7465556e6c6f636b61626c6508011461737365741901011441737365740001146f776e6572bc01204c6f636174696f6e0029003452657175657374556e6c6f636b08011461737365741901011441737365740001186c6f636b6572bc01204c6f636174696f6e002a002c536574466565734d6f64650401306a69745f7769746864726177200110626f6f6c002b0020536574546f70696304000401205b75383b2033325d002c0028436c656172546f706963002d002c416c6961734f726967696e0400bc01204c6f636174696f6e002e003c556e70616964457865637574696f6e0801307765696768745f6c696d69747101012c5765696768744c696d6974000130636865636b5f6f726967696e550101404f7074696f6e3c4c6f636174696f6e3e002f00001101102c73746167696e675f78636d0876341461737365741841737365747300000400150101285665633c41737365743e000015010000021901001901102c73746167696e675f78636d087634146173736574144173736574000008010869641d01011c4173736574496400010c66756e2101012c46756e676962696c69747900001d01102c73746167696e675f78636d0876341461737365741c4173736574496400000400bc01204c6f636174696f6e00002101102c73746167696e675f78636d0876341461737365742c46756e676962696c6974790001082046756e6769626c650400dc0110753132380000002c4e6f6e46756e6769626c650400250101344173736574496e7374616e6365000100002501102c73746167696e675f78636d087634146173736574344173736574496e7374616e636500011824556e646566696e656400000014496e6465780400dc01107531323800010018417272617934040048011c5b75383b20345d0002001841727261793804002901011c5b75383b20385d0003001c4172726179313604002d0101205b75383b2031365d0004001c4172726179333204000401205b75383b2033325d0005000029010000030800000008002d0100000310000000080031010c2c73746167696e675f78636d08763420526573706f6e7365000118104e756c6c000000184173736574730400110101184173736574730001003c457865637574696f6e526573756c740400350101504f7074696f6e3c287533322c204572726f72293e0002001c56657273696f6e040010013873757065723a3a56657273696f6e0003002c50616c6c657473496e666f04003d010198426f756e6465645665633c50616c6c6574496e666f2c204d617850616c6c657473496e666f3e000400384469737061746368526573756c7404004d0101384d617962654572726f72436f646500050000350104184f7074696f6e0404540139010108104e6f6e6500000010536f6d6504003901000001000039010000040810b8003d010c4c626f756e6465645f636f6c6c656374696f6e732c626f756e6465645f76656328426f756e646564566563080454014101045300000400490101185665633c543e000041010c2c73746167696e675f78636d0876342850616c6c6574496e666f0000180114696e646578cc010c7533320001106e616d6545010180426f756e6465645665633c75382c204d617850616c6c65744e616d654c656e3e00012c6d6f64756c655f6e616d6545010180426f756e6465645665633c75382c204d617850616c6c65744e616d654c656e3e0001146d616a6f72cc010c7533320001146d696e6f72cc010c7533320001147061746368cc010c753332000045010c4c626f756e6465645f636f6c6c656374696f6e732c626f756e6465645f76656328426f756e64656456656308045401080453000004003801185665633c543e000049010000024101004d010c0c78636d087633384d617962654572726f72436f646500010c1c53756363657373000000144572726f7204005101018c426f756e6465645665633c75382c204d617844697370617463684572726f724c656e3e000100385472756e63617465644572726f7204005101018c426f756e6465645665633c75382c204d617844697370617463684572726f724c656e3e0002000051010c4c626f756e6465645f636f6c6c656374696f6e732c626f756e6465645f76656328426f756e64656456656308045401080453000004003801185665633c543e0000550104184f7074696f6e04045401bc0108104e6f6e6500000010536f6d650400bc000001000059010c0c78636d087632284f726967696e4b696e64000110184e617469766500000040536f7665726569676e4163636f756e74000100245375706572757365720002000c58636d000300005d010c0c78636d38646f75626c655f656e636f64656434446f75626c65456e636f646564040454000004011c656e636f64656438011c5665633c75383e000061010c2c73746167696e675f78636d087634445175657279526573706f6e7365496e666f00000c012c64657374696e6174696f6ebc01204c6f636174696f6e00012071756572795f69642c011c517565727949640001286d61785f77656967687428011857656967687400006501102c73746167696e675f78636d0876341461737365742c417373657446696c74657200010820446566696e6974650400110101184173736574730000001057696c6404006901012457696c644173736574000100006901102c73746167696e675f78636d0876341461737365742457696c6441737365740001100c416c6c00000014416c6c4f6608010869641d01011c4173736574496400010c66756e6d01013c57696c6446756e676962696c69747900010028416c6c436f756e7465640400cc010c75333200020030416c6c4f66436f756e7465640c010869641d01011c4173736574496400010c66756e6d01013c57696c6446756e676962696c697479000114636f756e74cc010c753332000300006d01102c73746167696e675f78636d0876341461737365743c57696c6446756e676962696c6974790001082046756e6769626c650000002c4e6f6e46756e6769626c650001000071010c0c78636d0876332c5765696768744c696d697400010824556e6c696d697465640000001c4c696d697465640400280118576569676874000100007501080c78636d3c56657273696f6e656441737365747300010c08563204007901013c76323a3a4d756c74694173736574730001000856330400ad01013c76333a3a4d756c746941737365747300030008563404001101012876343a3a417373657473000400007901100c78636d087632286d756c746961737365742c4d756c7469417373657473000004007d01013c5665633c4d756c746941737365743e00007d010000028101008101100c78636d087632286d756c74696173736574284d756c74694173736574000008010869648501011c4173736574496400010c66756ea501012c46756e676962696c69747900008501100c78636d087632286d756c746961737365741c4173736574496400010820436f6e63726574650400890101344d756c74694c6f636174696f6e000000204162737472616374040038011c5665633c75383e000100008901100c78636d087632346d756c74696c6f636174696f6e344d756c74694c6f636174696f6e000008011c706172656e74730801087538000120696e746572696f728d0101244a756e6374696f6e7300008d01100c78636d087632346d756c74696c6f636174696f6e244a756e6374696f6e7300012410486572650000000858310400910101204a756e6374696f6e0001000858320800910101204a756e6374696f6e0000910101204a756e6374696f6e0002000858330c00910101204a756e6374696f6e0000910101204a756e6374696f6e0000910101204a756e6374696f6e0003000858341000910101204a756e6374696f6e0000910101204a756e6374696f6e0000910101204a756e6374696f6e0000910101204a756e6374696f6e0004000858351400910101204a756e6374696f6e0000910101204a756e6374696f6e0000910101204a756e6374696f6e0000910101204a756e6374696f6e0000910101204a756e6374696f6e0005000858361800910101204a756e6374696f6e0000910101204a756e6374696f6e0000910101204a756e6374696f6e0000910101204a756e6374696f6e0000910101204a756e6374696f6e0000910101204a756e6374696f6e0006000858371c00910101204a756e6374696f6e0000910101204a756e6374696f6e0000910101204a756e6374696f6e0000910101204a756e6374696f6e0000910101204a756e6374696f6e0000910101204a756e6374696f6e0000910101204a756e6374696f6e0007000858382000910101204a756e6374696f6e0000910101204a756e6374696f6e0000910101204a756e6374696f6e0000910101204a756e6374696f6e0000910101204a756e6374696f6e0000910101204a756e6374696f6e0000910101204a756e6374696f6e0000910101204a756e6374696f6e000800009101100c78636d087632206a756e6374696f6e204a756e6374696f6e0001242450617261636861696e0400cc010c7533320000002c4163636f756e744964333208011c6e6574776f726b950101244e6574776f726b496400010869640401205b75383b2033325d000100384163636f756e74496e646578363408011c6e6574776f726b950101244e6574776f726b4964000114696e6465782c010c753634000200304163636f756e744b6579323008011c6e6574776f726b950101244e6574776f726b496400010c6b6579d801205b75383b2032305d0003003850616c6c6574496e7374616e6365040008010875380004003047656e6572616c496e6465780400dc0110753132380005002847656e6572616c4b65790400990101805765616b426f756e6465645665633c75382c20436f6e73745533323c33323e3e000600244f6e6c794368696c6400070024506c7572616c69747908010869649d010118426f6479496400011070617274a1010120426f6479506172740008000095010c0c78636d087632244e6574776f726b49640001100c416e79000000144e616d65640400990101805765616b426f756e6465645665633c75382c20436f6e73745533323c33323e3e00010020506f6c6b61646f74000200184b7573616d610003000099010c4c626f756e6465645f636f6c6c656374696f6e73407765616b5f626f756e6465645f766563385765616b426f756e64656456656308045401080453000004003801185665633c543e00009d010c0c78636d08763218426f6479496400012810556e6974000000144e616d65640400990101805765616b426f756e6465645665633c75382c20436f6e73745533323c33323e3e00010014496e6465780400cc010c7533320002002445786563757469766500030024546563686e6963616c0004002c4c656769736c6174697665000500204a7564696369616c0006001c446566656e73650007003841646d696e697374726174696f6e00080020547265617375727900090000a1010c0c78636d08763220426f64795061727400011414566f6963650000001c4d656d62657273040114636f756e74cc010c753332000100204672616374696f6e08010c6e6f6dcc010c75333200011464656e6f6dcc010c7533320002004441744c6561737450726f706f7274696f6e08010c6e6f6dcc010c75333200011464656e6f6dcc010c753332000300484d6f72655468616e50726f706f7274696f6e08010c6e6f6dcc010c75333200011464656e6f6dcc010c75333200040000a501100c78636d087632286d756c746961737365742c46756e676962696c6974790001082046756e6769626c650400dc0110753132380000002c4e6f6e46756e6769626c650400a90101344173736574496e7374616e636500010000a901100c78636d087632286d756c74696173736574344173736574496e7374616e636500011c24556e646566696e656400000014496e6465780400dc01107531323800010018417272617934040048011c5b75383b20345d0002001841727261793804002901011c5b75383b20385d0003001c4172726179313604002d0101205b75383b2031365d0004001c4172726179333204000401205b75383b2033325d00050010426c6f62040038011c5665633c75383e00060000ad01100c78636d087633286d756c746961737365742c4d756c746941737365747300000400b101013c5665633c4d756c746941737365743e0000b101000002b50100b501100c78636d087633286d756c74696173736574284d756c7469417373657400000801086964b901011c4173736574496400010c66756ed101012c46756e676962696c6974790000b901100c78636d087633286d756c746961737365741c4173736574496400010820436f6e63726574650400bd0101344d756c74694c6f636174696f6e00000020416273747261637404000401205b75383b2033325d00010000bd01102c73746167696e675f78636d087633346d756c74696c6f636174696f6e344d756c74694c6f636174696f6e000008011c706172656e74730801087538000120696e746572696f72c10101244a756e6374696f6e730000c101100c78636d087633246a756e6374696f6e73244a756e6374696f6e7300012410486572650000000858310400c50101204a756e6374696f6e0001000858320800c50101204a756e6374696f6e0000c50101204a756e6374696f6e0002000858330c00c50101204a756e6374696f6e0000c50101204a756e6374696f6e0000c50101204a756e6374696f6e0003000858341000c50101204a756e6374696f6e0000c50101204a756e6374696f6e0000c50101204a756e6374696f6e0000c50101204a756e6374696f6e0004000858351400c50101204a756e6374696f6e0000c50101204a756e6374696f6e0000c50101204a756e6374696f6e0000c50101204a756e6374696f6e0000c50101204a756e6374696f6e0005000858361800c50101204a756e6374696f6e0000c50101204a756e6374696f6e0000c50101204a756e6374696f6e0000c50101204a756e6374696f6e0000c50101204a756e6374696f6e0000c50101204a756e6374696f6e0006000858371c00c50101204a756e6374696f6e0000c50101204a756e6374696f6e0000c50101204a756e6374696f6e0000c50101204a756e6374696f6e0000c50101204a756e6374696f6e0000c50101204a756e6374696f6e0000c50101204a756e6374696f6e0007000858382000c50101204a756e6374696f6e0000c50101204a756e6374696f6e0000c50101204a756e6374696f6e0000c50101204a756e6374696f6e0000c50101204a756e6374696f6e0000c50101204a756e6374696f6e0000c50101204a756e6374696f6e0000c50101204a756e6374696f6e00080000c501100c78636d087633206a756e6374696f6e204a756e6374696f6e0001282450617261636861696e0400cc010c7533320000002c4163636f756e744964333208011c6e6574776f726bc90101444f7074696f6e3c4e6574776f726b49643e00010869640401205b75383b2033325d000100384163636f756e74496e646578363408011c6e6574776f726bc90101444f7074696f6e3c4e6574776f726b49643e000114696e6465782c010c753634000200304163636f756e744b6579323008011c6e6574776f726bc90101444f7074696f6e3c4e6574776f726b49643e00010c6b6579d801205b75383b2032305d0003003850616c6c6574496e7374616e6365040008010875380004003047656e6572616c496e6465780400dc0110753132380005002847656e6572616c4b65790801186c656e6774680801087538000110646174610401205b75383b2033325d000600244f6e6c794368696c6400070024506c7572616c6974790801086964e00118426f6479496400011070617274e40120426f6479506172740008003c476c6f62616c436f6e73656e7375730400cd0101244e6574776f726b496400090000c90104184f7074696f6e04045401cd010108104e6f6e6500000010536f6d650400cd010000010000cd01100c78636d087633206a756e6374696f6e244e6574776f726b496400012c24427947656e6573697304000401205b75383b2033325d000000184279466f726b080130626c6f636b5f6e756d62657230010c753634000128626c6f636b5f686173680401205b75383b2033325d00010020506f6c6b61646f74000200184b7573616d610003001c57657374656e6400040018526f636f636f00050018576f636f636f00060020457468657265756d040120636861696e5f69642c010c7536340007002c426974636f696e436f72650008002c426974636f696e4361736800090040506f6c6b61646f7442756c6c6574696e000a0000d101100c78636d087633286d756c746961737365742c46756e676962696c6974790001082046756e6769626c650400dc0110753132380000002c4e6f6e46756e6769626c650400d50101344173736574496e7374616e636500010000d501100c78636d087633286d756c74696173736574344173736574496e7374616e636500011824556e646566696e656400000014496e6465780400dc01107531323800010018417272617934040048011c5b75383b20345d0002001841727261793804002901011c5b75383b20385d0003001c4172726179313604002d0101205b75383b2031365d0004001c4172726179333204000401205b75383b2033325d00050000d901080c78636d4456657273696f6e65644c6f636174696f6e00010c08563204008901014476323a3a4d756c74694c6f636174696f6e0001000856330400bd01014476333a3a4d756c74694c6f636174696f6e0003000856340400bc013076343a3a4c6f636174696f6e00040000dd010c4863756d756c75735f70616c6c65745f78636d1870616c6c6574144576656e7404045400010c34496e76616c6964466f726d617404000401205b75383b2033325d00000880446f776e77617264206d65737361676520697320696e76616c69642058434d2e205c5b206964205c5d48556e737570706f7274656456657273696f6e04000401205b75383b2033325d000108bc446f776e77617264206d65737361676520697320756e737570706f727465642076657273696f6e206f662058434d2e205c5b206964205c5d404578656375746564446f776e7761726408000401205b75383b2033325d0000b4011c4f7574636f6d65000208c4446f776e77617264206d65737361676520657865637574656420776974682074686520676976656e206f7574636f6d652e445c5b2069642c206f7574636f6d65205c5d047c54686520604576656e746020656e756d206f6620746869732070616c6c6574e1010c5070616c6c65745f6d6573736167655f71756575651870616c6c6574144576656e740404540001104050726f63657373696e674661696c65640c010869643401104832353604945468652060626c616b65325f323536602068617368206f6620746865206d6573736167652e01186f726967696ee50101484d6573736167654f726967696e4f663c543e0464546865207175657565206f6620746865206d6573736167652e01146572726f72ed01014c50726f636573734d6573736167654572726f721060546865206572726f722074686174206f636375727265642e00490154686973206572726f7220697320707265747479206f70617175652e204d6f72652066696e652d677261696e6564206572726f7273206e65656420746f20626520656d6974746564206173206576656e74736862792074686520604d65737361676550726f636573736f72602e000455014d657373616765206469736361726465642064756520746f20616e206572726f7220696e2074686520604d65737361676550726f636573736f72602028757375616c6c79206120666f726d6174206572726f72292e2450726f63657373656410010869643401104832353604945468652060626c616b65325f323536602068617368206f6620746865206d6573736167652e01186f726967696ee50101484d6573736167654f726967696e4f663c543e0464546865207175657565206f6620746865206d6573736167652e012c7765696768745f7573656428011857656967687404c0486f77206d7563682077656967687420776173207573656420746f2070726f6365737320746865206d6573736167652e011c73756363657373200110626f6f6c18885768657468657220746865206d657373616765207761732070726f6365737365642e0049014e6f74652074686174207468697320646f6573206e6f74206d65616e20746861742074686520756e6465726c79696e6720604d65737361676550726f636573736f72602077617320696e7465726e616c6c7935017375636365737366756c2e204974202a736f6c656c792a206d65616e73207468617420746865204d512070616c6c65742077696c6c2074726561742074686973206173206120737563636573734d01636f6e646974696f6e20616e64206469736361726420746865206d6573736167652e20416e7920696e7465726e616c206572726f72206e6565647320746f20626520656d6974746564206173206576656e74736862792074686520604d65737361676550726f636573736f72602e0104544d6573736167652069732070726f6365737365642e484f766572776569676874456e71756575656410010869640401205b75383b2033325d04945468652060626c616b65325f323536602068617368206f6620746865206d6573736167652e01186f726967696ee50101484d6573736167654f726967696e4f663c543e0464546865207175657565206f6620746865206d6573736167652e0128706167655f696e64657810012450616765496e64657804605468652070616765206f6620746865206d6573736167652e01346d6573736167655f696e64657810011c543a3a53697a6504a454686520696e646578206f6620746865206d6573736167652077697468696e2074686520706167652e02048c4d65737361676520706c6163656420696e206f7665727765696768742071756575652e28506167655265617065640801186f726967696ee50101484d6573736167654f726967696e4f663c543e0458546865207175657565206f662074686520706167652e0114696e64657810012450616765496e646578045854686520696e646578206f662074686520706167652e03045454686973207061676520776173207265617065642e047c54686520604576656e746020656e756d206f6620746869732070616c6c6574e501085c63756d756c75735f7072696d6974697665735f636f7265584167677265676174654d6573736167654f726967696e00010c104865726500000018506172656e740001001c5369626c696e670400e901011850617261496400020000e9010c74706f6c6b61646f745f70617261636861696e5f7072696d697469766573287072696d6974697665730849640000040010010c7533320000ed0110346672616d655f737570706f727418747261697473206d657373616765734c50726f636573734d6573736167654572726f7200011424426164466f726d61740000001c436f72727570740001002c556e737570706f72746564000200284f7665727765696768740400280118576569676874000300145969656c6400040000f1010c2c6f726d6c5f746f6b656e73186d6f64756c65144576656e740404540001441c456e646f7765640c012c63757272656e63795f6964300134543a3a43757272656e6379496400010c77686f000130543a3a4163636f756e744964000118616d6f756e74180128543a3a42616c616e6365000004b8416e206163636f756e74207761732063726561746564207769746820736f6d6520667265652062616c616e63652e20447573744c6f73740c012c63757272656e63795f6964300134543a3a43757272656e6379496400010c77686f000130543a3a4163636f756e744964000118616d6f756e74180128543a3a42616c616e6365000108ec416e206163636f756e74207761732072656d6f7665642077686f73652062616c616e636520776173206e6f6e2d7a65726f206275742062656c6f77c84578697374656e7469616c4465706f7369742c20726573756c74696e6720696e20616e206f75747269676874206c6f73732e205472616e7366657210012c63757272656e63795f6964300134543a3a43757272656e6379496400011066726f6d000130543a3a4163636f756e744964000108746f000130543a3a4163636f756e744964000118616d6f756e74180128543a3a42616c616e63650002044c5472616e73666572207375636365656465642e2052657365727665640c012c63757272656e63795f6964300134543a3a43757272656e6379496400010c77686f000130543a3a4163636f756e744964000118616d6f756e74180128543a3a42616c616e6365000304e0536f6d652062616c616e63652077617320726573657276656420286d6f7665642066726f6d206672656520746f207265736572766564292e28556e72657365727665640c012c63757272656e63795f6964300134543a3a43757272656e6379496400010c77686f000130543a3a4163636f756e744964000118616d6f756e74180128543a3a42616c616e6365000404e8536f6d652062616c616e63652077617320756e726573657276656420286d6f7665642066726f6d20726573657276656420746f2066726565292e4852657365727665526570617472696174656414012c63757272656e63795f6964300134543a3a43757272656e6379496400011066726f6d000130543a3a4163636f756e744964000108746f000130543a3a4163636f756e744964000118616d6f756e74180128543a3a42616c616e636500011873746174757388013442616c616e6365537461747573000508f4536f6d652072657365727665642062616c616e63652077617320726570617472696174656420286d6f7665642066726f6d20726573657276656420746f44616e6f74686572206163636f756e74292e2842616c616e636553657410012c63757272656e63795f6964300134543a3a43757272656e6379496400010c77686f000130543a3a4163636f756e74496400011066726565180128543a3a42616c616e63650001207265736572766564180128543a3a42616c616e636500060468412062616c616e6365207761732073657420627920726f6f742e40546f74616c49737375616e636553657408012c63757272656e63795f6964300134543a3a43757272656e63794964000118616d6f756e74180128543a3a42616c616e6365000704b854686520746f74616c2069737375616e6365206f6620616e2063757272656e637920686173206265656e207365742457697468647261776e0c012c63757272656e63795f6964300134543a3a43757272656e6379496400010c77686f000130543a3a4163636f756e744964000118616d6f756e74180128543a3a42616c616e6365000804ec536f6d652062616c616e63657320776572652077697468647261776e2028652e672e2070617920666f72207472616e73616374696f6e20666565291c536c617368656410012c63757272656e63795f6964300134543a3a43757272656e6379496400010c77686f000130543a3a4163636f756e74496400012c667265655f616d6f756e74180128543a3a42616c616e636500013c72657365727665645f616d6f756e74180128543a3a42616c616e6365000904d4536f6d652062616c616e636573207765726520736c61736865642028652e672e2064756520746f206d69732d6265686176696f7229244465706f73697465640c012c63757272656e63795f6964300134543a3a43757272656e6379496400010c77686f000130543a3a4163636f756e744964000118616d6f756e74180128543a3a42616c616e6365000a04984465706f736974656420736f6d652062616c616e636520696e746f20616e206163636f756e741c4c6f636b53657410011c6c6f636b5f6964290101384c6f636b4964656e74696669657200012c63757272656e63795f6964300134543a3a43757272656e6379496400010c77686f000130543a3a4163636f756e744964000118616d6f756e74180128543a3a42616c616e6365000b0454536f6d652066756e647320617265206c6f636b65642c4c6f636b52656d6f7665640c011c6c6f636b5f6964290101384c6f636b4964656e74696669657200012c63757272656e63795f6964300134543a3a43757272656e6379496400010c77686f000130543a3a4163636f756e744964000c047c536f6d65206c6f636b65642066756e6473207765726520756e6c6f636b6564184c6f636b65640c012c63757272656e63795f6964300134543a3a43757272656e6379496400010c77686f000130543a3a4163636f756e744964000118616d6f756e74180128543a3a42616c616e6365000d0474536f6d6520667265652062616c616e636520776173206c6f636b65642e20556e6c6f636b65640c012c63757272656e63795f6964300134543a3a43757272656e6379496400010c77686f000130543a3a4163636f756e744964000118616d6f756e74180128543a3a42616c616e6365000e0478536f6d65206c6f636b65642062616c616e6365207761732066726565642e1849737375656408012c63757272656e63795f6964300134543a3a43757272656e63794964000118616d6f756e74180128543a3a42616c616e6365000f002452657363696e64656408012c63757272656e63795f6964300134543a3a43757272656e63794964000118616d6f756e74180128543a3a42616c616e6365001000047c54686520604576656e746020656e756d206f6620746869732070616c6c6574f5010c4c77657465655f6d6573736167655f71756575651870616c6c6574144576656e740404540001104050726f63657373696e674661696c65640c010869643401104832353604945468652060626c616b65325f323536602068617368206f6620746865206d6573736167652e01186f726967696ef90101484d6573736167654f726967696e4f663c543e0464546865207175657565206f6620746865206d6573736167652e01146572726f72ed01014c50726f636573734d6573736167654572726f721060546865206572726f722074686174206f636375727265642e00490154686973206572726f7220697320707265747479206f70617175652e204d6f72652066696e652d677261696e6564206572726f7273206e65656420746f20626520656d6974746564206173206576656e74736862792074686520604d65737361676550726f636573736f72602e000455014d657373616765206469736361726465642064756520746f20616e206572726f7220696e2074686520604d65737361676550726f636573736f72602028757375616c6c79206120666f726d6174206572726f72292e2450726f63657373656410010869643401104832353604945468652060626c616b65325f323536602068617368206f6620746865206d6573736167652e01186f726967696ef90101484d6573736167654f726967696e4f663c543e0464546865207175657565206f6620746865206d6573736167652e012c7765696768745f7573656428011857656967687404c0486f77206d7563682077656967687420776173207573656420746f2070726f6365737320746865206d6573736167652e011c73756363657373200110626f6f6c18885768657468657220746865206d657373616765207761732070726f6365737365642e0049014e6f74652074686174207468697320646f6573206e6f74206d65616e20746861742074686520756e6465726c79696e6720604d65737361676550726f636573736f72602077617320696e7465726e616c6c7935017375636365737366756c2e204974202a736f6c656c792a206d65616e73207468617420746865204d512070616c6c65742077696c6c2074726561742074686973206173206120737563636573734d01636f6e646974696f6e20616e64206469736361726420746865206d6573736167652e20416e7920696e7465726e616c206572726f72206e6565647320746f20626520656d6974746564206173206576656e74736862792074686520604d65737361676550726f636573736f72602e0104544d6573736167652069732070726f6365737365642e484f766572776569676874456e71756575656410010869640401205b75383b2033325d04945468652060626c616b65325f323536602068617368206f6620746865206d6573736167652e01186f726967696ef90101484d6573736167654f726967696e4f663c543e0464546865207175657565206f6620746865206d6573736167652e0128706167655f696e64657810012450616765496e64657804605468652070616765206f6620746865206d6573736167652e01346d6573736167655f696e64657810011c543a3a53697a6504a454686520696e646578206f6620746865206d6573736167652077697468696e2074686520706167652e02048c4d65737361676520706c6163656420696e206f7665727765696768742071756575652e28506167655265617065640801186f726967696ef90101484d6573736167654f726967696e4f663c543e0458546865207175657565206f662074686520706167652e0114696e64657810012450616765496e646578045854686520696e646578206f662074686520706167652e03045454686973207061676520776173207265617065642e047c54686520604576656e746020656e756d206f6620746869732070616c6c6574f9010c5c70617261636861696e5f77657465655f72756e74696d6518776f726b6572344d6573736167654f726967696e00010410576f726b00000000fd010c3870616c6c65745f7574696c6974791870616c6c6574144576656e74000118404261746368496e746572727570746564080114696e64657810010c7533320001146572726f7268013444697370617463684572726f7200000855014261746368206f66206469737061746368657320646964206e6f7420636f6d706c6574652066756c6c792e20496e646578206f66206669727374206661696c696e6720646973706174636820676976656e2c2061734877656c6c20617320746865206572726f722e384261746368436f6d706c65746564000104c84261746368206f66206469737061746368657320636f6d706c657465642066756c6c792077697468206e6f206572726f722e604261746368436f6d706c65746564576974684572726f7273000204b44261746368206f66206469737061746368657320636f6d706c657465642062757420686173206572726f72732e344974656d436f6d706c657465640003041d01412073696e676c65206974656d2077697468696e2061204261746368206f6620646973706174636865732068617320636f6d706c657465642077697468206e6f206572726f722e284974656d4661696c65640401146572726f7268013444697370617463684572726f720004041101412073696e676c65206974656d2077697468696e2061204261746368206f6620646973706174636865732068617320636f6d706c657465642077697468206572726f722e30446973706174636865644173040118726573756c749401384469737061746368526573756c7400050458412063616c6c2077617320646973706174636865642e047c54686520604576656e746020656e756d206f6620746869732070616c6c657401020c2477657465655f6f72671870616c6c6574144576656e74040454000110284372656174656444616f0800000130543a3a4163636f756e744964000030012844616f417373657449640000084044414f20637265617465206576656e745444414fe5889be5bbbae68890e58a9fe4ba8be4bbb61c53756363657373000108346e6f6d616c20737563636573733ce68890e58a9fe79a84e4ba8be4bbb62c5461736b43726561746564100030012844616f41737365744964000010010c753332000030010c7536340000000130543a3a4163636f756e744964000208447461736b20637265617465206576656e7460e4bbbbe58aa1e5889be5bbbae68890e58a9fe4ba8be4bbb62c5461736b55706461746564100030012844616f41737365744964000010010c753332000030010c7536340000000130543a3a4163636f756e744964000308447461736b20757064617465206576656e7460e4bbbbe58aa1e69bb4e696b0e68890e58a9fe4ba8be4bbb6083473756363657373206576656e7430e68890e58a9fe4ba8be4bbb605020c3077657465655f6173736574731870616c6c6574144576656e740404540001242c5472616e73666572726564100030012844616f417373657449640000000130543a3a4163636f756e7449640000000130543a3a4163636f756e744964000018013042616c616e63654f663c543e000004d443757272656e6379207472616e7366657220737563636573732e205b64616f5f69642c2066726f6d2c20746f2c20616d6f756e745d3842616c616e6365557064617465640c0030012844616f417373657449640000000130543a3a4163636f756e74496400000902012c416d6f756e744f663c543e000104b45570646174652062616c616e636520737563636573732e205b64616f5f69642c2077686f2c20616d6f756e745d244465706f73697465640c0030012844616f417373657449640000000130543a3a4163636f756e744964000018013042616c616e63654f663c543e000204984465706f73697420737563636573732e205b64616f5f69642c2077686f2c20616d6f756e745d2457697468647261776e0c0030012844616f417373657449640000000130543a3a4163636f756e744964000018013042616c616e63654f663c543e0003049c576974686472617720737563636573732e205b64616f5f69642c2077686f2c20616d6f756e745d2c43726561746541737365740c00000130543a3a4163636f756e744964000030012844616f41737365744964000018013042616c616e63654f663c543e000404a043726561746520617373657420737563636573732e205b64616f5f69642c206d657461646174615d2c5365744d657461646174610c00000130543a3a4163636f756e744964000030012844616f4173736574496400000d02013044616f41737365744d657461000504ac557064617465206d6574616461746120737563636573732e205b64616f5f69642c206d657461646174615d104275726e0c00000130543a3a4163636f756e744964000030012844616f41737365744964000018013042616c616e63654f663c543e0006048c4275726e20737563636573732e205b64616f5f69642c2077686f2c20616d6f756e745d54536574576569676874526174654d756c7469706c6508011864616f5f696430012844616f417373657449640001206d756c7469706c6518011075313238000704ac53657420776569676874207261746520737563636573732e205b64616f5f69642c206d756c7469706c655d545365744578697374656e69616c446570706f73697408011864616f5f696430012844616f417373657449640001486578697374656e69616c5f6465706f73697418013042616c616e63654f663c543e000804f0536574206578697374656e69616c206465706f73697420737563636573732e205b64616f5f69642c206578697374656e69616c5f6465706f7369745d047c54686520604576656e746020656e756d206f6620746869732070616c6c657409020000050d000d02083077657465655f6173736574733044616f41737365744d65746100000c01106e616d6538011c5665633c75383e00011873796d626f6c38011c5665633c75383e000120646563696d616c730801087538000011020c2877657465655f7375646f1870616c6c6574144576656e7404045400010c205375646f446f6e650801107375646f000130543a3a4163636f756e74496400012c7375646f5f726573756c749401384469737061746368526573756c74000004c0726f6f742065786563757465732065787465726e616c207472616e73616374696f6e207375636365737366756c6c792e1c5365745375646f08011864616f5f696430012844616f417373657449640001307375646f5f6163636f756e74000130543a3a4163636f756e7449640001048053657420726f6f74206163636f756e74206f722072656f70656e207375646f2e24436c6f73655375646f04011864616f5f696430012844616f417373657449640002044c636c6f736520726f6f74206163636f756e742e047c54686520604576656e746020656e756d206f6620746869732070616c6c657415020c2c77657465655f6775696c641870616c6c6574144576656e74040454000108304775696c64437265617465640c0030012844616f41737365744964000030010c7536340000000130543a3a4163636f756e7449640000002c4775696c644a6f696e65640c0030012844616f41737365744964000030010c7536340000000130543a3a4163636f756e744964000100047c54686520604576656e746020656e756d206f6620746869732070616c6c657419020c3477657465655f70726f6a6563741870616c6c6574144576656e740404540001183450726f6a6563744a6f696e65640c0030012844616f41737365744964000030012450726f6a65637449640000000130543a3a4163636f756e7449640000003850726f6a656374437265617465640c0030012844616f41737365744964000030012450726f6a65637449640000000130543a3a4163636f756e7449640001002c5461736b43726561746564100030012844616f41737365744964000030012450726f6a6563744964000030010c7536340000000130543a3a4163636f756e744964000200385461736b496e50726f6772657373100030012844616f41737365744964000030012450726f6a6563744964000030010c7536340000000130543a3a4163636f756e744964000300305461736b496e526576696577100030012844616f41737365744964000030012450726f6a6563744964000030010c7536340000000130543a3a4163636f756e7449640004003c50726f787943616c6c526573756c740c011863616c6c6572000130543a3a4163636f756e74496400013c70726f6a6563745f6163636f756e74000130543a3a4163636f756e74496400012c63616c6c5f726573756c749401384469737061746368526573756c74000500047c54686520604576656e746020656e756d206f6620746869732070616c6c65741d020c2477657465655f676f761870616c6c6574144576656e740404540001302050726f706f736564080030012844616f41737365744964000034011c543a3a4861736800000450696e69746961746520612070726f706f73616c2e205265637265617465080030012844616f41737365744964000018013042616c616e63654f663c543e000104904f746865727320737570706f727420696e6974696174696e672070726f706f73616c732e2853746172745461626c65080030012844616f41737365744964000010012450726f70496e646578000204304f70656e20612070726f702e10566f74650c0030012844616f41737365744964000010012450726f70496e646578000021020124543a3a506c6564676500030448566f746520666f72207468652070726f702e2843616e63656c566f7465080030012844616f41737365744964000010012450726f70496e6465780004046043616e63656c206120766f7465206f6e20612070726f702e34456e61637450726f706f73616c0c011864616f5f696430012844616f41737365744964000114696e64657810012450726f70496e646578000118726573756c7494011c44526573756c74000504f8566f746520616e64206578656375746520746865207472616e73616374696f6e20636f72726573706f6e64696e6720746f207468652070726f706f73612e18556e6c6f636b0c00000130543a3a4163636f756e744964000030012844616f41737365744964000021020124543a3a506c6564676500060418556e6c6f636b28556e72657365727665640800000130543a3a4163636f756e744964000018013042616c616e63654f663c543e00070418556e6c6f636b405365744d696e566f74655765696768740c0030012844616f417373657449640000100124543a3a43616c6c4964000018013042616c616e63654f663c543e00080464536574204f726967696e20666f7220656163682043616c6c2e385365744d617850726550726f707308011864616f5f696430012844616f4173736574496400010c6d617810010c753332000904d453657420746865206d6178696d756d206e756d626572206f662070726f706f73616c73206174207468652073616d652074696d652e3c566f74654d6f64656c55706461746508011864616f5f696430012844616f417373657449640001146d6f64656c0801087538000a0030506572696f6455706461746504011864616f5f696430012844616f41737365744964000b00047c54686520604576656e746020656e756d206f6620746869732070616c6c657421020c5c70617261636861696e5f77657465655f72756e74696d6510766f746518506c65646765041c42616c616e6365011801042446756e67546f6b656e040018011c42616c616e63650000000025020c3877657465655f74726561737572791870616c6c6574144576656e74040454000108345370656e64417070726f7665640c011864616f5f696430012844616f41737365744964000118616d6f756e7418013042616c616e63654f663c543e00012c62656e6566696369617279000130543a3a4163636f756e7449640000049c41206e6577207370656e642070726f706f73616c20686173206265656e20617070726f7665642e345370656e6452656a65637465640c011864616f5f696430012844616f41737365744964000118616d6f756e7418013042616c616e63654f663c543e00012c62656e6566696369617279000130543a3a4163636f756e74496400010460412070726f706f73616c207761732072656a65637465643b047c54686520604576656e746020656e756d206f6620746869732070616c6c657429020c2477657465655f6170701870616c6c6574144576656e74040454000118284372656174656441707008011c63726561746f72000130543a3a4163636f756e744964000108696430010c7536340000083041707020637265617465642e24417070e5889be5bbba2441707052756e696e6708011c63726561746f72000130543a3a4163636f756e744964000108696430010c7536340001082c4170702072756e696e672e24417070e8bf90e8a18c184368617267650c011066726f6d000130543a3a4163636f756e744964000108746f000130543a3a4163636f756e744964000118616d6f756e7418013042616c616e63654f663c543e0002082c417070206368617267652e24417070e58585e580bc2450617952756e4665650c011066726f6d000130543a3a4163636f756e744964000108746f000130543a3a4163636f756e744964000118616d6f756e7418013042616c616e63654f663c543e00030840417070207061792072756e206665652e48417070e694afe4bb98e8bf90e8a18ce8b4b92c576f726b5570646174656408011075736572000130543a3a4163636f756e74496400011c776f726b5f69642d020118576f726b496400040474412061707020686173206265656e207570646174652e205b757365725d2c576f726b53746f7070656408011075736572000130543a3a4163636f756e74496400011c776f726b5f69642d020118576f726b49640005048841206e65772061707020686173206265656e2073746f707065642e205b757365725d047c54686520604576656e746020656e756d206f6620746869732070616c6c65742d020c4077657465655f7072696d69746976657314747970657318576f726b49640000080114777479706531020120576f726b5479706500010869643001205465654170704964000031020c4077657465655f7072696d69746976657314747970657320576f726b5479706500010c0c415050000000105441534b0001000c4750550002000035020c2877657465655f7461736b1870616c6c6574144576656e740404540001182c437265617465645461736b08011c63726561746f72000130543a3a4163636f756e744964000108696430010c753634000004345461736b20637265617465642e285461736b52756e696e6708011c63726561746f72000130543a3a4163636f756e744964000108696430010c753634000104305461736b2072756e696e672e205461736b53746f7008011c63726561746f72000130543a3a4163636f756e744964000108696430010c753634000204285461736b2073746f702e184368617267650c011066726f6d000130543a3a4163636f756e744964000108746f000130543a3a4163636f756e744964000118616d6f756e7418013042616c616e63654f663c543e000304305461736b206368617267652e2450617952756e4665650c011066726f6d000130543a3a4163636f756e744964000108746f000130543a3a4163636f756e744964000118616d6f756e7418013042616c616e63654f663c543e000404445461736b207061792072756e206665652e2c576f726b5570646174656408011075736572000130543a3a4163636f756e74496400011c776f726b5f69642d020118576f726b4964000500047c54686520604576656e746020656e756d206f6620746869732070616c6c657439020c2477657465655f6770751870616c6c6574144576656e74040454000118284372656174656441707008011c63726561746f72000130543a3a4163636f756e744964000108696430010c7536340000083041707020637265617465642e24417070e5889be5bbba2441707052756e696e6708011c63726561746f72000130543a3a4163636f756e744964000108696430010c7536340001082c4170702072756e696e672e24417070e8bf90e8a18c184368617267650c011066726f6d000130543a3a4163636f756e744964000108746f000130543a3a4163636f756e744964000118616d6f756e7418013042616c616e63654f663c543e0002082c417070206368617267652e24417070e58585e580bc2450617952756e4665650c011066726f6d000130543a3a4163636f756e744964000108746f000130543a3a4163636f756e744964000118616d6f756e7418013042616c616e63654f663c543e00030840417070207061792072756e206665652e48417070e694afe4bb98e8bf90e8a18ce8b4b92c576f726b5570646174656408011075736572000130543a3a4163636f756e74496400011c776f726b5f69642d020118576f726b496400040474412061707020686173206265656e207570646174652e205b757365725d2c576f726b53746f7070656408011075736572000130543a3a4163636f756e74496400011c776f726b5f69642d020118576f726b49640005048841206e65772061707020686173206265656e2073746f707065642e205b757365725d047c54686520604576656e746020656e756d206f6620746869732070616c6c65743d020c3077657465655f776f726b65721870616c6c6574144576656e7404045400011438436c75737465724372656174656404011c63726561746f72000130543a3a4163636f756e744964000004a441206e657720636c757374657220686173206265656e20637265617465642e205b63726561746f725d28576f726b52756e696e670c011075736572000130543a3a4163636f756e74496400011c776f726b5f69642d020118576f726b4964000128636c75737465725f6964300124436c757374657249640001048041206e65772061707020686173206265656e2072756e65642e205b757365725d4c576f726b436f6e7472616374557064617465640c011075736572000130543a3a4163636f756e74496400011c776f726b5f69642d020118576f726b4964000128636c75737465725f6964300124436c7573746572496400020498576f726b20636f6e747261637420686173206265656e20757064617465642e205b757365725d60576f726b436f6e74726163745769746864726177616c656404011c776f726b5f69642d020118576f726b4964000304a0576f726b20636f6e747261637420686173206265656e2077697468647261776e2e205b757365725d28576f726b53746f7065640c011075736572000130543a3a4163636f756e74496400011c776f726b5f69642d020118576f726b4964000128636c75737465725f6964300124436c757374657249640004042c576f726b2073746f706564047c54686520604576656e746020656e756d206f6620746869732070616c6c657441020c4070616c6c65745f636f6e7472616374731870616c6c6574144576656e7404045400012830496e7374616e7469617465640801206465706c6f796572000130543a3a4163636f756e744964000120636f6e7472616374000130543a3a4163636f756e744964000004d8436f6e7472616374206465706c6f7965642062792061646472657373206174207468652073706563696669656420616464726573732e285465726d696e61746564080120636f6e7472616374000130543a3a4163636f756e744964048454686520636f6e7472616374207468617420776173207465726d696e617465642e012c62656e6566696369617279000130543a3a4163636f756e74496404e4546865206163636f756e7420746861742072656365697665642074686520636f6e7472616374732072656d61696e696e672062616c616e6365011868436f6e747261637420686173206265656e2072656d6f7665642e001823204e6f7465003d01546865206f6e6c792077617920666f72206120636f6e747261637420746f2062652072656d6f76656420616e6420656d697474696e672074686973206576656e742069732062792063616c6c696e6744607365616c5f7465726d696e617465602e28436f646553746f7265640c0124636f64655f6861736834011c543a3a486173680001306465706f7369745f68656c6418013042616c616e63654f663c543e00012075706c6f61646572000130543a3a4163636f756e744964000204b4436f646520776974682074686520737065636966696564206861736820686173206265656e2073746f7265642e3c436f6e7472616374456d6974746564080120636f6e7472616374000130543a3a4163636f756e744964049054686520636f6e7472616374207468617420656d697474656420746865206576656e742e01106461746138011c5665633c75383e0835014461746120737570706c6965642062792074686520636f6e74726163742e204d657461646174612067656e65726174656420647572696e6720636f6e747261637420636f6d70696c6174696f6e5c6973206e656564656420746f206465636f64652069742e03049c4120637573746f6d206576656e7420656d69747465642062792074686520636f6e74726163742e2c436f646552656d6f7665640c0124636f64655f6861736834011c543a3a486173680001406465706f7369745f72656c656173656418013042616c616e63654f663c543e00011c72656d6f766572000130543a3a4163636f756e744964000404ac4120636f6465207769746820746865207370656369666965642068617368207761732072656d6f7665642e4c436f6e7472616374436f6465557064617465640c0120636f6e7472616374000130543a3a4163636f756e744964048c54686520636f6e7472616374207468617420686173206265656e20757064617465642e01346e65775f636f64655f6861736834011c543a3a4861736804b04e657720636f646520686173682074686174207761732073657420666f722074686520636f6e74726163742e01346f6c645f636f64655f6861736834011c543a3a48617368048c50726576696f757320636f64652068617368206f662074686520636f6e74726163742e0504784120636f6e7472616374277320636f64652077617320757064617465642e1843616c6c656408011863616c6c6572450201244f726967696e3c543e04745468652063616c6c6572206f66207468652060636f6e7472616374602e0120636f6e7472616374000130543a3a4163636f756e744964047454686520636f6e74726163742074686174207761732063616c6c65642e061c11014120636f6e7472616374207761732063616c6c656420656974686572206279206120706c61696e206163636f756e74206f7220616e6f7468657220636f6e74726163742e001823204e6f7465003101506c65617365206b65657020696e206d696e642074686174206c696b6520616c6c206576656e74732074686973206973206f6e6c7920656d697474656420666f72207375636365737366756c290163616c6c732e20546869732069732062656361757365206f6e206661696c75726520616c6c2073746f72616765206368616e67657320696e636c7564696e67206576656e74732061726530726f6c6c6564206261636b2e3844656c656761746543616c6c6564080120636f6e7472616374000130543a3a4163636f756e74496408210154686520636f6e7472616374207468617420706572666f726d6564207468652064656c65676174652063616c6c20616e642068656e636520696e2077686f736520636f6e74657874707468652060636f64655f68617368602069732065786563757465642e0124636f64655f6861736834012c436f6465486173683c543e049c54686520636f646520686173682074686174207761732064656c65676174652063616c6c65642e071c9c4120636f6e74726163742064656c65676174652063616c6c6564206120636f646520686173682e001823204e6f7465003101506c65617365206b65657020696e206d696e642074686174206c696b6520616c6c206576656e74732074686973206973206f6e6c7920656d697474656420666f72207375636365737366756c290163616c6c732e20546869732069732062656361757365206f6e206661696c75726520616c6c2073746f72616765206368616e67657320696e636c7564696e67206576656e74732061726530726f6c6c6564206261636b2e8053746f726167654465706f7369745472616e73666572726564416e6448656c640c011066726f6d000130543a3a4163636f756e744964000108746f000130543a3a4163636f756e744964000118616d6f756e7418013042616c616e63654f663c543e000804f4536f6d652066756e64732068617665206265656e207472616e7366657272656420616e642068656c642061732073746f72616765206465706f7369742e9053746f726167654465706f7369745472616e73666572726564416e6452656c65617365640c011066726f6d000130543a3a4163636f756e744964000108746f000130543a3a4163636f756e744964000118616d6f756e7418013042616c616e63654f663c543e000904f8536f6d652073746f72616765206465706f7369742066756e64732068617665206265656e207472616e7366657272656420616e642072656c65617365642e047c54686520604576656e746020656e756d206f6620746869732070616c6c65744502084070616c6c65745f636f6e747261637473184f726967696e040454014902010810526f6f74000000185369676e65640400000130543a3a4163636f756e744964000100004902085c70617261636861696e5f77657465655f72756e74696d651c52756e74696d65000000004d0208306672616d655f73797374656d14506861736500010c384170706c7945787472696e736963040010010c7533320000003046696e616c697a6174696f6e00010038496e697469616c697a6174696f6e000200005102000002340055020000025902005902000004081010005d0208306672616d655f73797374656d584c61737452756e74696d6555706772616465496e666f0000080130737065635f76657273696f6ecc014c636f6465633a3a436f6d706163743c7533323e000124737065635f6e616d656102016473705f72756e74696d653a3a52756e74696d65537472696e67000061020000050200650208306672616d655f73797374656d60436f646555706772616465417574686f72697a6174696f6e0404540000080124636f64655f6861736834011c543a3a48617368000134636865636b5f76657273696f6e200110626f6f6c000069020c306672616d655f73797374656d1870616c6c65741043616c6c04045400012c1872656d61726b04011872656d61726b38011c5665633c75383e00000c684d616b6520736f6d65206f6e2d636861696e2072656d61726b2e008843616e20626520657865637574656420627920657665727920606f726967696e602e387365745f686561705f7061676573040114706167657330010c753634000104f853657420746865206e756d626572206f6620706167657320696e2074686520576562417373656d626c7920656e7669726f6e6d656e74277320686561702e207365745f636f6465040110636f646538011c5665633c75383e0002046453657420746865206e65772072756e74696d6520636f64652e5c7365745f636f64655f776974686f75745f636865636b73040110636f646538011c5665633c75383e000310190153657420746865206e65772072756e74696d6520636f646520776974686f757420646f696e6720616e7920636865636b73206f662074686520676976656e2060636f6465602e0051014e6f746520746861742072756e74696d652075706772616465732077696c6c206e6f742072756e20696620746869732069732063616c6c656420776974682061206e6f742d696e6372656173696e6720737065632076657273696f6e212c7365745f73746f726167650401146974656d736d0201345665633c4b657956616c75653e0004046853657420736f6d65206974656d73206f662073746f726167652e306b696c6c5f73746f726167650401106b657973750201205665633c4b65793e000504744b696c6c20736f6d65206974656d732066726f6d2073746f726167652e2c6b696c6c5f70726566697808011870726566697838010c4b657900011c7375626b65797310010c75333200061011014b696c6c20616c6c2073746f72616765206974656d7320776974682061206b657920746861742073746172747320776974682074686520676976656e207072656669782e0039012a2a4e4f54453a2a2a2057652072656c79206f6e2074686520526f6f74206f726967696e20746f2070726f7669646520757320746865206e756d626572206f66207375626b65797320756e6465723d0174686520707265666978207765206172652072656d6f76696e6720746f2061636375726174656c792063616c63756c6174652074686520776569676874206f6620746869732066756e6374696f6e2e4472656d61726b5f776974685f6576656e7404011872656d61726b38011c5665633c75383e000704a44d616b6520736f6d65206f6e2d636861696e2072656d61726b20616e6420656d6974206576656e742e44617574686f72697a655f75706772616465040124636f64655f6861736834011c543a3a486173680009106101417574686f72697a6520616e207570677261646520746f206120676976656e2060636f64655f686173686020666f72207468652072756e74696d652e205468652072756e74696d652063616e20626520737570706c696564186c617465722e007c546869732063616c6c20726571756972657320526f6f74206f726967696e2e80617574686f72697a655f757067726164655f776974686f75745f636865636b73040124636f64655f6861736834011c543a3a48617368000a206101417574686f72697a6520616e207570677261646520746f206120676976656e2060636f64655f686173686020666f72207468652072756e74696d652e205468652072756e74696d652063616e20626520737570706c696564186c617465722e005d015741524e494e473a205468697320617574686f72697a657320616e207570677261646520746861742077696c6c2074616b6520706c61636520776974686f757420616e792073616665747920636865636b732c20666f7259016578616d706c652074686174207468652073706563206e616d652072656d61696e73207468652073616d6520616e642074686174207468652076657273696f6e206e756d62657220696e637265617365732e204e6f74f07265636f6d6d656e64656420666f72206e6f726d616c207573652e205573652060617574686f72697a655f757067726164656020696e73746561642e007c546869732063616c6c20726571756972657320526f6f74206f726967696e2e606170706c795f617574686f72697a65645f75706772616465040110636f646538011c5665633c75383e000b24550150726f766964652074686520707265696d616765202872756e74696d652062696e617279292060636f64656020666f7220616e2075706772616465207468617420686173206265656e20617574686f72697a65642e00490149662074686520617574686f72697a6174696f6e20726571756972656420612076657273696f6e20636865636b2c20746869732063616c6c2077696c6c20656e73757265207468652073706563206e616d65e872656d61696e7320756e6368616e67656420616e6420746861742074686520737065632076657273696f6e2068617320696e637265617365642e005901446570656e64696e67206f6e207468652072756e74696d65277320604f6e536574436f64656020636f6e66696775726174696f6e2c20746869732066756e6374696f6e206d6179206469726563746c79206170706c791101746865206e65772060636f64656020696e207468652073616d6520626c6f636b206f7220617474656d707420746f207363686564756c652074686520757067726164652e0060416c6c206f726967696e732061726520616c6c6f7765642e040d01436f6e7461696e7320612076617269616e742070657220646973706174636861626c652065787472696e736963207468617420746869732070616c6c6574206861732e6d020000027102007102000004083838007502000002380079020c306672616d655f73797374656d186c696d69747330426c6f636b5765696768747300000c0128626173655f626c6f636b2801185765696768740001246d61785f626c6f636b2801185765696768740001247065725f636c6173737d0201845065724469737061746368436c6173733c57656967687473506572436c6173733e00007d020c346672616d655f737570706f7274206469737061746368405065724469737061746368436c617373040454018102000c01186e6f726d616c810201045400012c6f7065726174696f6e616c81020104540001246d616e6461746f72798102010454000081020c306672616d655f73797374656d186c696d6974733c57656967687473506572436c6173730000100138626173655f65787472696e7369632801185765696768740001346d61785f65787472696e736963850201384f7074696f6e3c5765696768743e0001246d61785f746f74616c850201384f7074696f6e3c5765696768743e0001207265736572766564850201384f7074696f6e3c5765696768743e0000850204184f7074696f6e04045401280108104e6f6e6500000010536f6d65040028000001000089020c306672616d655f73797374656d186c696d6974732c426c6f636b4c656e677468000004010c6d61788d0201545065724469737061746368436c6173733c7533323e00008d020c346672616d655f737570706f7274206469737061746368405065724469737061746368436c6173730404540110000c01186e6f726d616c1001045400012c6f7065726174696f6e616c100104540001246d616e6461746f72791001045400009102082873705f776569676874733c52756e74696d65446257656967687400000801107265616430010c753634000114777269746530010c75363400009502082873705f76657273696f6e3852756e74696d6556657273696f6e0000200124737065635f6e616d656102013452756e74696d65537472696e67000124696d706c5f6e616d656102013452756e74696d65537472696e67000144617574686f72696e675f76657273696f6e10010c753332000130737065635f76657273696f6e10010c753332000130696d706c5f76657273696f6e10010c753332000110617069739902011c4170697356656300014c7472616e73616374696f6e5f76657273696f6e10010c75333200013473746174655f76657273696f6e080108753800009902040c436f77040454019d020004009d020000009d02000002a10200a1020000040829011000a5020000050400a9020c306672616d655f73797374656d1870616c6c6574144572726f720404540001243c496e76616c6964537065634e616d650000081101546865206e616d65206f662073706563696669636174696f6e20646f6573206e6f74206d61746368206265747765656e207468652063757272656e742072756e74696d6550616e6420746865206e65772072756e74696d652e685370656356657273696f6e4e65656473546f496e63726561736500010841015468652073706563696669636174696f6e2076657273696f6e206973206e6f7420616c6c6f77656420746f206465637265617365206265747765656e207468652063757272656e742072756e74696d6550616e6420746865206e65772072756e74696d652e744661696c6564546f4578747261637452756e74696d6556657273696f6e00020cec4661696c656420746f2065787472616374207468652072756e74696d652076657273696f6e2066726f6d20746865206e65772072756e74696d652e0009014569746865722063616c6c696e672060436f72655f76657273696f6e60206f72206465636f64696e67206052756e74696d6556657273696f6e60206661696c65642e4c4e6f6e44656661756c74436f6d706f73697465000304fc537569636964652063616c6c6564207768656e20746865206163636f756e7420686173206e6f6e2d64656661756c7420636f6d706f7369746520646174612e3c4e6f6e5a65726f526566436f756e74000404350154686572652069732061206e6f6e2d7a65726f207265666572656e636520636f756e742070726576656e74696e6720746865206163636f756e742066726f6d206265696e67207075726765642e3043616c6c46696c7465726564000504d0546865206f726967696e2066696c7465722070726576656e74207468652063616c6c20746f20626520646973706174636865642e6c4d756c7469426c6f636b4d6967726174696f6e734f6e676f696e67000604550141206d756c74692d626c6f636b206d6967726174696f6e206973206f6e676f696e6720616e642070726576656e7473207468652063757272656e7420636f64652066726f6d206265696e67207265706c616365642e444e6f7468696e67417574686f72697a6564000704584e6f207570677261646520617574686f72697a65642e30556e617574686f72697a656400080494546865207375626d697474656420636f6465206973206e6f7420617574686f72697a65642e046c4572726f7220666f72207468652053797374656d2070616c6c6574ad02000002b10200b1020c7c63756d756c75735f70616c6c65745f70617261636861696e5f73797374656d48756e696e636c756465645f7365676d656e7420416e636573746f720404480134000c0138757365645f62616e647769647468b50201345573656442616e647769647468000138706172615f686561645f68617368c90201244f7074696f6e3c483e000160636f6e73756d65645f676f5f61686561645f7369676e616ccd02018c4f7074696f6e3c72656c61795f636861696e3a3a55706772616465476f41686561643e0000b5020c7c63756d756c75735f70616c6c65745f70617261636861696e5f73797374656d48756e696e636c756465645f7365676d656e74345573656442616e64776964746800000c0134756d705f6d73675f636f756e7410010c75333200013c756d705f746f74616c5f627974657310010c75333200013468726d705f6f7574676f696e67b902018c42547265654d61703c5061726149642c2048726d704368616e6e656c5570646174653e0000b902042042547265654d617008044b01e901045601bd02000400c102000000bd020c7c63756d756c75735f70616c6c65745f70617261636861696e5f73797374656d48756e696e636c756465645f7365676d656e744448726d704368616e6e656c55706461746500000801246d73675f636f756e7410010c75333200012c746f74616c5f627974657310010c7533320000c102000002c50200c50200000408e901bd0200c90204184f7074696f6e04045401340108104e6f6e6500000010536f6d650400340000010000cd0204184f7074696f6e04045401d1020108104e6f6e6500000010536f6d650400d1020000010000d1020c4c706f6c6b61646f745f7072696d6974697665730876373855706772616465476f41686561640001081441626f72740000001c476f416865616400010000d5020c7c63756d756c75735f70616c6c65745f70617261636861696e5f73797374656d48756e696e636c756465645f7365676d656e74385365676d656e74547261636b65720404480134000c0138757365645f62616e647769647468b50201345573656442616e64776964746800013868726d705f77617465726d61726bd90201804f7074696f6e3c72656c61795f636861696e3a3a426c6f636b4e756d6265723e000160636f6e73756d65645f676f5f61686561645f7369676e616ccd02018c4f7074696f6e3c72656c61795f636861696e3a3a55706772616465476f41686561643e0000d90204184f7074696f6e04045401100108104e6f6e6500000010536f6d650400100000010000dd020c4c706f6c6b61646f745f7072696d6974697665730876375c50657273697374656456616c69646174696f6e446174610804480134044e01100010012c706172656e745f68656164e1020120486561644461746100014c72656c61795f706172656e745f6e756d6265721001044e00016472656c61795f706172656e745f73746f726167655f726f6f74340104480001306d61785f706f765f73697a6510010c7533320000e1020c74706f6c6b61646f745f70617261636861696e5f7072696d697469766573287072696d6974697665732048656164446174610000040038011c5665633c75383e0000e50204184f7074696f6e04045401e9020108104e6f6e6500000010536f6d650400e9020000010000e9020c4c706f6c6b61646f745f7072696d69746976657308763748557067726164655265737472696374696f6e0001041c50726573656e7400000000ed020c1c73705f747269653473746f726167655f70726f6f663053746f7261676550726f6f660000040128747269655f6e6f646573f102014442547265655365743c5665633c75383e3e0000f1020420425472656553657404045401380004007502000000f5020c7c63756d756c75735f70616c6c65745f70617261636861696e5f73797374656d5072656c61795f73746174655f736e617073686f74584d6573736167696e675374617465536e617073686f740000100130646d715f6d71635f6865616434014472656c61795f636861696e3a3a4861736800019c72656c61795f64697370617463685f71756575655f72656d61696e696e675f6361706163697479f902018c52656c61794469737061746368517565756552656d61696e696e674361706163697479000140696e67726573735f6368616e6e656c73fd0201885665633c285061726149642c20416272696467656448726d704368616e6e656c293e00013c6567726573735f6368616e6e656c73fd0201885665633c285061726149642c20416272696467656448726d704368616e6e656c293e0000f9020c7c63756d756c75735f70616c6c65745f70617261636861696e5f73797374656d5072656c61795f73746174655f736e617073686f748c52656c61794469737061746368517565756552656d61696e696e674361706163697479000008013c72656d61696e696e675f636f756e7410010c75333200013872656d61696e696e675f73697a6510010c7533320000fd02000002010300010300000408e90105030005030c4c706f6c6b61646f745f7072696d6974697665730876374c416272696467656448726d704368616e6e656c00001801306d61785f636170616369747910010c7533320001386d61785f746f74616c5f73697a6510010c7533320001406d61785f6d6573736167655f73697a6510010c7533320001246d73675f636f756e7410010c753332000128746f74616c5f73697a6510010c7533320001206d71635f68656164c90201304f7074696f6e3c486173683e000009030c4c706f6c6b61646f745f7072696d697469766573087637644162726964676564486f7374436f6e66696775726174696f6e00002801346d61785f636f64655f73697a6510010c7533320001486d61785f686561645f646174615f73697a6510010c7533320001586d61785f7570776172645f71756575655f636f756e7410010c7533320001546d61785f7570776172645f71756575655f73697a6510010c75333200015c6d61785f7570776172645f6d6573736167655f73697a6510010c7533320001906d61785f7570776172645f6d6573736167655f6e756d5f7065725f63616e64696461746510010c75333200018868726d705f6d61785f6d6573736167655f6e756d5f7065725f63616e64696461746510010c75333200016c76616c69646174696f6e5f757067726164655f636f6f6c646f776e10012c426c6f636b4e756d62657200016076616c69646174696f6e5f757067726164655f64656c617910012c426c6f636b4e756d6265720001506173796e635f6261636b696e675f706172616d730d0301484173796e634261636b696e67506172616d7300000d03104c706f6c6b61646f745f7072696d697469766573087637346173796e635f6261636b696e67484173796e634261636b696e67506172616d73000008014c6d61785f63616e6469646174655f646570746810010c753332000150616c6c6f7765645f616e6365737472795f6c656e10010c75333200001103089463756d756c75735f7072696d6974697665735f70617261636861696e5f696e686572656e74444d6573736167655175657565436861696e0000040034012452656c61794861736800001503042042547265654d617008044b01e9010456011103000400190300000019030000021d03001d0300000408e901110300210300000225030025030860706f6c6b61646f745f636f72655f7072696d6974697665734c4f7574626f756e6448726d704d6573736167650408496401e90100080124726563697069656e74e901010849640001106461746138015073705f7374643a3a7665633a3a5665633c75383e000029030c3473705f61726974686d657469632c66697865645f706f696e7424466978656455313238000004001801107531323800002d030c7c63756d756c75735f70616c6c65745f70617261636861696e5f73797374656d1870616c6c65741043616c6c0404540001104c7365745f76616c69646174696f6e5f64617461040110646174613103015450617261636861696e496e686572656e744461746100002480536574207468652063757272656e742076616c69646174696f6e20646174612e004101546869732073686f756c6420626520696e766f6b65642065786163746c79206f6e63652070657220626c6f636b2e2049742077696c6c2070616e6963206174207468652066696e616c697a6174696f6e887068617365206966207468652063616c6c20776173206e6f7420696e766f6b65642e00d0546865206469737061746368206f726967696e20666f7220746869732063616c6c206d7573742062652060496e686572656e7460002101417320612073696465206566666563742c20746869732066756e6374696f6e207570677261646573207468652063757272656e742076616c69646174696f6e2066756e6374696f6e8469662074686520617070726f7072696174652074696d652068617320636f6d652e607375646f5f73656e645f7570776172645f6d65737361676504011c6d6573736167653801345570776172644d65737361676500010044617574686f72697a655f75706772616465080124636f64655f6861736834011c543a3a48617368000134636865636b5f76657273696f6e200110626f6f6c0002206101417574686f72697a6520616e207570677261646520746f206120676976656e2060636f64655f686173686020666f72207468652072756e74696d652e205468652072756e74696d652063616e20626520737570706c696564186c617465722e005d015468652060636865636b5f76657273696f6e6020706172616d657465722073657473206120626f6f6c65616e20666c616720666f722077686574686572206f72206e6f74207468652072756e74696d6527732073706563610176657273696f6e20616e64206e616d652073686f756c64206265207665726966696564206f6e20757067726164652e2053696e63652074686520617574686f72697a6174696f6e206f6e6c7920686173206120686173682cb069742063616e6e6f742061637475616c6c7920706572666f726d2074686520766572696669636174696f6e2e007c546869732063616c6c20726571756972657320526f6f74206f726967696e2e60656e6163745f617574686f72697a65645f75706772616465040110636f646538011c5665633c75383e000324550150726f766964652074686520707265696d616765202872756e74696d652062696e617279292060636f64656020666f7220616e2075706772616465207468617420686173206265656e20617574686f72697a65642e00490149662074686520617574686f72697a6174696f6e20726571756972656420612076657273696f6e20636865636b2c20746869732063616c6c2077696c6c20656e73757265207468652073706563206e616d65e872656d61696e7320756e6368616e67656420616e6420746861742074686520737065632076657273696f6e2068617320696e637265617365642e005d014e6f7465207468617420746869732066756e6374696f6e2077696c6c206e6f74206170706c7920746865206e65772060636f6465602c20627574206f6e6c7920617474656d707420746f207363686564756c652074686574757067726164652077697468207468652052656c617920436861696e2e0060416c6c206f726967696e732061726520616c6c6f7765642e040d01436f6e7461696e7320612076617269616e742070657220646973706174636861626c652065787472696e736963207468617420746869732070616c6c6574206861732e3103089463756d756c75735f7072696d6974697665735f70617261636861696e5f696e686572656e745450617261636861696e496e686572656e7444617461000010013c76616c69646174696f6e5f64617461dd02015c50657273697374656456616c69646174696f6e4461746100014472656c61795f636861696e5f7374617465ed02015473705f747269653a3a53746f7261676550726f6f66000144646f776e776172645f6d657373616765733503016c5665633c496e626f756e64446f776e776172644d6573736167653e00014c686f72697a6f6e74616c5f6d657373616765733d0301a442547265654d61703c5061726149642c205665633c496e626f756e6448726d704d6573736167653e3e0000350300000239030039030860706f6c6b61646f745f636f72655f7072696d69746976657358496e626f756e64446f776e776172644d657373616765042c426c6f636b4e756d62657201100008011c73656e745f617410012c426c6f636b4e756d62657200010c6d736738013c446f776e776172644d65737361676500003d03042042547265654d617008044b01e90104560141030004004903000000410300000245030045030860706f6c6b61646f745f636f72655f7072696d69746976657348496e626f756e6448726d704d657373616765042c426c6f636b4e756d62657201100008011c73656e745f617410012c426c6f636b4e756d6265720001106461746138015073705f7374643a3a7665633a3a5665633c75383e000049030000024d03004d0300000408e90141030051030c7c63756d756c75735f70616c6c65745f70617261636861696e5f73797374656d1870616c6c6574144572726f720404540001204c4f7665726c617070696e6755706772616465730000041901417474656d707420746f20757067726164652076616c69646174696f6e2066756e6374696f6e207768696c65206578697374696e6720757067726164652070656e64696e672e5050726f686962697465644279506f6c6b61646f740001044d01506f6c6b61646f742063757272656e746c792070726f68696269747320746869732070617261636861696e2066726f6d20757067726164696e67206974732076616c69646174696f6e2066756e6374696f6e2e18546f6f426967000208450154686520737570706c6965642076616c69646174696f6e2066756e6374696f6e2068617320636f6d70696c656420696e746f206120626c6f62206c6172676572207468616e20506f6c6b61646f742069733c77696c6c696e6720746f2072756e2e6856616c69646174696f6e446174614e6f74417661696c61626c650003041d0154686520696e686572656e7420776869636820737570706c696573207468652076616c69646174696f6e206461746120646964206e6f742072756e207468697320626c6f636b2e74486f7374436f6e66696775726174696f6e4e6f74417661696c61626c65000404290154686520696e686572656e7420776869636820737570706c6965732074686520686f737420636f6e66696775726174696f6e20646964206e6f742072756e207468697320626c6f636b2e304e6f745363686564756c6564000504d84e6f2076616c69646174696f6e2066756e6374696f6e20757067726164652069732063757272656e746c79207363686564756c65642e444e6f7468696e67417574686f72697a6564000604904e6f20636f6465207570677261646520686173206265656e20617574686f72697a65642e30556e617574686f72697a6564000704bc54686520676976656e20636f6465207570677261646520686173206e6f74206265656e20617574686f72697a65642e048054686520604572726f726020656e756d206f6620746869732070616c6c65742e55030c4070616c6c65745f74696d657374616d701870616c6c65741043616c6c0404540001040c73657404010c6e6f772c0124543a3a4d6f6d656e7400004c54536574207468652063757272656e742074696d652e005501546869732063616c6c2073686f756c6420626520696e766f6b65642065786163746c79206f6e63652070657220626c6f636b2e2049742077696c6c2070616e6963206174207468652066696e616c697a6174696f6ed470686173652c20696620746869732063616c6c206861736e2774206265656e20696e766f6b656420627920746861742074696d652e0041015468652074696d657374616d702073686f756c642062652067726561746572207468616e207468652070726576696f7573206f6e652062792074686520616d6f756e7420737065636966696564206279685b60436f6e6669673a3a4d696e696d756d506572696f64605d2e00c4546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f4e6f6e655f2e0051015468697320646973706174636820636c617373206973205f4d616e6461746f72795f20746f20656e73757265206974206765747320657865637574656420696e2074686520626c6f636b2e204265206177617265510174686174206368616e67696e672074686520636f6d706c6578697479206f6620746869732063616c6c20636f756c6420726573756c742065786861757374696e6720746865207265736f757263657320696e206184626c6f636b20746f206578656375746520616e79206f746865722063616c6c732e0034232320436f6d706c657869747931012d20604f2831296020284e6f7465207468617420696d706c656d656e746174696f6e73206f6620604f6e54696d657374616d7053657460206d75737420616c736f20626520604f283129602955012d20312073746f72616765207265616420616e6420312073746f72616765206d75746174696f6e2028636f64656320604f283129602062656361757365206f6620604469645570646174653a3a74616b656020696e402020606f6e5f66696e616c697a656029d42d2031206576656e742068616e646c657220606f6e5f74696d657374616d705f736574602e204d75737420626520604f283129602e040d01436f6e7461696e7320612076617269616e742070657220646973706174636861626c652065787472696e736963207468617420746869732070616c6c6574206861732e59030c5873746167696e675f70617261636861696e5f696e666f1870616c6c65741043616c6c040454000100040d01436f6e7461696e7320612076617269616e742070657220646973706174636861626c652065787472696e736963207468617420746869732070616c6c6574206861732e5d030c4c626f756e6465645f636f6c6c656374696f6e73407765616b5f626f756e6465645f766563385765616b426f756e646564566563080454016103045300000400690301185665633c543e000061030c3c70616c6c65745f62616c616e6365731474797065732c42616c616e63654c6f636b041c42616c616e63650118000c01086964290101384c6f636b4964656e746966696572000118616d6f756e7418011c42616c616e636500011c726561736f6e736503011c526561736f6e73000065030c3c70616c6c65745f62616c616e6365731474797065731c526561736f6e7300010c0c466565000000104d6973630001000c416c6c0002000069030000026103006d030c4c626f756e6465645f636f6c6c656374696f6e732c626f756e6465645f76656328426f756e646564566563080454017103045300000400750301185665633c543e000071030c3c70616c6c65745f62616c616e6365731474797065732c52657365727665446174610844526573657276654964656e7469666965720129011c42616c616e6365011800080108696429010144526573657276654964656e746966696572000118616d6f756e7418011c42616c616e63650000750300000271030079030c4c626f756e6465645f636f6c6c656374696f6e732c626f756e6465645f76656328426f756e646564566563080454017d03045300000400890301185665633c543e00007d030c3c70616c6c65745f62616c616e636573147479706573204964416d6f756e74080849640181031c42616c616e63650118000801086964810301084964000118616d6f756e7418011c42616c616e636500008103085c70617261636861696e5f77657465655f72756e74696d654452756e74696d65486f6c64526561736f6e00010424436f6e74726163747304008503017070616c6c65745f636f6e7472616374733a3a486f6c64526561736f6e007a000085030c4070616c6c65745f636f6e7472616374731870616c6c657428486f6c64526561736f6e00010860436f646555706c6f61644465706f736974526573657276650000005453746f726167654465706f736974526573657276650001000089030000027d03008d030c4c626f756e6465645f636f6c6c656374696f6e732c626f756e6465645f76656328426f756e646564566563080454019103045300000400950301185665633c543e000091030c3c70616c6c65745f62616c616e636573147479706573204964416d6f756e740808496401981c42616c616e636501180008010869649801084964000118616d6f756e7418011c42616c616e63650000950300000291030099030c3c70616c6c65745f62616c616e6365731870616c6c65741043616c6c080454000449000120507472616e736665725f616c6c6f775f6465617468080110646573749d0301504163636f756e7449644c6f6f6b75704f663c543e00011476616c7565dc0128543a3a42616c616e636500001cd45472616e7366657220736f6d65206c697175696420667265652062616c616e636520746f20616e6f74686572206163636f756e742e003501607472616e736665725f616c6c6f775f6465617468602077696c6c207365742074686520604672656542616c616e636560206f66207468652073656e64657220616e642072656365697665722e11014966207468652073656e6465722773206163636f756e742069732062656c6f7720746865206578697374656e7469616c206465706f736974206173206120726573756c74b06f6620746865207472616e736665722c20746865206163636f756e742077696c6c206265207265617065642e001501546865206469737061746368206f726967696e20666f7220746869732063616c6c206d75737420626520605369676e65646020627920746865207472616e736163746f722e38666f7263655f7472616e736665720c0118736f757263659d0301504163636f756e7449644c6f6f6b75704f663c543e000110646573749d0301504163636f756e7449644c6f6f6b75704f663c543e00011476616c7565dc0128543a3a42616c616e6365000208610145786163746c7920617320607472616e736665725f616c6c6f775f6465617468602c2065786365707420746865206f726967696e206d75737420626520726f6f7420616e642074686520736f75726365206163636f756e74446d6179206265207370656369666965642e4c7472616e736665725f6b6565705f616c697665080110646573749d0301504163636f756e7449644c6f6f6b75704f663c543e00011476616c7565dc0128543a3a42616c616e6365000318590153616d6520617320746865205b607472616e736665725f616c6c6f775f6465617468605d2063616c6c2c206275742077697468206120636865636b207468617420746865207472616e736665722077696c6c206e6f74606b696c6c20746865206f726967696e206163636f756e742e00e8393925206f66207468652074696d6520796f752077616e74205b607472616e736665725f616c6c6f775f6465617468605d20696e73746561642e00f05b607472616e736665725f616c6c6f775f6465617468605d3a207374727563742e50616c6c65742e68746d6c236d6574686f642e7472616e73666572307472616e736665725f616c6c080110646573749d0301504163636f756e7449644c6f6f6b75704f663c543e0001286b6565705f616c697665200110626f6f6c00043c05015472616e736665722074686520656e74697265207472616e7366657261626c652062616c616e63652066726f6d207468652063616c6c6572206163636f756e742e0059014e4f54453a20546869732066756e6374696f6e206f6e6c7920617474656d70747320746f207472616e73666572205f7472616e7366657261626c655f2062616c616e6365732e2054686973206d65616e7320746861746101616e79206c6f636b65642c2072657365727665642c206f72206578697374656e7469616c206465706f7369747320287768656e20606b6565705f616c6976656020697320607472756560292c2077696c6c206e6f742062655d017472616e7366657272656420627920746869732066756e6374696f6e2e20546f20656e73757265207468617420746869732066756e6374696f6e20726573756c747320696e2061206b696c6c6564206163636f756e742c4501796f75206d69676874206e65656420746f207072657061726520746865206163636f756e742062792072656d6f76696e6720616e79207265666572656e636520636f756e746572732c2073746f72616765406465706f736974732c206574632e2e2e00c0546865206469737061746368206f726967696e206f6620746869732063616c6c206d757374206265205369676e65642e00a02d206064657374603a2054686520726563697069656e74206f6620746865207472616e736665722e59012d20606b6565705f616c697665603a204120626f6f6c65616e20746f2064657465726d696e652069662074686520607472616e736665725f616c6c60206f7065726174696f6e2073686f756c642073656e6420616c6c4d0120206f66207468652066756e647320746865206163636f756e74206861732c2063617573696e67207468652073656e646572206163636f756e7420746f206265206b696c6c6564202866616c7365292c206f72590120207472616e736665722065766572797468696e6720657863657074206174206c6561737420746865206578697374656e7469616c206465706f7369742c2077686963682077696c6c2067756172616e74656520746f9c20206b656570207468652073656e646572206163636f756e7420616c697665202874727565292e3c666f7263655f756e7265736572766508010c77686f9d0301504163636f756e7449644c6f6f6b75704f663c543e000118616d6f756e74180128543a3a42616c616e636500050cb0556e7265736572766520736f6d652062616c616e63652066726f6d2061207573657220627920666f7263652e006c43616e206f6e6c792062652063616c6c656420627920524f4f542e40757067726164655f6163636f756e747304010c77686fa401445665633c543a3a4163636f756e7449643e0006207055706772616465206120737065636966696564206163636f756e742e00742d20606f726967696e603a204d75737420626520605369676e6564602e902d206077686f603a20546865206163636f756e7420746f2062652075706772616465642e005501546869732077696c6c20776169766520746865207472616e73616374696f6e20666565206966206174206c6561737420616c6c2062757420313025206f6620746865206163636f756e7473206e656564656420746f410162652075706772616465642e20285765206c657420736f6d65206e6f74206861766520746f206265207570677261646564206a75737420696e206f7264657220746f20616c6c6f7720666f722074686558706f73736962696c697479206f6620636875726e292e44666f7263655f7365745f62616c616e636508010c77686f9d0301504163636f756e7449644c6f6f6b75704f663c543e0001206e65775f66726565dc0128543a3a42616c616e636500080cac5365742074686520726567756c61722062616c616e6365206f66206120676976656e206163636f756e742e00b0546865206469737061746368206f726967696e20666f7220746869732063616c6c2069732060726f6f74602e6c666f7263655f61646a7573745f746f74616c5f69737375616e6365080124646972656374696f6ea503014c41646a7573746d656e74446972656374696f6e00011464656c7461dc0128543a3a42616c616e6365000914b841646a7573742074686520746f74616c2069737375616e636520696e20612073617475726174696e67207761792e00fc43616e206f6e6c792062652063616c6c656420627920726f6f7420616e6420616c77617973206e65656473206120706f736974697665206064656c7461602e002423204578616d706c65040d01436f6e7461696e7320612076617269616e742070657220646973706174636861626c652065787472696e736963207468617420746869732070616c6c6574206861732e9d030c2873705f72756e74696d65306d756c746961646472657373304d756c74694164647265737308244163636f756e7449640100304163636f756e74496e6465780198011408496404000001244163636f756e74496400000014496e6465780400a10301304163636f756e74496e6465780001000c526177040038011c5665633c75383e0002002441646472657373333204000401205b75383b2033325d000300244164647265737332300400d801205b75383b2032305d00040000a1030000069800a5030c3c70616c6c65745f62616c616e6365731474797065734c41646a7573746d656e74446972656374696f6e00010820496e63726561736500000020446563726561736500010000a9030c3c70616c6c65745f62616c616e6365731870616c6c6574144572726f720804540004490001303856657374696e6742616c616e63650000049c56657374696e672062616c616e636520746f6f206869676820746f2073656e642076616c75652e544c69717569646974795265737472696374696f6e73000104c84163636f756e74206c6971756964697479207265737472696374696f6e732070726576656e74207769746864726177616c2e4c496e73756666696369656e7442616c616e63650002047842616c616e636520746f6f206c6f7720746f2073656e642076616c75652e484578697374656e7469616c4465706f736974000304ec56616c756520746f6f206c6f7720746f20637265617465206163636f756e742064756520746f206578697374656e7469616c206465706f7369742e34457870656e646162696c697479000404905472616e736665722f7061796d656e7420776f756c64206b696c6c206163636f756e742e5c4578697374696e6756657374696e675363686564756c65000504cc412076657374696e67207363686564756c6520616c72656164792065786973747320666f722074686973206163636f756e742e2c446561644163636f756e740006048c42656e6566696369617279206163636f756e74206d757374207072652d65786973742e3c546f6f4d616e795265736572766573000704b84e756d626572206f66206e616d65642072657365727665732065786365656420604d61785265736572766573602e30546f6f4d616e79486f6c6473000804f84e756d626572206f6620686f6c647320657863656564206056617269616e74436f756e744f663c543a3a52756e74696d65486f6c64526561736f6e3e602e38546f6f4d616e79467265657a6573000904984e756d626572206f6620667265657a65732065786365656420604d6178467265657a6573602e4c49737375616e63654465616374697661746564000a0401015468652069737375616e63652063616e6e6f74206265206d6f6469666965642073696e636520697420697320616c72656164792064656163746976617465642e2444656c74615a65726f000b04645468652064656c74612063616e6e6f74206265207a65726f2e048054686520604572726f726020656e756d206f6620746869732070616c6c65742ead03086870616c6c65745f7472616e73616374696f6e5f7061796d656e742052656c6561736573000108245631416e6369656e7400000008563200010000b1030c2c70616c6c65745f7375646f1870616c6c65741043616c6c040454000114107375646f04011063616c6cb503017c426f783c3c5420617320436f6e6669673e3a3a52756e74696d6543616c6c3e000004350141757468656e7469636174657320746865207375646f206b657920616e64206469737061746368657320612066756e6374696f6e2063616c6c20776974682060526f6f7460206f726967696e2e547375646f5f756e636865636b65645f77656967687408011063616c6cb503017c426f783c3c5420617320436f6e6669673e3a3a52756e74696d6543616c6c3e000118776569676874280118576569676874000114350141757468656e7469636174657320746865207375646f206b657920616e64206469737061746368657320612066756e6374696f6e2063616c6c20776974682060526f6f7460206f726967696e2e2d01546869732066756e6374696f6e20646f6573206e6f7420636865636b2074686520776569676874206f66207468652063616c6c2c20616e6420696e737465616420616c6c6f777320746865b05375646f207573657220746f20737065636966792074686520776569676874206f66207468652063616c6c2e00cc546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e1c7365745f6b657904010c6e65779d0301504163636f756e7449644c6f6f6b75704f663c543e0002085d0141757468656e74696361746573207468652063757272656e74207375646f206b657920616e6420736574732074686520676976656e204163636f756e7449642028606e6577602920617320746865206e6577207375646f106b65792e1c7375646f5f617308010c77686f9d0301504163636f756e7449644c6f6f6b75704f663c543e00011063616c6cb503017c426f783c3c5420617320436f6e6669673e3a3a52756e74696d6543616c6c3e0003104d0141757468656e7469636174657320746865207375646f206b657920616e64206469737061746368657320612066756e6374696f6e2063616c6c207769746820605369676e656460206f726967696e2066726f6d406120676976656e206163636f756e742e00cc546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e2872656d6f76655f6b657900040c845065726d616e656e746c792072656d6f76657320746865207375646f206b65792e006c2a2a546869732063616e6e6f7420626520756e2d646f6e652e2a2a040d01436f6e7461696e7320612076617269616e742070657220646973706174636861626c652065787472696e736963207468617420746869732070616c6c6574206861732eb503085c70617261636861696e5f77657465655f72756e74696d652c52756e74696d6543616c6c00016c1853797374656d0400690201ad0173656c663a3a73705f6170695f68696464656e5f696e636c756465735f636f6e7374727563745f72756e74696d653a3a68696464656e5f696e636c7564653a3a64697370617463680a3a3a43616c6c61626c6543616c6c466f723c53797374656d2c2052756e74696d653e0000003c50617261636861696e53797374656d04002d0301d10173656c663a3a73705f6170695f68696464656e5f696e636c756465735f636f6e7374727563745f72756e74696d653a3a68696464656e5f696e636c7564653a3a64697370617463680a3a3a43616c6c61626c6543616c6c466f723c50617261636861696e53797374656d2c2052756e74696d653e0001002454696d657374616d700400550301b90173656c663a3a73705f6170695f68696464656e5f696e636c756465735f636f6e7374727563745f72756e74696d653a3a68696464656e5f696e636c7564653a3a64697370617463680a3a3a43616c6c61626c6543616c6c466f723c54696d657374616d702c2052756e74696d653e0002003450617261636861696e496e666f0400590301c90173656c663a3a73705f6170695f68696464656e5f696e636c756465735f636f6e7374727563745f72756e74696d653a3a68696464656e5f696e636c7564653a3a64697370617463680a3a3a43616c6c61626c6543616c6c466f723c50617261636861696e496e666f2c2052756e74696d653e0003002042616c616e6365730400990301b50173656c663a3a73705f6170695f68696464656e5f696e636c756465735f636f6e7374727563745f72756e74696d653a3a68696464656e5f696e636c7564653a3a64697370617463680a3a3a43616c6c61626c6543616c6c466f723c42616c616e6365732c2052756e74696d653e000a00105375646f0400b10301a50173656c663a3a73705f6170695f68696464656e5f696e636c756465735f636f6e7374727563745f72756e74696d653a3a68696464656e5f696e636c7564653a3a64697370617463680a3a3a43616c6c61626c6543616c6c466f723c5375646f2c2052756e74696d653e000f0044436f6c6c61746f7253656c656374696f6e0400b90301d90173656c663a3a73705f6170695f68696464656e5f696e636c756465735f636f6e7374727563745f72756e74696d653a3a68696464656e5f696e636c7564653a3a64697370617463680a3a3a43616c6c61626c6543616c6c466f723c436f6c6c61746f7253656c656374696f6e2c2052756e74696d653e0015001c53657373696f6e0400bd0301b10173656c663a3a73705f6170695f68696464656e5f696e636c756465735f636f6e7374727563745f72756e74696d653a3a68696464656e5f696e636c7564653a3a64697370617463680a3a3a43616c6c61626c6543616c6c466f723c53657373696f6e2c2052756e74696d653e0016002458636d7051756575650400c90301b90173656c663a3a73705f6170695f68696464656e5f696e636c756465735f636f6e7374727563745f72756e74696d653a3a68696464656e5f696e636c7564653a3a64697370617463680a3a3a43616c6c61626c6543616c6c466f723c58636d7051756575652c2052756e74696d653e001e002c506f6c6b61646f7458636d0400cd0301c10173656c663a3a73705f6170695f68696464656e5f696e636c756465735f636f6e7374727563745f72756e74696d653a3a68696464656e5f696e636c7564653a3a64697370617463680a3a3a43616c6c61626c6543616c6c466f723c506f6c6b61646f7458636d2c2052756e74696d653e001f002843756d756c757358636d0400650401bd0173656c663a3a73705f6170695f68696464656e5f696e636c756465735f636f6e7374727563745f72756e74696d653a3a68696464656e5f696e636c7564653a3a64697370617463680a3a3a43616c6c61626c6543616c6c466f723c43756d756c757358636d2c2052756e74696d653e002000304d65737361676551756575650400690401c50173656c663a3a73705f6170695f68696464656e5f696e636c756465735f636f6e7374727563745f72756e74696d653a3a68696464656e5f696e636c7564653a3a64697370617463680a3a3a43616c6c61626c6543616c6c466f723c4d65737361676551756575652c2052756e74696d653e00210018546f6b656e7304006d0401ad0173656c663a3a73705f6170695f68696464656e5f696e636c756465735f636f6e7374727563745f72756e74696d653a3a68696464656e5f696e636c7564653a3a64697370617463680a3a3a43616c6c61626c6543616c6c466f723c546f6b656e732c2052756e74696d653e006b004457655445454d65737361676551756575650400710401d90173656c663a3a73705f6170695f68696464656e5f696e636c756465735f636f6e7374727563745f72756e74696d653a3a68696464656e5f696e636c7564653a3a64697370617463680a3a3a43616c6c61626c6543616c6c466f723c57655445454d65737361676551756575652c2052756e74696d653e006d001c5574696c6974790400750401b10173656c663a3a73705f6170695f68696464656e5f696e636c756465735f636f6e7374727563745f72756e74696d653a3a68696464656e5f696e636c7564653a3a64697370617463680a3a3a43616c6c61626c6543616c6c466f723c5574696c6974792c2052756e74696d653e006e002057655445454f72670400910401b50173656c663a3a73705f6170695f68696464656e5f696e636c756465735f636f6e7374727563745f72756e74696d653a3a68696464656e5f696e636c7564653a3a64697370617463680a3a3a43616c6c61626c6543616c6c466f723c57655445454f72672c2052756e74696d653e006f0028576554454541737365740400a10401bd0173656c663a3a73705f6170695f68696464656e5f696e636c756465735f636f6e7374727563745f72756e74696d653a3a68696464656e5f696e636c7564653a3a64697370617463680a3a3a43616c6c61626c6543616c6c466f723c576554454541737365742c2052756e74696d653e0070002457655445455375646f0400a50401b90173656c663a3a73705f6170695f68696464656e5f696e636c756465735f636f6e7374727563745f72756e74696d653a3a68696464656e5f696e636c7564653a3a64697370617463680a3a3a43616c6c61626c6543616c6c466f723c57655445455375646f2c2052756e74696d653e0071002857655445454775696c640400a90401bd0173656c663a3a73705f6170695f68696464656e5f696e636c756465735f636f6e7374727563745f72756e74696d653a3a68696464656e5f696e636c7564653a3a64697370617463680a3a3a43616c6c61626c6543616c6c466f723c57655445454775696c642c2052756e74696d653e00720030576554454550726f6a6563740400ad0401c50173656c663a3a73705f6170695f68696464656e5f696e636c756465735f636f6e7374727563745f72756e74696d653a3a68696464656e5f696e636c7564653a3a64697370617463680a3a3a43616c6c61626c6543616c6c466f723c576554454550726f6a6563742c2052756e74696d653e007300205765544545476f760400bd0401b50173656c663a3a73705f6170695f68696464656e5f696e636c756465735f636f6e7374727563745f72756e74696d653a3a68696464656e5f696e636c7564653a3a64697370617463680a3a3a43616c6c61626c6543616c6c466f723c5765544545476f762c2052756e74696d653e00740034576554454554726561737572790400d10401c90173656c663a3a73705f6170695f68696464656e5f696e636c756465735f636f6e7374727563745f72756e74696d653a3a68696464656e5f696e636c7564653a3a64697370617463680a3a3a43616c6c61626c6543616c6c466f723c576554454554726561737572792c2052756e74696d653e0075002057655445454170700400d50401b50173656c663a3a73705f6170695f68696464656e5f696e636c756465735f636f6e7374727563745f72756e74696d653a3a68696464656e5f696e636c7564653a3a64697370617463680a3a3a43616c6c61626c6543616c6c466f723c57655445454170702c2052756e74696d653e0076002457655445455461736b0400190501b90173656c663a3a73705f6170695f68696464656e5f696e636c756465735f636f6e7374727563745f72756e74696d653a3a68696464656e5f696e636c7564653a3a64697370617463680a3a3a43616c6c61626c6543616c6c466f723c57655445455461736b2c2052756e74696d653e00770020576554454547707504001d0501b50173656c663a3a73705f6170695f68696464656e5f696e636c756465735f636f6e7374727563745f72756e74696d653a3a68696464656e5f696e636c7564653a3a64697370617463680a3a3a43616c6c61626c6543616c6c466f723c57655445454770752c2052756e74696d653e0078002c5765544545576f726b65720400210501c10173656c663a3a73705f6170695f68696464656e5f696e636c756465735f636f6e7374727563745f72756e74696d653a3a68696464656e5f696e636c7564653a3a64697370617463680a3a3a43616c6c61626c6543616c6c466f723c5765544545576f726b65722c2052756e74696d653e00790024436f6e7472616374730400410501b90173656c663a3a73705f6170695f68696464656e5f696e636c756465735f636f6e7374727563745f72756e74696d653a3a68696464656e5f696e636c7564653a3a64697370617463680a3a3a43616c6c61626c6543616c6c466f723c436f6e7472616374732c2052756e74696d653e007a0000b9030c6470616c6c65745f636f6c6c61746f725f73656c656374696f6e1870616c6c65741043616c6c040454000124447365745f696e76756c6e657261626c657304010c6e6577a401445665633c543a3a4163636f756e7449643e000034310153657420746865206c697374206f6620696e76756c6e657261626c65202866697865642920636f6c6c61746f72732e20546865736520636f6c6c61746f7273206d75737420646f20736f6d65d07072657061726174696f6e2c206e616d656c7920746f206861766520726567697374657265642073657373696f6e206b6579732e0059015468652063616c6c2077696c6c2072656d6f766520616e79206163636f756e747320746861742068617665206e6f742072656769737465726564206b6579732066726f6d20746865207365742e20546861742069732c5d016974206973206e6f6e2d61746f6d69633b207468652063616c6c6572206163636570747320616c6c20604163636f756e74496460732070617373656420696e20606e657760205f696e646976696475616c6c795f206173310161636365707461626c6520496e76756c6e657261626c65732c20616e64206973206e6f742070726f706f73696e672061205f7365745f206f66206e657720496e76756c6e657261626c65732e005901546869732063616c6c20646f6573206e6f74206d61696e7461696e206d757475616c206578636c75736976697479206f662060496e76756c6e657261626c65736020616e64206043616e64696461746573602e20497461016973207265636f6d6d656e64656420746f207573652061206261746368206f6620606164645f696e76756c6e657261626c656020616e64206072656d6f76655f696e76756c6e657261626c656020696e73746561642e204151016062617463685f616c6c602063616e20616c736f206265207573656420746f20656e666f7263652061746f6d69636974792e20496620616e792063616e646964617465732061726520696e636c7564656420696e4d01606e6577602c20746865792073686f756c642062652072656d6f7665642077697468206072656d6f76655f696e76756c6e657261626c655f63616e6469646174656020616674657220657865637574696f6e2e00944d7573742062652063616c6c65642062792074686520605570646174654f726967696e602e587365745f646573697265645f63616e6469646174657304010c6d617810010c75333200011455015365742074686520696465616c206e756d626572206f66206e6f6e2d696e76756c6e657261626c6520636f6c6c61746f72732e204966206c6f776572696e672074686973206e756d6265722c207468656e2074686561016e756d626572206f662072756e6e696e6720636f6c6c61746f727320636f756c6420626520686967686572207468616e2074686973206669677572652e2041736964652066726f6d2074686174206564676520636173652c350174686572652073686f756c64206265206e6f206f746865722077617920746f2068617665206d6f72652063616e64696461746573207468616e207468652064657369726564206e756d6265722e00d0546865206f726967696e20666f7220746869732063616c6c206d7573742062652074686520605570646174654f726967696e602e487365745f63616e6469646163795f626f6e64040110626f6e6418013042616c616e63654f663c543e00021c78536574207468652063616e64696461637920626f6e6420616d6f756e742e0051014966207468652063616e64696461637920626f6e6420697320696e6372656173656420627920746869732063616c6c2c20616c6c2063757272656e742063616e64696461746573207768696368206861766520614d016465706f736974206c6f776572207468616e20746865206e657720626f6e642077696c6c206265206b69636b65642066726f6d20746865206c69737420616e6420676574207468656972206465706f73697473146261636b2e00d0546865206f726967696e20666f7220746869732063616c6c206d7573742062652074686520605570646174654f726967696e602e5472656769737465725f61735f63616e646964617465000310410152656769737465722074686973206163636f756e74206173206120636f6c6c61746f722063616e6469646174652e20546865206163636f756e74206d7573742028612920616c726561647920686176651d01726567697374657265642073657373696f6e206b65797320616e64202862292062652061626c6520746f207265736572766520746865206043616e646964616379426f6e64602e00dc546869732063616c6c206973206e6f7420617661696c61626c6520746f2060496e76756c6e657261626c656020636f6c6c61746f72732e306c656176655f696e74656e7400041455014465726567697374657220606f726967696e60206173206120636f6c6c61746f722063616e6469646174652e204e6f746520746861742074686520636f6c6c61746f722063616e206f6e6c79206c65617665206f6e0d0173657373696f6e206368616e67652e20546865206043616e646964616379426f6e64602077696c6c20626520756e726573657276656420696d6d6564696174656c792e001901546869732063616c6c2077696c6c206661696c2069662074686520746f74616c206e756d626572206f662063616e6469646174657320776f756c642064726f702062656c6f775c604d696e456c696769626c65436f6c6c61746f7273602e406164645f696e76756c6e657261626c6504010c77686f000130543a3a4163636f756e74496400051045014164642061206e6577206163636f756e74206077686f6020746f20746865206c697374206f662060496e76756c6e657261626c65736020636f6c6c61746f72732e206077686f60206d75737420686176651d01726567697374657265642073657373696f6e206b6579732e204966206077686f6020697320612063616e6469646174652c20746865792077696c6c2062652072656d6f7665642e00d0546865206f726967696e20666f7220746869732063616c6c206d7573742062652074686520605570646174654f726967696e602e4c72656d6f76655f696e76756c6e657261626c6504010c77686f000130543a3a4163636f756e744964000610610152656d6f766520616e206163636f756e74206077686f602066726f6d20746865206c697374206f662060496e76756c6e657261626c65736020636f6c6c61746f72732e2060496e76756c6e657261626c657360206d75737428626520736f727465642e00d0546865206f726967696e20666f7220746869732063616c6c206d7573742062652074686520605570646174654f726967696e602e2c7570646174655f626f6e6404012c6e65775f6465706f73697418013042616c616e63654f663c543e00071c5d01557064617465207468652063616e64696461637920626f6e64206f6620636f6c6c61746f722063616e64696461746520606f726967696e6020746f2061206e657720616d6f756e7420606e65775f6465706f736974602e00410153657474696e67206120606e65775f6465706f736974602074686174206973206c6f776572207468616e207468652063757272656e74206465706f736974207768696c6520606f726967696e60206973e06f6363757079696e67206120746f702d604465736972656443616e646964617465736020736c6f74206973206e6f7420616c6c6f7765642e005901546869732063616c6c2077696c6c206661696c20696620606f726967696e60206973206e6f74206120636f6c6c61746f722063616e6469646174652c20746865207570646174656420626f6e64206973206c6f77657219017468616e20746865206d696e696d756d2063616e64696461637920626f6e642c20616e642f6f722074686520616d6f756e742063616e6e6f742062652072657365727665642e4c74616b655f63616e6469646174655f736c6f7408011c6465706f73697418013042616c616e63654f663c543e000118746172676574000130543a3a4163636f756e74496400081c4d015468652063616c6c657220606f726967696e60207265706c6163657320612063616e64696461746520607461726765746020696e2074686520636f6c6c61746f722063616e646964617465206c6973742062795501726573657276696e6720606465706f736974602e2054686520616d6f756e7420606465706f73697460207265736572766564206279207468652063616c6c6572206d7573742062652067726561746572207468616ee0746865206578697374696e6720626f6e64206f66207468652074617267657420697420697320747279696e6720746f207265706c6163652e005901546869732063616c6c2077696c6c206661696c206966207468652063616c6c657220697320616c7265616479206120636f6c6c61746f722063616e646964617465206f7220696e76756c6e657261626c652c20746865550163616c6c657220646f6573206e6f74206861766520726567697374657265642073657373696f6e206b6579732c2074686520746172676574206973206e6f74206120636f6c6c61746f722063616e6469646174652cbc616e642f6f722074686520606465706f7369746020616d6f756e742063616e6e6f742062652072657365727665642e040d01436f6e7461696e7320612076617269616e742070657220646973706174636861626c652065787472696e736963207468617420746869732070616c6c6574206861732ebd030c3870616c6c65745f73657373696f6e1870616c6c65741043616c6c040454000108207365745f6b6579730801106b657973c103011c543a3a4b65797300011470726f6f6638011c5665633c75383e000024e453657473207468652073657373696f6e206b6579287329206f66207468652066756e6374696f6e2063616c6c657220746f20606b657973602e1d01416c6c6f777320616e206163636f756e7420746f20736574206974732073657373696f6e206b6579207072696f7220746f206265636f6d696e6720612076616c696461746f722ec05468697320646f65736e27742074616b652065666665637420756e74696c20746865206e6578742073657373696f6e2e00d0546865206469737061746368206f726967696e206f6620746869732066756e6374696f6e206d757374206265207369676e65642e0034232320436f6d706c657869747959012d20604f283129602e2041637475616c20636f737420646570656e6473206f6e20746865206e756d626572206f66206c656e677468206f662060543a3a4b6579733a3a6b65795f69647328296020776869636820697320202066697865642e2870757267655f6b657973000130c852656d6f76657320616e792073657373696f6e206b6579287329206f66207468652066756e6374696f6e2063616c6c65722e00c05468697320646f65736e27742074616b652065666665637420756e74696c20746865206e6578742073657373696f6e2e005501546865206469737061746368206f726967696e206f6620746869732066756e6374696f6e206d757374206265205369676e656420616e6420746865206163636f756e74206d757374206265206569746865722062655d01636f6e7665727469626c6520746f20612076616c696461746f72204944207573696e672074686520636861696e2773207479706963616c2061646472657373696e672073797374656d20287468697320757375616c6c7951016d65616e73206265696e67206120636f6e74726f6c6c6572206163636f756e7429206f72206469726563746c7920636f6e7665727469626c6520696e746f20612076616c696461746f722049442028776869636894757375616c6c79206d65616e73206265696e672061207374617368206163636f756e74292e0034232320436f6d706c65786974793d012d20604f2831296020696e206e756d626572206f66206b65792074797065732e2041637475616c20636f737420646570656e6473206f6e20746865206e756d626572206f66206c656e677468206f6698202060543a3a4b6579733a3a6b65795f6964732829602077686963682069732066697865642e040d01436f6e7461696e7320612076617269616e742070657220646973706174636861626c652065787472696e736963207468617420746869732070616c6c6574206861732ec103085c70617261636861696e5f77657465655f72756e74696d652c53657373696f6e4b657973000004011061757261c50301c43c41757261206173202463726174653a3a426f756e64546f52756e74696d654170705075626c69633e3a3a5075626c69630000c503104473705f636f6e73656e7375735f617572611c737232353531392c6170705f73723235353139185075626c69630000040004013c737232353531393a3a5075626c69630000c9030c6463756d756c75735f70616c6c65745f78636d705f71756575651870616c6c65741043616c6c0404540001145473757370656e645f78636d5f657865637574696f6e00010c490153757370656e647320616c6c2058434d20657865637574696f6e7320666f72207468652058434d502071756575652c207265676172646c657373206f66207468652073656e6465722773206f726967696e2e00a42d20606f726967696e603a204d75737420706173732060436f6e74726f6c6c65724f726967696e602e50726573756d655f78636d5f657865637574696f6e000214b8526573756d657320616c6c2058434d20657865637574696f6e7320666f72207468652058434d502071756575652e003d014e6f7465207468617420746869732066756e6374696f6e20646f65736e2774206368616e67652074686520737461747573206f662074686520696e2f6f757420626f756e64206368616e6e656c732e00a42d20606f726967696e603a204d75737420706173732060436f6e74726f6c6c65724f726967696e602e607570646174655f73757370656e645f7468726573686f6c6404010c6e657710010c75333200031449014f76657277726974657320746865206e756d626572206f66207061676573207768696368206d75737420626520696e2074686520717565756520666f7220746865206f74686572207369646520746f20626578746f6c6420746f2073757370656e642074686569722073656e64696e672e00742d20606f726967696e603a204d75737420706173732060526f6f74602ee82d20606e6577603a20446573697265642076616c756520666f7220605175657565436f6e666967446174612e73757370656e645f76616c756560547570646174655f64726f705f7468726573686f6c6404010c6e657710010c75333200041445014f76657277726974657320746865206e756d626572206f66207061676573207768696368206d75737420626520696e207468652071756575652061667465722077686963682077652064726f7020616e798866757274686572206d657373616765732066726f6d20746865206368616e6e656c2e00742d20606f726967696e603a204d75737420706173732060526f6f74602eec2d20606e6577603a20446573697265642076616c756520666f7220605175657565436f6e666967446174612e64726f705f7468726573686f6c64605c7570646174655f726573756d655f7468726573686f6c6404010c6e657710010c7533320005144d014f76657277726974657320746865206e756d626572206f6620706167657320776869636820746865207175657565206d757374206265207265647563656420746f206265666f7265206974207369676e616c73010174686174206d6573736167652073656e64696e67206d6179207265636f6d6d656e636520616674657220697420686173206265656e2073757370656e6465642e00742d20606f726967696e603a204d75737420706173732060526f6f74602ef42d20606e6577603a20446573697265642076616c756520666f7220605175657565436f6e666967446174612e726573756d655f7468726573686f6c6460040d01436f6e7461696e7320612076617269616e742070657220646973706174636861626c652065787472696e736963207468617420746869732070616c6c6574206861732ecd030c2870616c6c65745f78636d1870616c6c65741043616c6c04045400013c1073656e6408011064657374d9010158426f783c56657273696f6e65644c6f636174696f6e3e00011c6d657373616765d1030154426f783c56657273696f6e656458636d3c28293e3e00000455015741524e494e473a20444550524543415445442e206073656e64602077696c6c2062652072656d6f766564206166746572204a756e6520323032342e20557365206073656e645f626c6f626020696e73746561642e3c74656c65706f72745f61737365747310011064657374d9010158426f783c56657273696f6e65644c6f636174696f6e3e00012c62656e6566696369617279d9010158426f783c56657273696f6e65644c6f636174696f6e3e00011861737365747375010150426f783c56657273696f6e65644173736574733e0001386665655f61737365745f6974656d10010c753332000148110154656c65706f727420736f6d65206173736574732066726f6d20746865206c6f63616c20636861696e20746f20736f6d652064657374696e6174696f6e20636861696e2e001d012a2a546869732066756e6374696f6e20697320646570726563617465643a2055736520606c696d697465645f74656c65706f72745f6173736574736020696e73746561642e2a2a005101466565207061796d656e74206f6e207468652064657374696e6174696f6e2073696465206973206d6164652066726f6d2074686520617373657420696e2074686520606173736574736020766563746f72206f666101696e64657820606665655f61737365745f6974656d602e2054686520776569676874206c696d697420666f722066656573206973206e6f742070726f766964656420616e64207468757320697320756e6c696d697465642cb47769746820616c6c20666565732074616b656e206173206e65656465642066726f6d207468652061737365742e0029012d20606f726967696e603a204d7573742062652063617061626c65206f66207769746864726177696e672074686520606173736574736020616e6420657865637574696e672058434d2e25012d206064657374603a2044657374696e6174696f6e20636f6e7465787420666f7220746865206173736574732e2057696c6c207479706963616c6c7920626520605b506172656e742c6101202050617261636861696e282e2e295d6020746f2073656e642066726f6d2070617261636861696e20746f2070617261636861696e2c206f7220605b50617261636861696e282e2e295d6020746f2073656e642066726f6d54202072656c617920746f2070617261636861696e2e55012d206062656e6566696369617279603a20412062656e6566696369617279206c6f636174696f6e20666f72207468652061737365747320696e2074686520636f6e74657874206f66206064657374602e2057696c6c98202067656e6572616c6c7920626520616e20604163636f756e7449643332602076616c75652e59012d2060617373657473603a205468652061737365747320746f2062652077697468647261776e2e20546869732073686f756c6420696e636c7564652074686520617373657473207573656420746f2070617920746865682020666565206f6e207468652060646573746020636861696e2e4d012d20606665655f61737365745f6974656d603a2054686520696e64657820696e746f206061737365747360206f6620746865206974656d2077686963682073686f756c64206265207573656420746f207061791c2020666565732e5c726573657276655f7472616e736665725f61737365747310011064657374d9010158426f783c56657273696f6e65644c6f636174696f6e3e00012c62656e6566696369617279d9010158426f783c56657273696f6e65644c6f636174696f6e3e00011861737365747375010150426f783c56657273696f6e65644173736574733e0001386665655f61737365745f6974656d10010c7533320002785d015472616e7366657220736f6d65206173736574732066726f6d20746865206c6f63616c20636861696e20746f207468652064657374696e6174696f6e20636861696e207468726f756768207468656972206c6f63616c2c7864657374696e6174696f6e206f722072656d6f746520726573657276652e003d016061737365747360206d75737420686176652073616d652072657365727665206c6f636174696f6e20616e64206d6179206e6f742062652074656c65706f727461626c6520746f206064657374602e4d01202d2060617373657473602068617665206c6f63616c20726573657276653a207472616e736665722061737365747320746f20736f7665726569676e206163636f756e74206f662064657374696e6174696f6e4d01202020636861696e20616e6420666f72776172642061206e6f74696669636174696f6e2058434d20746f2060646573746020746f206d696e7420616e64206465706f73697420726573657276652d62617365646c20202061737365747320746f206062656e6566696369617279602e5501202d20606173736574736020686176652064657374696e6174696f6e20726573657276653a206275726e206c6f63616c2061737365747320616e6420666f72776172642061206e6f74696669636174696f6e20746f590120202060646573746020636861696e20746f207769746864726177207468652072657365727665206173736574732066726f6d207468697320636861696e277320736f7665726569676e206163636f756e7420616e64842020206465706f736974207468656d20746f206062656e6566696369617279602e6101202d20606173736574736020686176652072656d6f746520726573657276653a206275726e206c6f63616c206173736574732c20666f72776172642058434d20746f207265736572766520636861696e20746f206d6f7665610120202072657365727665732066726f6d207468697320636861696e277320534120746f2060646573746020636861696e27732053412c20616e6420666f727761726420616e6f746865722058434d20746f20606465737460f4202020746f206d696e7420616e64206465706f73697420726573657276652d62617365642061737365747320746f206062656e6566696369617279602e003d012a2a546869732066756e6374696f6e20697320646570726563617465643a2055736520606c696d697465645f726573657276655f7472616e736665725f6173736574736020696e73746561642e2a2a005101466565207061796d656e74206f6e207468652064657374696e6174696f6e2073696465206973206d6164652066726f6d2074686520617373657420696e2074686520606173736574736020766563746f72206f666101696e64657820606665655f61737365745f6974656d602e2054686520776569676874206c696d697420666f722066656573206973206e6f742070726f766964656420616e64207468757320697320756e6c696d697465642cb47769746820616c6c20666565732074616b656e206173206e65656465642066726f6d207468652061737365742e0029012d20606f726967696e603a204d7573742062652063617061626c65206f66207769746864726177696e672074686520606173736574736020616e6420657865637574696e672058434d2e25012d206064657374603a2044657374696e6174696f6e20636f6e7465787420666f7220746865206173736574732e2057696c6c207479706963616c6c7920626520605b506172656e742c6101202050617261636861696e282e2e295d6020746f2073656e642066726f6d2070617261636861696e20746f2070617261636861696e2c206f7220605b50617261636861696e282e2e295d6020746f2073656e642066726f6d54202072656c617920746f2070617261636861696e2e55012d206062656e6566696369617279603a20412062656e6566696369617279206c6f636174696f6e20666f72207468652061737365747320696e2074686520636f6e74657874206f66206064657374602e2057696c6c98202067656e6572616c6c7920626520616e20604163636f756e7449643332602076616c75652e59012d2060617373657473603a205468652061737365747320746f2062652077697468647261776e2e20546869732073686f756c6420696e636c7564652074686520617373657473207573656420746f2070617920746865c82020666565206f6e20746865206064657374602028616e6420706f737369626c7920726573657276652920636861696e732e4d012d20606665655f61737365745f6974656d603a2054686520696e64657820696e746f206061737365747360206f6620746865206974656d2077686963682073686f756c64206265207573656420746f207061791c2020666565732e1c6578656375746508011c6d657373616765350401b4426f783c56657273696f6e656458636d3c3c5420617320436f6e6669673e3a3a52756e74696d6543616c6c3e3e0001286d61785f77656967687428011857656967687400032cd04578656375746520616e2058434d206d6573736167652066726f6d2061206c6f63616c2c207369676e65642c206f726967696e2e004d01416e206576656e74206973206465706f736974656420696e6469636174696e67207768657468657220606d73676020636f756c6420626520657865637574656420636f6d706c6574656c79206f72206f6e6c79287061727469616c6c792e005d014e6f206d6f7265207468616e20606d61785f776569676874602077696c6c206265207573656420696e2069747320617474656d7074656420657865637574696f6e2e2049662074686973206973206c657373207468616e4101746865206d6178696d756d20616d6f756e74206f6620776569676874207468617420746865206d65737361676520636f756c642074616b6520746f2062652065786563757465642c207468656e206e6f7c657865637574696f6e20617474656d70742077696c6c206265206d6164652e0049015741524e494e473a20444550524543415445442e206065786563757465602077696c6c2062652072656d6f766564206166746572204a756e6520323032342e205573652060657865637574655f626c6f626020696e73746561642e44666f7263655f78636d5f76657273696f6e0801206c6f636174696f6ebc0134426f783c4c6f636174696f6e3e00011c76657273696f6e10012858636d56657273696f6e00041849014578746f6c6c2074686174206120706172746963756c61722064657374696e6174696f6e2063616e20626520636f6d6d756e6963617465642077697468207468726f756768206120706172746963756c61723c76657273696f6e206f662058434d2e00dc2d20606f726967696e603a204d75737420626520616e206f726967696e207370656369666965642062792041646d696e4f726967696e2ed82d20606c6f636174696f6e603a205468652064657374696e6174696f6e2074686174206973206265696e67206465736372696265642e11012d206078636d5f76657273696f6e603a20546865206c61746573742076657273696f6e206f662058434d207468617420606c6f636174696f6e6020737570706f7274732e64666f7263655f64656661756c745f78636d5f76657273696f6e0401446d617962655f78636d5f76657273696f6ed90201484f7074696f6e3c58636d56657273696f6e3e0005145901536574206120736166652058434d2076657273696f6e20287468652076657273696f6e20746861742058434d2073686f756c6420626520656e636f646564207769746820696620746865206d6f737420726563656e74b476657273696f6e20612064657374696e6174696f6e2063616e2061636365707420697320756e6b6e6f776e292e00dc2d20606f726967696e603a204d75737420626520616e206f726967696e207370656369666965642062792041646d696e4f726967696e2e39012d20606d617962655f78636d5f76657273696f6e603a205468652064656661756c742058434d20656e636f64696e672076657273696f6e2c206f7220604e6f6e656020746f2064697361626c652e78666f7263655f7375627363726962655f76657273696f6e5f6e6f746966790401206c6f636174696f6ed9010158426f783c56657273696f6e65644c6f636174696f6e3e000610390141736b2061206c6f636174696f6e20746f206e6f7469667920757320726567617264696e672074686569722058434d2076657273696f6e20616e6420616e79206368616e67657320746f2069742e00dc2d20606f726967696e603a204d75737420626520616e206f726967696e207370656369666965642062792041646d696e4f726967696e2e59012d20606c6f636174696f6e603a20546865206c6f636174696f6e20746f2077686963682077652073686f756c642073756273637269626520666f722058434d2076657273696f6e206e6f74696669636174696f6e732e80666f7263655f756e7375627363726962655f76657273696f6e5f6e6f746966790401206c6f636174696f6ed9010158426f783c56657273696f6e65644c6f636174696f6e3e0007184901526571756972652074686174206120706172746963756c61722064657374696e6174696f6e2073686f756c64206e6f206c6f6e676572206e6f7469667920757320726567617264696e6720616e792058434d4076657273696f6e206368616e6765732e00dc2d20606f726967696e603a204d75737420626520616e206f726967696e207370656369666965642062792041646d696e4f726967696e2e3d012d20606c6f636174696f6e603a20546865206c6f636174696f6e20746f207768696368207765206172652063757272656e746c79207375627363726962656420666f722058434d2076657273696f6ea820206e6f74696669636174696f6e73207768696368207765206e6f206c6f6e676572206465736972652e7c6c696d697465645f726573657276655f7472616e736665725f61737365747314011064657374d9010158426f783c56657273696f6e65644c6f636174696f6e3e00012c62656e6566696369617279d9010158426f783c56657273696f6e65644c6f636174696f6e3e00011861737365747375010150426f783c56657273696f6e65644173736574733e0001386665655f61737365745f6974656d10010c7533320001307765696768745f6c696d69747101012c5765696768744c696d69740008785d015472616e7366657220736f6d65206173736574732066726f6d20746865206c6f63616c20636861696e20746f207468652064657374696e6174696f6e20636861696e207468726f756768207468656972206c6f63616c2c7864657374696e6174696f6e206f722072656d6f746520726573657276652e003d016061737365747360206d75737420686176652073616d652072657365727665206c6f636174696f6e20616e64206d6179206e6f742062652074656c65706f727461626c6520746f206064657374602e4d01202d2060617373657473602068617665206c6f63616c20726573657276653a207472616e736665722061737365747320746f20736f7665726569676e206163636f756e74206f662064657374696e6174696f6e4d01202020636861696e20616e6420666f72776172642061206e6f74696669636174696f6e2058434d20746f2060646573746020746f206d696e7420616e64206465706f73697420726573657276652d62617365646c20202061737365747320746f206062656e6566696369617279602e5501202d20606173736574736020686176652064657374696e6174696f6e20726573657276653a206275726e206c6f63616c2061737365747320616e6420666f72776172642061206e6f74696669636174696f6e20746f590120202060646573746020636861696e20746f207769746864726177207468652072657365727665206173736574732066726f6d207468697320636861696e277320736f7665726569676e206163636f756e7420616e64842020206465706f736974207468656d20746f206062656e6566696369617279602e6101202d20606173736574736020686176652072656d6f746520726573657276653a206275726e206c6f63616c206173736574732c20666f72776172642058434d20746f207265736572766520636861696e20746f206d6f7665610120202072657365727665732066726f6d207468697320636861696e277320534120746f2060646573746020636861696e27732053412c20616e6420666f727761726420616e6f746865722058434d20746f20606465737460f4202020746f206d696e7420616e64206465706f73697420726573657276652d62617365642061737365747320746f206062656e6566696369617279602e005101466565207061796d656e74206f6e207468652064657374696e6174696f6e2073696465206973206d6164652066726f6d2074686520617373657420696e2074686520606173736574736020766563746f72206f666101696e64657820606665655f61737365745f6974656d602c20757020746f20656e6f75676820746f2070617920666f7220607765696768745f6c696d697460206f66207765696768742e204966206d6f72652077656967687459016973206e6565646564207468616e20607765696768745f6c696d6974602c207468656e20746865206f7065726174696f6e2077696c6c206661696c20616e64207468652073656e7420617373657473206d6179206265206174207269736b2e0029012d20606f726967696e603a204d7573742062652063617061626c65206f66207769746864726177696e672074686520606173736574736020616e6420657865637574696e672058434d2e25012d206064657374603a2044657374696e6174696f6e20636f6e7465787420666f7220746865206173736574732e2057696c6c207479706963616c6c7920626520605b506172656e742c6101202050617261636861696e282e2e295d6020746f2073656e642066726f6d2070617261636861696e20746f2070617261636861696e2c206f7220605b50617261636861696e282e2e295d6020746f2073656e642066726f6d54202072656c617920746f2070617261636861696e2e55012d206062656e6566696369617279603a20412062656e6566696369617279206c6f636174696f6e20666f72207468652061737365747320696e2074686520636f6e74657874206f66206064657374602e2057696c6c98202067656e6572616c6c7920626520616e20604163636f756e7449643332602076616c75652e59012d2060617373657473603a205468652061737365747320746f2062652077697468647261776e2e20546869732073686f756c6420696e636c7564652074686520617373657473207573656420746f2070617920746865c82020666565206f6e20746865206064657374602028616e6420706f737369626c7920726573657276652920636861696e732e4d012d20606665655f61737365745f6974656d603a2054686520696e64657820696e746f206061737365747360206f6620746865206974656d2077686963682073686f756c64206265207573656420746f207061791c2020666565732e45012d20607765696768745f6c696d6974603a205468652072656d6f74652d7369646520776569676874206c696d69742c20696620616e792c20666f72207468652058434d206665652070757263686173652e5c6c696d697465645f74656c65706f72745f61737365747314011064657374d9010158426f783c56657273696f6e65644c6f636174696f6e3e00012c62656e6566696369617279d9010158426f783c56657273696f6e65644c6f636174696f6e3e00011861737365747375010150426f783c56657273696f6e65644173736574733e0001386665655f61737365745f6974656d10010c7533320001307765696768745f6c696d69747101012c5765696768744c696d6974000948110154656c65706f727420736f6d65206173736574732066726f6d20746865206c6f63616c20636861696e20746f20736f6d652064657374696e6174696f6e20636861696e2e005101466565207061796d656e74206f6e207468652064657374696e6174696f6e2073696465206973206d6164652066726f6d2074686520617373657420696e2074686520606173736574736020766563746f72206f666101696e64657820606665655f61737365745f6974656d602c20757020746f20656e6f75676820746f2070617920666f7220607765696768745f6c696d697460206f66207765696768742e204966206d6f72652077656967687459016973206e6565646564207468616e20607765696768745f6c696d6974602c207468656e20746865206f7065726174696f6e2077696c6c206661696c20616e64207468652073656e7420617373657473206d6179206265206174207269736b2e0029012d20606f726967696e603a204d7573742062652063617061626c65206f66207769746864726177696e672074686520606173736574736020616e6420657865637574696e672058434d2e25012d206064657374603a2044657374696e6174696f6e20636f6e7465787420666f7220746865206173736574732e2057696c6c207479706963616c6c7920626520605b506172656e742c6101202050617261636861696e282e2e295d6020746f2073656e642066726f6d2070617261636861696e20746f2070617261636861696e2c206f7220605b50617261636861696e282e2e295d6020746f2073656e642066726f6d54202072656c617920746f2070617261636861696e2e55012d206062656e6566696369617279603a20412062656e6566696369617279206c6f636174696f6e20666f72207468652061737365747320696e2074686520636f6e74657874206f66206064657374602e2057696c6c98202067656e6572616c6c7920626520616e20604163636f756e7449643332602076616c75652e59012d2060617373657473603a205468652061737365747320746f2062652077697468647261776e2e20546869732073686f756c6420696e636c7564652074686520617373657473207573656420746f2070617920746865682020666565206f6e207468652060646573746020636861696e2e4d012d20606665655f61737365745f6974656d603a2054686520696e64657820696e746f206061737365747360206f6620746865206974656d2077686963682073686f756c64206265207573656420746f207061791c2020666565732e45012d20607765696768745f6c696d6974603a205468652072656d6f74652d7369646520776569676874206c696d69742c20696620616e792c20666f72207468652058434d206665652070757263686173652e40666f7263655f73757370656e73696f6e04012473757370656e646564200110626f6f6c000a10f4536574206f7220756e7365742074686520676c6f62616c2073757370656e73696f6e207374617465206f66207468652058434d206578656375746f722e00dc2d20606f726967696e603a204d75737420626520616e206f726967696e207370656369666965642062792041646d696e4f726967696e2ed02d206073757370656e646564603a2060747275656020746f2073757370656e642c206066616c73656020746f20726573756d652e3c7472616e736665725f61737365747314011064657374d9010158426f783c56657273696f6e65644c6f636174696f6e3e00012c62656e6566696369617279d9010158426f783c56657273696f6e65644c6f636174696f6e3e00011861737365747375010150426f783c56657273696f6e65644173736574733e0001386665655f61737365745f6974656d10010c7533320001307765696768745f6c696d69747101012c5765696768744c696d6974000b845d015472616e7366657220736f6d65206173736574732066726f6d20746865206c6f63616c20636861696e20746f207468652064657374696e6174696f6e20636861696e207468726f756768207468656972206c6f63616c2cd064657374696e6174696f6e206f722072656d6f746520726573657276652c206f72207468726f7567682074656c65706f7274732e005101466565207061796d656e74206f6e207468652064657374696e6174696f6e2073696465206973206d6164652066726f6d2074686520617373657420696e2074686520606173736574736020766563746f72206f663501696e64657820606665655f61737365745f6974656d60202868656e636520726566657272656420746f20617320606665657360292c20757020746f20656e6f75676820746f2070617920666f724101607765696768745f6c696d697460206f66207765696768742e204966206d6f726520776569676874206973206e6565646564207468616e20607765696768745f6c696d6974602c207468656e20746865dc6f7065726174696f6e2077696c6c206661696c20616e64207468652073656e7420617373657473206d6179206265206174207269736b2e006101606173736574736020286578636c7564696e672060666565736029206d75737420686176652073616d652072657365727665206c6f636174696f6e206f72206f74686572776973652062652074656c65706f727461626c65b0746f206064657374602c206e6f206c696d69746174696f6e7320696d706f736564206f6e206066656573602e4d01202d20666f72206c6f63616c20726573657276653a207472616e736665722061737365747320746f20736f7665726569676e206163636f756e74206f662064657374696e6174696f6e20636861696e20616e644d01202020666f72776172642061206e6f74696669636174696f6e2058434d20746f2060646573746020746f206d696e7420616e64206465706f73697420726573657276652d62617365642061737365747320746f442020206062656e6566696369617279602e6101202d20666f722064657374696e6174696f6e20726573657276653a206275726e206c6f63616c2061737365747320616e6420666f72776172642061206e6f74696669636174696f6e20746f2060646573746020636861696e5901202020746f207769746864726177207468652072657365727665206173736574732066726f6d207468697320636861696e277320736f7665726569676e206163636f756e7420616e64206465706f736974207468656d50202020746f206062656e6566696369617279602e5d01202d20666f722072656d6f746520726573657276653a206275726e206c6f63616c206173736574732c20666f72776172642058434d20746f207265736572766520636861696e20746f206d6f76652072657365727665735d0120202066726f6d207468697320636861696e277320534120746f2060646573746020636861696e27732053412c20616e6420666f727761726420616e6f746865722058434d20746f2060646573746020746f206d696e74d4202020616e64206465706f73697420726573657276652d62617365642061737365747320746f206062656e6566696369617279602e5101202d20666f722074656c65706f7274733a206275726e206c6f63616c2061737365747320616e6420666f72776172642058434d20746f2060646573746020636861696e20746f206d696e742f74656c65706f7274b020202061737365747320616e64206465706f736974207468656d20746f206062656e6566696369617279602e0029012d20606f726967696e603a204d7573742062652063617061626c65206f66207769746864726177696e672074686520606173736574736020616e6420657865637574696e672058434d2e2d012d206064657374603a2044657374696e6174696f6e20636f6e7465787420666f7220746865206173736574732e2057696c6c207479706963616c6c792062652060583228506172656e742c5501202050617261636861696e282e2e29296020746f2073656e642066726f6d2070617261636861696e20746f2070617261636861696e2c206f72206058312850617261636861696e282e2e29296020746f2073656e6468202066726f6d2072656c617920746f2070617261636861696e2e55012d206062656e6566696369617279603a20412062656e6566696369617279206c6f636174696f6e20666f72207468652061737365747320696e2074686520636f6e74657874206f66206064657374602e2057696c6c98202067656e6572616c6c7920626520616e20604163636f756e7449643332602076616c75652e59012d2060617373657473603a205468652061737365747320746f2062652077697468647261776e2e20546869732073686f756c6420696e636c7564652074686520617373657473207573656420746f2070617920746865c82020666565206f6e20746865206064657374602028616e6420706f737369626c7920726573657276652920636861696e732e4d012d20606665655f61737365745f6974656d603a2054686520696e64657820696e746f206061737365747360206f6620746865206974656d2077686963682073686f756c64206265207573656420746f207061791c2020666565732e45012d20607765696768745f6c696d6974603a205468652072656d6f74652d7369646520776569676874206c696d69742c20696620616e792c20666f72207468652058434d206665652070757263686173652e30636c61696d5f61737365747308011861737365747375010150426f783c56657273696f6e65644173736574733e00012c62656e6566696369617279d9010158426f783c56657273696f6e65644c6f636174696f6e3e000c185501436c61696d73206173736574732074726170706564206f6e20746869732070616c6c65742062656361757365206f66206c6566746f7665722061737365747320647572696e672058434d20657865637574696f6e2e00ac2d20606f726967696e603a20416e796f6e652063616e2063616c6c20746869732065787472696e7369632e5d012d2060617373657473603a20546865206578616374206173736574732074686174207765726520747261707065642e20557365207468652076657273696f6e20746f207370656369667920776861742076657273696f6e9877617320746865206c6174657374207768656e2074686579207765726520747261707065642e45012d206062656e6566696369617279603a20546865206c6f636174696f6e2f6163636f756e742077686572652074686520636c61696d6564206173736574732077696c6c206265206465706f73697465642e30657865637574655f626c6f6208013c656e636f6465645f6d65737361676561040184426f756e6465645665633c75382c204d617858636d456e636f64656453697a653e0001286d61785f776569676874280118576569676874000d28b04578656375746520616e2058434d2066726f6d2061206c6f63616c2c207369676e65642c206f726967696e2e004501416e206576656e74206973206465706f736974656420696e6469636174696e67207768657468657220746865206d65737361676520636f756c6420626520657865637574656420636f6d706c6574656c79486f72206f6e6c79207061727469616c6c792e005d014e6f206d6f7265207468616e20606d61785f776569676874602077696c6c206265207573656420696e2069747320617474656d7074656420657865637574696f6e2e2049662074686973206973206c657373207468616e4101746865206d6178696d756d20616d6f756e74206f6620776569676874207468617420746865206d65737361676520636f756c642074616b6520746f2062652065786563757465642c207468656e206e6f7c657865637574696f6e20617474656d70742077696c6c206265206d6164652e004501546865206d6573736167652069732070617373656420696e20656e636f6465642e204974206e6565647320746f206265206465636f6461626c652061732061205b6056657273696f6e656458636d605d2e2473656e645f626c6f6208011064657374d9010158426f783c56657273696f6e65644c6f636174696f6e3e00013c656e636f6465645f6d65737361676561040184426f756e6465645665633c75382c204d617858636d456e636f64656453697a653e000e18a453656e6420616e2058434d2066726f6d2061206c6f63616c2c207369676e65642c206f726967696e2e0055015468652064657374696e6174696f6e2c206064657374602c2077696c6c20726563656976652074686973206d65737361676520776974682061206044657363656e644f726967696e6020696e737472756374696f6e090174686174206d616b657320746865206f726967696e206f6620746865206d65737361676520626520746865206f726967696e206f6e20746869732073797374656d2e004501546865206d6573736167652069732070617373656420696e20656e636f6465642e204974206e6565647320746f206265206465636f6461626c652061732061205b6056657273696f6e656458636d605d2e040d01436f6e7461696e7320612076617269616e742070657220646973706174636861626c652065787472696e736963207468617420746869732070616c6c6574206861732ed103080c78636d3056657273696f6e656458636d042c52756e74696d6543616c6c00010c0856320400d503015076323a3a58636d3c52756e74696d6543616c6c3e00020008563304000104015076333a3a58636d3c52756e74696d6543616c6c3e00030008563404000501015076343a3a58636d3c52756e74696d6543616c6c3e00040000d5030c0c78636d0876320c58636d042c52756e74696d6543616c6c00000400d90301745665633c496e737472756374696f6e3c52756e74696d6543616c6c3e3e0000d903000002dd0300dd030c0c78636d0876322c496e737472756374696f6e042c52756e74696d6543616c6c000170345769746864726177417373657404007901012c4d756c7469417373657473000000545265736572766541737365744465706f736974656404007901012c4d756c7469417373657473000100585265636569766554656c65706f72746564417373657404007901012c4d756c7469417373657473000200345175657279526573706f6e73650c012071756572795f69642c011c51756572794964000120726573706f6e7365e1030120526573706f6e73650001286d61785f7765696768742c010c753634000300345472616e7366657241737365740801186173736574737901012c4d756c746941737365747300012c62656e6566696369617279890101344d756c74694c6f636174696f6e000400505472616e736665725265736572766541737365740c01186173736574737901012c4d756c746941737365747300011064657374890101344d756c74694c6f636174696f6e00010c78636dd503011c58636d3c28293e000500205472616e736163740c012c6f726967696e5f74797065590101284f726967696e4b696e64000158726571756972655f7765696768745f61745f6d6f73742c010c75363400011063616c6c5d010168446f75626c65456e636f6465643c52756e74696d6543616c6c3e0006006448726d704e65774368616e6e656c4f70656e526571756573740c011873656e646572cc010c7533320001406d61785f6d6573736167655f73697a65cc010c7533320001306d61785f6361706163697479cc010c7533320007004c48726d704368616e6e656c4163636570746564040124726563697069656e74cc010c7533320008004848726d704368616e6e656c436c6f73696e670c0124696e69746961746f72cc010c75333200011873656e646572cc010c753332000124726563697069656e74cc010c7533320009002c436c6561724f726967696e000a003444657363656e644f726967696e04008d010154496e746572696f724d756c74694c6f636174696f6e000b002c5265706f72744572726f720c012071756572795f69642c011c5175657279496400011064657374890101344d756c74694c6f636174696f6e00014c6d61785f726573706f6e73655f7765696768742c010c753634000c00304465706f73697441737365740c0118617373657473f10301404d756c7469417373657446696c7465720001286d61785f617373657473cc010c75333200012c62656e6566696369617279890101344d756c74694c6f636174696f6e000d004c4465706f736974526573657276654173736574100118617373657473f10301404d756c7469417373657446696c7465720001286d61785f617373657473cc010c75333200011064657374890101344d756c74694c6f636174696f6e00010c78636dd503011c58636d3c28293e000e003445786368616e6765417373657408011067697665f10301404d756c7469417373657446696c74657200011c726563656976657901012c4d756c7469417373657473000f005c496e6974696174655265736572766557697468647261770c0118617373657473f10301404d756c7469417373657446696c74657200011c72657365727665890101344d756c74694c6f636174696f6e00010c78636dd503011c58636d3c28293e00100040496e69746961746554656c65706f72740c0118617373657473f10301404d756c7469417373657446696c74657200011064657374890101344d756c74694c6f636174696f6e00010c78636dd503011c58636d3c28293e001100305175657279486f6c64696e6710012071756572795f69642c011c5175657279496400011064657374890101344d756c74694c6f636174696f6e000118617373657473f10301404d756c7469417373657446696c74657200014c6d61785f726573706f6e73655f7765696768742c010c75363400120030427579457865637574696f6e08011066656573810101284d756c746941737365740001307765696768745f6c696d6974fd03012c5765696768744c696d697400130034526566756e64537572706c75730014003c5365744572726f7248616e646c65720400d503014058636d3c52756e74696d6543616c6c3e0015002c536574417070656e6469780400d503014058636d3c52756e74696d6543616c6c3e00160028436c6561724572726f7200170028436c61696d41737365740801186173736574737901012c4d756c74694173736574730001187469636b6574890101344d756c74694c6f636174696f6e001800105472617004002c010c7536340019004053756273637269626556657273696f6e08012071756572795f69642c011c5175657279496400014c6d61785f726573706f6e73655f7765696768742c010c753634001a0048556e73756273637269626556657273696f6e001b0000e1030c0c78636d08763220526573706f6e7365000110104e756c6c0000001841737365747304007901012c4d756c74694173736574730001003c457865637574696f6e526573756c740400e50301504f7074696f6e3c287533322c204572726f72293e0002001c56657273696f6e040010013873757065723a3a56657273696f6e00030000e50304184f7074696f6e04045401e9030108104e6f6e6500000010536f6d650400e9030000010000e9030000040810ed0300ed03100c78636d08763218747261697473144572726f72000168204f766572666c6f7700000034556e696d706c656d656e74656400010060556e74727573746564526573657276654c6f636174696f6e00020064556e7472757374656454656c65706f72744c6f636174696f6e000300444d756c74694c6f636174696f6e46756c6c000400684d756c74694c6f636174696f6e4e6f74496e7665727469626c65000500244261644f726967696e0006003c496e76616c69644c6f636174696f6e0007003441737365744e6f74466f756e64000800544661696c6564546f5472616e7361637441737365740009003c4e6f74576974686472617761626c65000a00484c6f636174696f6e43616e6e6f74486f6c64000b0054457863656564734d61784d65737361676553697a65000c005844657374696e6174696f6e556e737570706f72746564000d00245472616e73706f7274000e0028556e726f757461626c65000f0030556e6b6e6f776e436c61696d001000384661696c6564546f4465636f6465001100404d6178576569676874496e76616c6964001200384e6f74486f6c64696e674665657300130030546f6f457870656e736976650014001054726170040030010c7536340015004c556e68616e646c656458636d56657273696f6e001600485765696768744c696d69745265616368656404003001185765696768740017001c426172726965720018004c5765696768744e6f74436f6d70757461626c6500190000f103100c78636d087632286d756c74696173736574404d756c7469417373657446696c74657200010820446566696e69746504007901012c4d756c74694173736574730000001057696c640400f503013857696c644d756c7469417373657400010000f503100c78636d087632286d756c746961737365743857696c644d756c746941737365740001080c416c6c00000014416c6c4f6608010869648501011c4173736574496400010c66756ef903013c57696c6446756e676962696c69747900010000f903100c78636d087632286d756c746961737365743c57696c6446756e676962696c6974790001082046756e6769626c650000002c4e6f6e46756e6769626c6500010000fd030c0c78636d0876322c5765696768744c696d697400010824556e6c696d697465640000001c4c696d6974656404002c010c7536340001000001040c0c78636d0876330c58636d041043616c6c00000400050401585665633c496e737472756374696f6e3c43616c6c3e3e0000050400000209040009040c0c78636d0876332c496e737472756374696f6e041043616c6c0001c034576974686472617741737365740400ad01012c4d756c7469417373657473000000545265736572766541737365744465706f73697465640400ad01012c4d756c7469417373657473000100585265636569766554656c65706f7274656441737365740400ad01012c4d756c7469417373657473000200345175657279526573706f6e736510012071756572795f69642c011c51756572794964000120726573706f6e73650d040120526573706f6e73650001286d61785f77656967687428011857656967687400011c71756572696572210401544f7074696f6e3c4d756c74694c6f636174696f6e3e000300345472616e736665724173736574080118617373657473ad01012c4d756c746941737365747300012c62656e6566696369617279bd0101344d756c74694c6f636174696f6e000400505472616e736665725265736572766541737365740c0118617373657473ad01012c4d756c746941737365747300011064657374bd0101344d756c74694c6f636174696f6e00010c78636d0104011c58636d3c28293e000500205472616e736163740c012c6f726967696e5f6b696e64590101284f726967696e4b696e64000158726571756972655f7765696768745f61745f6d6f737428011857656967687400011063616c6c5d01014c446f75626c65456e636f6465643c43616c6c3e0006006448726d704e65774368616e6e656c4f70656e526571756573740c011873656e646572cc010c7533320001406d61785f6d6573736167655f73697a65cc010c7533320001306d61785f6361706163697479cc010c7533320007004c48726d704368616e6e656c4163636570746564040124726563697069656e74cc010c7533320008004848726d704368616e6e656c436c6f73696e670c0124696e69746961746f72cc010c75333200011873656e646572cc010c753332000124726563697069656e74cc010c7533320009002c436c6561724f726967696e000a003444657363656e644f726967696e0400c1010154496e746572696f724d756c74694c6f636174696f6e000b002c5265706f72744572726f720400250401445175657279526573706f6e7365496e666f000c00304465706f7369744173736574080118617373657473290401404d756c7469417373657446696c74657200012c62656e6566696369617279bd0101344d756c74694c6f636174696f6e000d004c4465706f7369745265736572766541737365740c0118617373657473290401404d756c7469417373657446696c74657200011064657374bd0101344d756c74694c6f636174696f6e00010c78636d0104011c58636d3c28293e000e003445786368616e676541737365740c011067697665290401404d756c7469417373657446696c74657200011077616e74ad01012c4d756c746941737365747300011c6d6178696d616c200110626f6f6c000f005c496e6974696174655265736572766557697468647261770c0118617373657473290401404d756c7469417373657446696c74657200011c72657365727665bd0101344d756c74694c6f636174696f6e00010c78636d0104011c58636d3c28293e00100040496e69746961746554656c65706f72740c0118617373657473290401404d756c7469417373657446696c74657200011064657374bd0101344d756c74694c6f636174696f6e00010c78636d0104011c58636d3c28293e001100345265706f7274486f6c64696e67080134726573706f6e73655f696e666f250401445175657279526573706f6e7365496e666f000118617373657473290401404d756c7469417373657446696c74657200120030427579457865637574696f6e08011066656573b50101284d756c746941737365740001307765696768745f6c696d69747101012c5765696768744c696d697400130034526566756e64537572706c75730014003c5365744572726f7248616e646c657204000104012458636d3c43616c6c3e0015002c536574417070656e64697804000104012458636d3c43616c6c3e00160028436c6561724572726f7200170028436c61696d4173736574080118617373657473ad01012c4d756c74694173736574730001187469636b6574bd0101344d756c74694c6f636174696f6e001800105472617004002c010c7536340019004053756273637269626556657273696f6e08012071756572795f69642c011c5175657279496400014c6d61785f726573706f6e73655f776569676874280118576569676874001a0048556e73756273637269626556657273696f6e001b00244275726e41737365740400ad01012c4d756c7469417373657473001c002c45787065637441737365740400ad01012c4d756c7469417373657473001d00304578706563744f726967696e0400210401544f7074696f6e3c4d756c74694c6f636174696f6e3e001e002c4578706563744572726f720400350101504f7074696f6e3c287533322c204572726f72293e001f00504578706563745472616e7361637453746174757304004d0101384d617962654572726f72436f64650020002c517565727950616c6c657408012c6d6f64756c655f6e616d6538011c5665633c75383e000134726573706f6e73655f696e666f250401445175657279526573706f6e7365496e666f0021003045787065637450616c6c6574140114696e646578cc010c7533320001106e616d6538011c5665633c75383e00012c6d6f64756c655f6e616d6538011c5665633c75383e00012c63726174655f6d616a6f72cc010c75333200013c6d696e5f63726174655f6d696e6f72cc010c753332002200505265706f72745472616e736163745374617475730400250401445175657279526573706f6e7365496e666f0023004c436c6561725472616e736163745374617475730024003c556e6976657273616c4f726967696e0400c50101204a756e6374696f6e002500344578706f72744d6573736167650c011c6e6574776f726bcd0101244e6574776f726b496400012c64657374696e6174696f6ec1010154496e746572696f724d756c74694c6f636174696f6e00010c78636d0104011c58636d3c28293e002600244c6f636b41737365740801146173736574b50101284d756c74694173736574000120756e6c6f636b6572bd0101344d756c74694c6f636174696f6e0027002c556e6c6f636b41737365740801146173736574b50101284d756c74694173736574000118746172676574bd0101344d756c74694c6f636174696f6e002800384e6f7465556e6c6f636b61626c650801146173736574b50101284d756c746941737365740001146f776e6572bd0101344d756c74694c6f636174696f6e0029003452657175657374556e6c6f636b0801146173736574b50101284d756c746941737365740001186c6f636b6572bd0101344d756c74694c6f636174696f6e002a002c536574466565734d6f64650401306a69745f7769746864726177200110626f6f6c002b0020536574546f70696304000401205b75383b2033325d002c0028436c656172546f706963002d002c416c6961734f726967696e0400bd0101344d756c74694c6f636174696f6e002e003c556e70616964457865637574696f6e0801307765696768745f6c696d69747101012c5765696768744c696d6974000130636865636b5f6f726967696e210401544f7074696f6e3c4d756c74694c6f636174696f6e3e002f00000d040c0c78636d08763320526573706f6e7365000118104e756c6c000000184173736574730400ad01012c4d756c74694173736574730001003c457865637574696f6e526573756c740400350101504f7074696f6e3c287533322c204572726f72293e0002001c56657273696f6e040010013873757065723a3a56657273696f6e0003002c50616c6c657473496e666f040011040198426f756e6465645665633c50616c6c6574496e666f2c204d617850616c6c657473496e666f3e000400384469737061746368526573756c7404004d0101384d617962654572726f72436f64650005000011040c4c626f756e6465645f636f6c6c656374696f6e732c626f756e6465645f76656328426f756e6465645665630804540115040453000004001d0401185665633c543e000015040c0c78636d0876332850616c6c6574496e666f0000180114696e646578cc010c7533320001106e616d6519040180426f756e6465645665633c75382c204d617850616c6c65744e616d654c656e3e00012c6d6f64756c655f6e616d6519040180426f756e6465645665633c75382c204d617850616c6c65744e616d654c656e3e0001146d616a6f72cc010c7533320001146d696e6f72cc010c7533320001147061746368cc010c753332000019040c4c626f756e6465645f636f6c6c656374696f6e732c626f756e6465645f76656328426f756e64656456656308045401080453000004003801185665633c543e00001d04000002150400210404184f7074696f6e04045401bd010108104e6f6e6500000010536f6d650400bd01000001000025040c0c78636d087633445175657279526573706f6e7365496e666f00000c012c64657374696e6174696f6ebd0101344d756c74694c6f636174696f6e00012071756572795f69642c011c517565727949640001286d61785f77656967687428011857656967687400002904100c78636d087633286d756c74696173736574404d756c7469417373657446696c74657200010820446566696e6974650400ad01012c4d756c74694173736574730000001057696c6404002d04013857696c644d756c74694173736574000100002d04100c78636d087633286d756c746961737365743857696c644d756c746941737365740001100c416c6c00000014416c6c4f660801086964b901011c4173736574496400010c66756e3104013c57696c6446756e676962696c69747900010028416c6c436f756e7465640400cc010c75333200020030416c6c4f66436f756e7465640c01086964b901011c4173736574496400010c66756e3104013c57696c6446756e676962696c697479000114636f756e74cc010c753332000300003104100c78636d087633286d756c746961737365743c57696c6446756e676962696c6974790001082046756e6769626c650000002c4e6f6e46756e6769626c65000100003504080c78636d3056657273696f6e656458636d042c52756e74696d6543616c6c00010c08563204003904015076323a3a58636d3c52756e74696d6543616c6c3e00020008563304004904015076333a3a58636d3c52756e74696d6543616c6c3e00030008563404005504015076343a3a58636d3c52756e74696d6543616c6c3e0004000039040c0c78636d0876320c58636d042c52756e74696d6543616c6c000004003d0401745665633c496e737472756374696f6e3c52756e74696d6543616c6c3e3e00003d0400000241040041040c0c78636d0876322c496e737472756374696f6e042c52756e74696d6543616c6c000170345769746864726177417373657404007901012c4d756c7469417373657473000000545265736572766541737365744465706f736974656404007901012c4d756c7469417373657473000100585265636569766554656c65706f72746564417373657404007901012c4d756c7469417373657473000200345175657279526573706f6e73650c012071756572795f69642c011c51756572794964000120726573706f6e7365e1030120526573706f6e73650001286d61785f7765696768742c010c753634000300345472616e7366657241737365740801186173736574737901012c4d756c746941737365747300012c62656e6566696369617279890101344d756c74694c6f636174696f6e000400505472616e736665725265736572766541737365740c01186173736574737901012c4d756c746941737365747300011064657374890101344d756c74694c6f636174696f6e00010c78636dd503011c58636d3c28293e000500205472616e736163740c012c6f726967696e5f74797065590101284f726967696e4b696e64000158726571756972655f7765696768745f61745f6d6f73742c010c75363400011063616c6c45040168446f75626c65456e636f6465643c52756e74696d6543616c6c3e0006006448726d704e65774368616e6e656c4f70656e526571756573740c011873656e646572cc010c7533320001406d61785f6d6573736167655f73697a65cc010c7533320001306d61785f6361706163697479cc010c7533320007004c48726d704368616e6e656c4163636570746564040124726563697069656e74cc010c7533320008004848726d704368616e6e656c436c6f73696e670c0124696e69746961746f72cc010c75333200011873656e646572cc010c753332000124726563697069656e74cc010c7533320009002c436c6561724f726967696e000a003444657363656e644f726967696e04008d010154496e746572696f724d756c74694c6f636174696f6e000b002c5265706f72744572726f720c012071756572795f69642c011c5175657279496400011064657374890101344d756c74694c6f636174696f6e00014c6d61785f726573706f6e73655f7765696768742c010c753634000c00304465706f73697441737365740c0118617373657473f10301404d756c7469417373657446696c7465720001286d61785f617373657473cc010c75333200012c62656e6566696369617279890101344d756c74694c6f636174696f6e000d004c4465706f736974526573657276654173736574100118617373657473f10301404d756c7469417373657446696c7465720001286d61785f617373657473cc010c75333200011064657374890101344d756c74694c6f636174696f6e00010c78636dd503011c58636d3c28293e000e003445786368616e6765417373657408011067697665f10301404d756c7469417373657446696c74657200011c726563656976657901012c4d756c7469417373657473000f005c496e6974696174655265736572766557697468647261770c0118617373657473f10301404d756c7469417373657446696c74657200011c72657365727665890101344d756c74694c6f636174696f6e00010c78636dd503011c58636d3c28293e00100040496e69746961746554656c65706f72740c0118617373657473f10301404d756c7469417373657446696c74657200011064657374890101344d756c74694c6f636174696f6e00010c78636dd503011c58636d3c28293e001100305175657279486f6c64696e6710012071756572795f69642c011c5175657279496400011064657374890101344d756c74694c6f636174696f6e000118617373657473f10301404d756c7469417373657446696c74657200014c6d61785f726573706f6e73655f7765696768742c010c75363400120030427579457865637574696f6e08011066656573810101284d756c746941737365740001307765696768745f6c696d6974fd03012c5765696768744c696d697400130034526566756e64537572706c75730014003c5365744572726f7248616e646c657204003904014058636d3c52756e74696d6543616c6c3e0015002c536574417070656e64697804003904014058636d3c52756e74696d6543616c6c3e00160028436c6561724572726f7200170028436c61696d41737365740801186173736574737901012c4d756c74694173736574730001187469636b6574890101344d756c74694c6f636174696f6e001800105472617004002c010c7536340019004053756273637269626556657273696f6e08012071756572795f69642c011c5175657279496400014c6d61785f726573706f6e73655f7765696768742c010c753634001a0048556e73756273637269626556657273696f6e001b000045040c0c78636d38646f75626c655f656e636f64656434446f75626c65456e636f646564040454000004011c656e636f64656438011c5665633c75383e000049040c0c78636d0876330c58636d041043616c6c000004004d0401585665633c496e737472756374696f6e3c43616c6c3e3e00004d0400000251040051040c0c78636d0876332c496e737472756374696f6e041043616c6c0001c034576974686472617741737365740400ad01012c4d756c7469417373657473000000545265736572766541737365744465706f73697465640400ad01012c4d756c7469417373657473000100585265636569766554656c65706f7274656441737365740400ad01012c4d756c7469417373657473000200345175657279526573706f6e736510012071756572795f69642c011c51756572794964000120726573706f6e73650d040120526573706f6e73650001286d61785f77656967687428011857656967687400011c71756572696572210401544f7074696f6e3c4d756c74694c6f636174696f6e3e000300345472616e736665724173736574080118617373657473ad01012c4d756c746941737365747300012c62656e6566696369617279bd0101344d756c74694c6f636174696f6e000400505472616e736665725265736572766541737365740c0118617373657473ad01012c4d756c746941737365747300011064657374bd0101344d756c74694c6f636174696f6e00010c78636d0104011c58636d3c28293e000500205472616e736163740c012c6f726967696e5f6b696e64590101284f726967696e4b696e64000158726571756972655f7765696768745f61745f6d6f737428011857656967687400011063616c6c4504014c446f75626c65456e636f6465643c43616c6c3e0006006448726d704e65774368616e6e656c4f70656e526571756573740c011873656e646572cc010c7533320001406d61785f6d6573736167655f73697a65cc010c7533320001306d61785f6361706163697479cc010c7533320007004c48726d704368616e6e656c4163636570746564040124726563697069656e74cc010c7533320008004848726d704368616e6e656c436c6f73696e670c0124696e69746961746f72cc010c75333200011873656e646572cc010c753332000124726563697069656e74cc010c7533320009002c436c6561724f726967696e000a003444657363656e644f726967696e0400c1010154496e746572696f724d756c74694c6f636174696f6e000b002c5265706f72744572726f720400250401445175657279526573706f6e7365496e666f000c00304465706f7369744173736574080118617373657473290401404d756c7469417373657446696c74657200012c62656e6566696369617279bd0101344d756c74694c6f636174696f6e000d004c4465706f7369745265736572766541737365740c0118617373657473290401404d756c7469417373657446696c74657200011064657374bd0101344d756c74694c6f636174696f6e00010c78636d0104011c58636d3c28293e000e003445786368616e676541737365740c011067697665290401404d756c7469417373657446696c74657200011077616e74ad01012c4d756c746941737365747300011c6d6178696d616c200110626f6f6c000f005c496e6974696174655265736572766557697468647261770c0118617373657473290401404d756c7469417373657446696c74657200011c72657365727665bd0101344d756c74694c6f636174696f6e00010c78636d0104011c58636d3c28293e00100040496e69746961746554656c65706f72740c0118617373657473290401404d756c7469417373657446696c74657200011064657374bd0101344d756c74694c6f636174696f6e00010c78636d0104011c58636d3c28293e001100345265706f7274486f6c64696e67080134726573706f6e73655f696e666f250401445175657279526573706f6e7365496e666f000118617373657473290401404d756c7469417373657446696c74657200120030427579457865637574696f6e08011066656573b50101284d756c746941737365740001307765696768745f6c696d69747101012c5765696768744c696d697400130034526566756e64537572706c75730014003c5365744572726f7248616e646c657204004904012458636d3c43616c6c3e0015002c536574417070656e64697804004904012458636d3c43616c6c3e00160028436c6561724572726f7200170028436c61696d4173736574080118617373657473ad01012c4d756c74694173736574730001187469636b6574bd0101344d756c74694c6f636174696f6e001800105472617004002c010c7536340019004053756273637269626556657273696f6e08012071756572795f69642c011c5175657279496400014c6d61785f726573706f6e73655f776569676874280118576569676874001a0048556e73756273637269626556657273696f6e001b00244275726e41737365740400ad01012c4d756c7469417373657473001c002c45787065637441737365740400ad01012c4d756c7469417373657473001d00304578706563744f726967696e0400210401544f7074696f6e3c4d756c74694c6f636174696f6e3e001e002c4578706563744572726f720400350101504f7074696f6e3c287533322c204572726f72293e001f00504578706563745472616e7361637453746174757304004d0101384d617962654572726f72436f64650020002c517565727950616c6c657408012c6d6f64756c655f6e616d6538011c5665633c75383e000134726573706f6e73655f696e666f250401445175657279526573706f6e7365496e666f0021003045787065637450616c6c6574140114696e646578cc010c7533320001106e616d6538011c5665633c75383e00012c6d6f64756c655f6e616d6538011c5665633c75383e00012c63726174655f6d616a6f72cc010c75333200013c6d696e5f63726174655f6d696e6f72cc010c753332002200505265706f72745472616e736163745374617475730400250401445175657279526573706f6e7365496e666f0023004c436c6561725472616e736163745374617475730024003c556e6976657273616c4f726967696e0400c50101204a756e6374696f6e002500344578706f72744d6573736167650c011c6e6574776f726bcd0101244e6574776f726b496400012c64657374696e6174696f6ec1010154496e746572696f724d756c74694c6f636174696f6e00010c78636d0104011c58636d3c28293e002600244c6f636b41737365740801146173736574b50101284d756c74694173736574000120756e6c6f636b6572bd0101344d756c74694c6f636174696f6e0027002c556e6c6f636b41737365740801146173736574b50101284d756c74694173736574000118746172676574bd0101344d756c74694c6f636174696f6e002800384e6f7465556e6c6f636b61626c650801146173736574b50101284d756c746941737365740001146f776e6572bd0101344d756c74694c6f636174696f6e0029003452657175657374556e6c6f636b0801146173736574b50101284d756c746941737365740001186c6f636b6572bd0101344d756c74694c6f636174696f6e002a002c536574466565734d6f64650401306a69745f7769746864726177200110626f6f6c002b0020536574546f70696304000401205b75383b2033325d002c0028436c656172546f706963002d002c416c6961734f726967696e0400bd0101344d756c74694c6f636174696f6e002e003c556e70616964457865637574696f6e0801307765696768745f6c696d69747101012c5765696768744c696d6974000130636865636b5f6f726967696e210401544f7074696f6e3c4d756c74694c6f636174696f6e3e002f000055040c2c73746167696e675f78636d0876340c58636d041043616c6c00000400590401585665633c496e737472756374696f6e3c43616c6c3e3e000059040000025d04005d040c2c73746167696e675f78636d0876342c496e737472756374696f6e041043616c6c0001c03457697468647261774173736574040011010118417373657473000000545265736572766541737365744465706f7369746564040011010118417373657473000100585265636569766554656c65706f727465644173736574040011010118417373657473000200345175657279526573706f6e736510012071756572795f69642c011c51756572794964000120726573706f6e736531010120526573706f6e73650001286d61785f77656967687428011857656967687400011c71756572696572550101404f7074696f6e3c4c6f636174696f6e3e000300345472616e7366657241737365740801186173736574731101011841737365747300012c62656e6566696369617279bc01204c6f636174696f6e000400505472616e736665725265736572766541737365740c01186173736574731101011841737365747300011064657374bc01204c6f636174696f6e00010c78636d0501011c58636d3c28293e000500205472616e736163740c012c6f726967696e5f6b696e64590101284f726967696e4b696e64000158726571756972655f7765696768745f61745f6d6f737428011857656967687400011063616c6c4504014c446f75626c65456e636f6465643c43616c6c3e0006006448726d704e65774368616e6e656c4f70656e526571756573740c011873656e646572cc010c7533320001406d61785f6d6573736167655f73697a65cc010c7533320001306d61785f6361706163697479cc010c7533320007004c48726d704368616e6e656c4163636570746564040124726563697069656e74cc010c7533320008004848726d704368616e6e656c436c6f73696e670c0124696e69746961746f72cc010c75333200011873656e646572cc010c753332000124726563697069656e74cc010c7533320009002c436c6561724f726967696e000a003444657363656e644f726967696e0400c00140496e746572696f724c6f636174696f6e000b002c5265706f72744572726f720400610101445175657279526573706f6e7365496e666f000c00304465706f73697441737365740801186173736574736501012c417373657446696c74657200012c62656e6566696369617279bc01204c6f636174696f6e000d004c4465706f7369745265736572766541737365740c01186173736574736501012c417373657446696c74657200011064657374bc01204c6f636174696f6e00010c78636d0501011c58636d3c28293e000e003445786368616e676541737365740c0110676976656501012c417373657446696c74657200011077616e741101011841737365747300011c6d6178696d616c200110626f6f6c000f005c496e6974696174655265736572766557697468647261770c01186173736574736501012c417373657446696c74657200011c72657365727665bc01204c6f636174696f6e00010c78636d0501011c58636d3c28293e00100040496e69746961746554656c65706f72740c01186173736574736501012c417373657446696c74657200011064657374bc01204c6f636174696f6e00010c78636d0501011c58636d3c28293e001100345265706f7274486f6c64696e67080134726573706f6e73655f696e666f610101445175657279526573706f6e7365496e666f0001186173736574736501012c417373657446696c74657200120030427579457865637574696f6e080110666565731901011441737365740001307765696768745f6c696d69747101012c5765696768744c696d697400130034526566756e64537572706c75730014003c5365744572726f7248616e646c657204005504012458636d3c43616c6c3e0015002c536574417070656e64697804005504012458636d3c43616c6c3e00160028436c6561724572726f7200170028436c61696d4173736574080118617373657473110101184173736574730001187469636b6574bc01204c6f636174696f6e001800105472617004002c010c7536340019004053756273637269626556657273696f6e08012071756572795f69642c011c5175657279496400014c6d61785f726573706f6e73655f776569676874280118576569676874001a0048556e73756273637269626556657273696f6e001b00244275726e4173736574040011010118417373657473001c002c4578706563744173736574040011010118417373657473001d00304578706563744f726967696e0400550101404f7074696f6e3c4c6f636174696f6e3e001e002c4578706563744572726f720400350101504f7074696f6e3c287533322c204572726f72293e001f00504578706563745472616e7361637453746174757304004d0101384d617962654572726f72436f64650020002c517565727950616c6c657408012c6d6f64756c655f6e616d6538011c5665633c75383e000134726573706f6e73655f696e666f610101445175657279526573706f6e7365496e666f0021003045787065637450616c6c6574140114696e646578cc010c7533320001106e616d6538011c5665633c75383e00012c6d6f64756c655f6e616d6538011c5665633c75383e00012c63726174655f6d616a6f72cc010c75333200013c6d696e5f63726174655f6d696e6f72cc010c753332002200505265706f72745472616e736163745374617475730400610101445175657279526573706f6e7365496e666f0023004c436c6561725472616e736163745374617475730024003c556e6976657273616c4f726967696e0400c801204a756e6374696f6e002500344578706f72744d6573736167650c011c6e6574776f726bd401244e6574776f726b496400012c64657374696e6174696f6ec00140496e746572696f724c6f636174696f6e00010c78636d0501011c58636d3c28293e002600244c6f636b41737365740801146173736574190101144173736574000120756e6c6f636b6572bc01204c6f636174696f6e0027002c556e6c6f636b41737365740801146173736574190101144173736574000118746172676574bc01204c6f636174696f6e002800384e6f7465556e6c6f636b61626c6508011461737365741901011441737365740001146f776e6572bc01204c6f636174696f6e0029003452657175657374556e6c6f636b08011461737365741901011441737365740001186c6f636b6572bc01204c6f636174696f6e002a002c536574466565734d6f64650401306a69745f7769746864726177200110626f6f6c002b0020536574546f70696304000401205b75383b2033325d002c0028436c656172546f706963002d002c416c6961734f726967696e0400bc01204c6f636174696f6e002e003c556e70616964457865637574696f6e0801307765696768745f6c696d69747101012c5765696768744c696d6974000130636865636b5f6f726967696e550101404f7074696f6e3c4c6f636174696f6e3e002f000061040c4c626f756e6465645f636f6c6c656374696f6e732c626f756e6465645f76656328426f756e64656456656308045401080453000004003801185665633c543e000065040c4863756d756c75735f70616c6c65745f78636d1870616c6c65741043616c6c040454000100040d01436f6e7461696e7320612076617269616e742070657220646973706174636861626c652065787472696e736963207468617420746869732070616c6c6574206861732e69040c5070616c6c65745f6d6573736167655f71756575651870616c6c65741043616c6c04045400010824726561705f706167650801386d6573736167655f6f726967696ee50101484d6573736167654f726967696e4f663c543e000128706167655f696e64657810012450616765496e6465780000043d0152656d6f76652061207061676520776869636820686173206e6f206d6f7265206d657373616765732072656d61696e696e6720746f2062652070726f636573736564206f72206973207374616c652e48657865637574655f6f7665727765696768741001386d6573736167655f6f726967696ee50101484d6573736167654f726967696e4f663c543e0001107061676510012450616765496e646578000114696e64657810011c543a3a53697a650001307765696768745f6c696d6974280118576569676874000134784578656375746520616e206f766572776569676874206d6573736167652e004d0154656d706f726172792070726f63657373696e67206572726f72732077696c6c2062652070726f706167617465642077686572656173207065726d616e656e74206572726f7273206172652074726561746564546173207375636365737320636f6e646974696f6e2e00742d20606f726967696e603a204d75737420626520605369676e6564602e35012d20606d6573736167655f6f726967696e603a20546865206f726967696e2066726f6d20776869636820746865206d65737361676520746f20626520657865637574656420617272697665642e3d012d206070616765603a20546865207061676520696e2074686520717565756520696e20776869636820746865206d65737361676520746f2062652065786563757465642069732073697474696e672e09012d2060696e646578603a2054686520696e64657820696e746f20746865207175657565206f6620746865206d65737361676520746f2062652065786563757465642e59012d20607765696768745f6c696d6974603a20546865206d6178696d756d20616d6f756e74206f662077656967687420616c6c6f77656420746f20626520636f6e73756d656420696e2074686520657865637574696f6e4420206f6620746865206d6573736167652e00f442656e63686d61726b20636f6d706c657869747920636f6e73696465726174696f6e733a204f28696e646578202b207765696768745f6c696d6974292e040d01436f6e7461696e7320612076617269616e742070657220646973706174636861626c652065787472696e736963207468617420746869732070616c6c6574206861732e6d040c2c6f726d6c5f746f6b656e73186d6f64756c651043616c6c040454000114207472616e736665720c0110646573749d03018c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f7572636500012c63757272656e63795f6964300134543a3a43757272656e63794964000118616d6f756e74dc0128543a3a42616c616e6365000034d45472616e7366657220736f6d65206c697175696420667265652062616c616e636520746f20616e6f74686572206163636f756e742e000501607472616e73666572602077696c6c207365742074686520604672656542616c616e636560206f66207468652073656e64657220616e642072656365697665722ee049742077696c6c2064656372656173652074686520746f74616c2069737375616e6365206f66207468652073797374656d20627920746865fc605472616e73666572466565602e204966207468652073656e6465722773206163636f756e742069732062656c6f7720746865206578697374656e7469616c01016465706f736974206173206120726573756c74206f6620746865207472616e736665722c20746865206163636f756e742077696c6c206265207265617065642e00e4546865206469737061746368206f726967696e20666f7220746869732063616c6c206d75737420626520605369676e656460206279207468652c7472616e736163746f722e00a02d206064657374603a2054686520726563697069656e74206f6620746865207472616e736665722e7c2d206063757272656e63795f6964603a2063757272656e637920747970652eac2d2060616d6f756e74603a20667265652062616c616e636520616d6f756e7420746f207472616e6665722e307472616e736665725f616c6c0c0110646573749d03018c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f7572636500012c63757272656e63795f6964300134543a3a43757272656e637949640001286b6565705f616c697665200110626f6f6c00014cd05472616e7366657220616c6c2072656d61696e696e672062616c616e636520746f2074686520676976656e206163636f756e742e00f04e4f54453a20546869732066756e6374696f6e206f6e6c7920617474656d70747320746f207472616e73666572205f7472616e7366657261626c655ff862616c616e6365732e2054686973206d65616e73207468617420616e79206c6f636b65642c2072657365727665642c206f72206578697374656e7469616c09016465706f7369747320287768656e20606b6565705f616c6976656020697320607472756560292c2077696c6c206e6f74206265207472616e73666572726564206279fc746869732066756e6374696f6e2e20546f20656e73757265207468617420746869732066756e6374696f6e20726573756c747320696e2061206b696c6c6564f86163636f756e742c20796f75206d69676874206e65656420746f207072657061726520746865206163636f756e742062792072656d6f76696e6720616e79b07265666572656e636520636f756e746572732c2073746f72616765206465706f736974732c206574632e2e2e00e4546865206469737061746368206f726967696e20666f7220746869732063616c6c206d75737420626520605369676e656460206279207468652c7472616e736163746f722e00a02d206064657374603a2054686520726563697069656e74206f6620746865207472616e736665722e7c2d206063757272656e63795f6964603a2063757272656e637920747970652ef02d20606b6565705f616c697665603a204120626f6f6c65616e20746f2064657465726d696e652069662074686520607472616e736665725f616c6c60050120206f7065726174696f6e2073686f756c642073656e6420616c6c206f66207468652066756e647320746865206163636f756e74206861732c2063617573696e67050120207468652073656e646572206163636f756e7420746f206265206b696c6c6564202866616c7365292c206f72207472616e736665722065766572797468696e6709012020657863657074206174206c6561737420746865206578697374656e7469616c206465706f7369742c2077686963682077696c6c2067756172616e74656520746f9c20206b656570207468652073656e646572206163636f756e7420616c697665202874727565292e4c7472616e736665725f6b6565705f616c6976650c0110646573749d03018c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f7572636500012c63757272656e63795f6964300134543a3a43757272656e63794964000118616d6f756e74dc0128543a3a42616c616e636500022c050153616d6520617320746865205b607472616e73666572605d2063616c6c2c206275742077697468206120636865636b207468617420746865207472616e736665728477696c6c206e6f74206b696c6c20746865206f726967696e206163636f756e742e00b8393925206f66207468652074696d6520796f752077616e74205b607472616e73666572605d20696e73746561642e00e4546865206469737061746368206f726967696e20666f7220746869732063616c6c206d75737420626520605369676e656460206279207468652c7472616e736163746f722e00a02d206064657374603a2054686520726563697069656e74206f6620746865207472616e736665722e7c2d206063757272656e63795f6964603a2063757272656e637920747970652eac2d2060616d6f756e74603a20667265652062616c616e636520616d6f756e7420746f207472616e6665722e38666f7263655f7472616e73666572100118736f757263659d03018c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f75726365000110646573749d03018c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f7572636500012c63757272656e63795f6964300134543a3a43757272656e63794964000118616d6f756e74dc0128543a3a42616c616e6365000324110145786163746c7920617320607472616e73666572602c2065786365707420746865206f726967696e206d75737420626520726f6f7420616e642074686520736f75726365646163636f756e74206d6179206265207370656369666965642e00c4546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f526f6f745f2e009c2d2060736f75726365603a205468652073656e646572206f6620746865207472616e736665722ea02d206064657374603a2054686520726563697069656e74206f6620746865207472616e736665722e7c2d206063757272656e63795f6964603a2063757272656e637920747970652eac2d2060616d6f756e74603a20667265652062616c616e636520616d6f756e7420746f207472616e6665722e2c7365745f62616c616e636510010c77686f9d03018c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f7572636500012c63757272656e63795f6964300134543a3a43757272656e637949640001206e65775f66726565dc0128543a3a42616c616e63650001306e65775f7265736572766564dc0128543a3a42616c616e636500042090536574207468652062616c616e636573206f66206120676976656e206163636f756e742e000901546869732077696c6c20616c74657220604672656542616c616e63656020616e642060526573657276656442616c616e63656020696e2073746f726167652e206974cc77696c6c20616c736f2064656372656173652074686520746f74616c2069737375616e6365206f66207468652073797374656d0d012860546f74616c49737375616e636560292e20496620746865206e65772066726565206f722072657365727665642062616c616e63652069732062656c6f7720746865d06578697374656e7469616c206465706f7369742c2069742077696c6c20726561702074686520604163636f756e74496e666f602e00b0546865206469737061746368206f726967696e20666f7220746869732063616c6c2069732060726f6f74602e040d01436f6e7461696e7320612076617269616e742070657220646973706174636861626c652065787472696e736963207468617420746869732070616c6c6574206861732e71040c4c77657465655f6d6573736167655f71756575651870616c6c65741043616c6c04045400010824726561705f706167650801386d6573736167655f6f726967696ef90101484d6573736167654f726967696e4f663c543e000128706167655f696e64657810012450616765496e6465780000043d0152656d6f76652061207061676520776869636820686173206e6f206d6f7265206d657373616765732072656d61696e696e6720746f2062652070726f636573736564206f72206973207374616c652e48657865637574655f6f7665727765696768741001386d6573736167655f6f726967696ef90101484d6573736167654f726967696e4f663c543e0001107061676510012450616765496e646578000114696e64657810011c543a3a53697a650001307765696768745f6c696d6974280118576569676874000134784578656375746520616e206f766572776569676874206d6573736167652e004d0154656d706f726172792070726f63657373696e67206572726f72732077696c6c2062652070726f706167617465642077686572656173207065726d616e656e74206572726f7273206172652074726561746564546173207375636365737320636f6e646974696f6e2e00742d20606f726967696e603a204d75737420626520605369676e6564602e35012d20606d6573736167655f6f726967696e603a20546865206f726967696e2066726f6d20776869636820746865206d65737361676520746f20626520657865637574656420617272697665642e3d012d206070616765603a20546865207061676520696e2074686520717565756520696e20776869636820746865206d65737361676520746f2062652065786563757465642069732073697474696e672e09012d2060696e646578603a2054686520696e64657820696e746f20746865207175657565206f6620746865206d65737361676520746f2062652065786563757465642e59012d20607765696768745f6c696d6974603a20546865206d6178696d756d20616d6f756e74206f662077656967687420616c6c6f77656420746f20626520636f6e73756d656420696e2074686520657865637574696f6e4420206f6620746865206d6573736167652e00f442656e63686d61726b20636f6d706c657869747920636f6e73696465726174696f6e733a204f28696e646578202b207765696768745f6c696d6974292e040d01436f6e7461696e7320612076617269616e742070657220646973706174636861626c652065787472696e736963207468617420746869732070616c6c6574206861732e75040c3870616c6c65745f7574696c6974791870616c6c65741043616c6c04045400011814626174636804011463616c6c737904017c5665633c3c5420617320436f6e6669673e3a3a52756e74696d6543616c6c3e0000487c53656e642061206261746368206f662064697370617463682063616c6c732e00b04d61792062652063616c6c65642066726f6d20616e79206f726967696e2065786365707420604e6f6e65602e005d012d206063616c6c73603a205468652063616c6c7320746f20626520646973706174636865642066726f6d207468652073616d65206f726967696e2e20546865206e756d626572206f662063616c6c206d757374206e6f74390120206578636565642074686520636f6e7374616e743a2060626174636865645f63616c6c735f6c696d6974602028617661696c61626c6520696e20636f6e7374616e74206d65746164617461292e0055014966206f726967696e20697320726f6f74207468656e207468652063616c6c7320617265206469737061746368656420776974686f757420636865636b696e67206f726967696e2066696c7465722e202854686973ec696e636c7564657320627970617373696e6720606672616d655f73797374656d3a3a436f6e6669673a3a4261736543616c6c46696c74657260292e0034232320436f6d706c6578697479d02d204f284329207768657265204320697320746865206e756d626572206f662063616c6c7320746f20626520626174636865642e005501546869732077696c6c2072657475726e20604f6b6020696e20616c6c2063697263756d7374616e6365732e20546f2064657465726d696e65207468652073756363657373206f66207468652062617463682c20616e31016576656e74206973206465706f73697465642e20496620612063616c6c206661696c656420616e64207468652062617463682077617320696e7465727275707465642c207468656e207468655501604261746368496e74657272757074656460206576656e74206973206465706f73697465642c20616c6f6e67207769746820746865206e756d626572206f66207375636365737366756c2063616c6c73206d6164654d01616e6420746865206572726f72206f6620746865206661696c65642063616c6c2e20496620616c6c2077657265207375636365737366756c2c207468656e2074686520604261746368436f6d706c65746564604c6576656e74206973206465706f73697465642e3461735f64657269766174697665080114696e646578a502010c75313600011063616c6cb503017c426f783c3c5420617320436f6e6669673e3a3a52756e74696d6543616c6c3e000134dc53656e6420612063616c6c207468726f75676820616e20696e64657865642070736575646f6e796d206f66207468652073656e6465722e00550146696c7465722066726f6d206f726967696e206172652070617373656420616c6f6e672e205468652063616c6c2077696c6c2062652064697370617463686564207769746820616e206f726967696e207768696368bc757365207468652073616d652066696c74657220617320746865206f726967696e206f6620746869732063616c6c2e0045014e4f54453a20496620796f75206e65656420746f20656e73757265207468617420616e79206163636f756e742d62617365642066696c746572696e67206973206e6f7420686f6e6f7265642028692e652e61016265636175736520796f7520657870656374206070726f78796020746f2068617665206265656e2075736564207072696f7220696e207468652063616c6c20737461636b20616e6420796f7520646f206e6f742077616e7451017468652063616c6c207265737472696374696f6e7320746f206170706c7920746f20616e79207375622d6163636f756e7473292c207468656e20757365206061735f6d756c74695f7468726573686f6c645f31607c696e20746865204d756c74697369672070616c6c657420696e73746561642e00f44e4f54453a205072696f7220746f2076657273696f6e202a31322c2074686973207761732063616c6c6564206061735f6c696d697465645f737562602e00cc546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e2462617463685f616c6c04011463616c6c737904017c5665633c3c5420617320436f6e6669673e3a3a52756e74696d6543616c6c3e000234ec53656e642061206261746368206f662064697370617463682063616c6c7320616e642061746f6d6963616c6c792065786563757465207468656d2e21015468652077686f6c65207472616e73616374696f6e2077696c6c20726f6c6c6261636b20616e64206661696c20696620616e79206f66207468652063616c6c73206661696c65642e00b04d61792062652063616c6c65642066726f6d20616e79206f726967696e2065786365707420604e6f6e65602e005d012d206063616c6c73603a205468652063616c6c7320746f20626520646973706174636865642066726f6d207468652073616d65206f726967696e2e20546865206e756d626572206f662063616c6c206d757374206e6f74390120206578636565642074686520636f6e7374616e743a2060626174636865645f63616c6c735f6c696d6974602028617661696c61626c6520696e20636f6e7374616e74206d65746164617461292e0055014966206f726967696e20697320726f6f74207468656e207468652063616c6c7320617265206469737061746368656420776974686f757420636865636b696e67206f726967696e2066696c7465722e202854686973ec696e636c7564657320627970617373696e6720606672616d655f73797374656d3a3a436f6e6669673a3a4261736543616c6c46696c74657260292e0034232320436f6d706c6578697479d02d204f284329207768657265204320697320746865206e756d626572206f662063616c6c7320746f20626520626174636865642e2c64697370617463685f617308012461735f6f726967696e7d040154426f783c543a3a50616c6c6574734f726967696e3e00011063616c6cb503017c426f783c3c5420617320436f6e6669673e3a3a52756e74696d6543616c6c3e000318c84469737061746368657320612066756e6374696f6e2063616c6c207769746820612070726f7669646564206f726967696e2e00c4546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f526f6f745f2e0034232320436f6d706c65786974791c2d204f2831292e2c666f7263655f626174636804011463616c6c737904017c5665633c3c5420617320436f6e6669673e3a3a52756e74696d6543616c6c3e0004347c53656e642061206261746368206f662064697370617463682063616c6c732ed4556e6c696b6520606261746368602c20697420616c6c6f7773206572726f727320616e6420776f6e277420696e746572727570742e00b04d61792062652063616c6c65642066726f6d20616e79206f726967696e2065786365707420604e6f6e65602e005d012d206063616c6c73603a205468652063616c6c7320746f20626520646973706174636865642066726f6d207468652073616d65206f726967696e2e20546865206e756d626572206f662063616c6c206d757374206e6f74390120206578636565642074686520636f6e7374616e743a2060626174636865645f63616c6c735f6c696d6974602028617661696c61626c6520696e20636f6e7374616e74206d65746164617461292e004d014966206f726967696e20697320726f6f74207468656e207468652063616c6c732061726520646973706174636820776974686f757420636865636b696e67206f726967696e2066696c7465722e202854686973ec696e636c7564657320627970617373696e6720606672616d655f73797374656d3a3a436f6e6669673a3a4261736543616c6c46696c74657260292e0034232320436f6d706c6578697479d02d204f284329207768657265204320697320746865206e756d626572206f662063616c6c7320746f20626520626174636865642e2c776974685f77656967687408011063616c6cb503017c426f783c3c5420617320436f6e6669673e3a3a52756e74696d6543616c6c3e000118776569676874280118576569676874000518c4446973706174636820612066756e6374696f6e2063616c6c2077697468206120737065636966696564207765696768742e002d01546869732066756e6374696f6e20646f6573206e6f7420636865636b2074686520776569676874206f66207468652063616c6c2c20616e6420696e737465616420616c6c6f777320746865b8526f6f74206f726967696e20746f20737065636966792074686520776569676874206f66207468652063616c6c2e00c4546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f526f6f745f2e040d01436f6e7461696e7320612076617269616e742070657220646973706174636861626c652065787472696e736963207468617420746869732070616c6c6574206861732e7904000002b503007d04085c70617261636861696e5f77657465655f72756e74696d65304f726967696e43616c6c65720001101873797374656d0400810401746672616d655f73797374656d3a3a4f726967696e3c52756e74696d653e0000002c506f6c6b61646f7458636d04008504014870616c6c65745f78636d3a3a4f726967696e001f002843756d756c757358636d04008904016863756d756c75735f70616c6c65745f78636d3a3a4f726967696e00200010566f696404008d0401410173656c663a3a73705f6170695f68696464656e5f696e636c756465735f636f6e7374727563745f72756e74696d653a3a68696464656e5f696e636c7564653a3a0a5f5f707269766174653a3a566f69640003000081040c346672616d655f737570706f7274206469737061746368245261774f726967696e04244163636f756e7449640100010c10526f6f74000000185369676e656404000001244163636f756e744964000100104e6f6e650002000085040c2870616c6c65745f78636d1870616c6c6574184f726967696e0001080c58636d0400bc01204c6f636174696f6e00000020526573706f6e73650400bc01204c6f636174696f6e0001000089040c4863756d756c75735f70616c6c65745f78636d1870616c6c6574184f726967696e0001081452656c6179000000405369626c696e6750617261636861696e0400e9010118506172614964000100008d04081c73705f636f726510566f69640001000091040c2477657465655f6f72671870616c6c65741043616c6c040454000120286372656174655f64616f2401106e616d6538011c5665633c75383e0001106465736338011c5665633c75383e00011c707572706f736538011c5665633c75383e0001246d6574615f6461746138011c5665633c75383e000118696d5f61706938011c5665633c75383e000108626738011c5665633c75383e0001106c6f676f38011c5665633c75383e00010c696d6738011c5665633c75383e000120686f6d655f75726c38011c5665633c75383e0001083043726561746520612044414f94e4bb8ee4b880e4b8aae9809ae8af81e6b1a02ce5889be5bbbae4b880e4b8aae7bb84e7bb87287570646174655f64616f2c011864616f5f696430012844616f417373657449640001106e616d659504013c4f7074696f6e3c5665633c75383e3e000110646573639504013c4f7074696f6e3c5665633c75383e3e00011c707572706f73659504013c4f7074696f6e3c5665633c75383e3e0001246d6574615f646174619504013c4f7074696f6e3c5665633c75383e3e000118696d5f6170699504013c4f7074696f6e3c5665633c75383e3e00010862679504013c4f7074696f6e3c5665633c75383e3e0001106c6f676f9504013c4f7074696f6e3c5665633c75383e3e00010c696d679504013c4f7074696f6e3c5665633c75383e3e000120686f6d655f75726c9504013c4f7074696f6e3c5665633c75383e3e000118737461747573990401384f7074696f6e3c5374617475733e0008083c7570646174652064616f20696e666f48e69bb4e696b0e7bb84e7bb87e4bfa1e681af4c6372656174655f726f61646d61705f7461736b14011864616f5f696430012844616f41737365744964000128726f61646d61705f696410010c7533320001106e616d6538011c5665633c75383e0001207072696f726974790801087538000110746167739504013c4f7074696f6e3c5665633c75383e3e0002082c637265617465207461736b30e5889be5bbbae4bbbbe58aa14c7570646174655f726f61646d61705f7461736b18011864616f5f696430012844616f41737365744964000128726f61646d61705f696410010c75333200011c7461736b5f69643001185461736b49640001207072696f7269747908010875380001187374617475730801087538000110746167739504013c4f7074696f6e3c5665633c75383e3e0003082c757064617465207461736b30e69bb4e696b0e4bbbbe58aa1286372656174655f6170701001106e616d6538011c5665633c75383e0001106465736338011c5665633c75383e00011069636f6e38011c5665633c75383e00010c75726c38011c5665633c75383e000408286372656174652061707024e5889be5bbba415050447570646174655f6170705f7374617475730801186170705f696430012844616f417373657449640001187374617475739d0401185374617475730005084475706461746520617070207374617475733ce69bb4e696b0415050e78ab6e68081446f72675f696e746567726174655f61707008011864616f5f696430012844616f417373657449640001186170705f696430012844616f41737365744964000608446f726720696e746567726174652061707048e7bb84e7bb87e99b86e68890e5ba94e794a8547570646174655f6f72675f6170705f7374617475730c011864616f5f696430012844616f417373657449640001186170705f696430012844616f417373657449640001187374617475739d0401185374617475730007043ce69bb4e696b0415050e78ab6e68081040d01436f6e7461696e7320612076617269616e742070657220646973706174636861626c652065787472696e736963207468617420746869732070616c6c6574206861732e950404184f7074696f6e04045401380108104e6f6e6500000010536f6d650400380000010000990404184f7074696f6e040454019d040108104e6f6e6500000010536f6d6504009d0400000100009d04082477657465655f6f7267185374617475730001081841637469766500000020496e41637469766500010000a1040c3077657465655f6173736574731870616c6c65741043616c6c040454000118306372656174655f617373657410011864616f5f696430012844616f417373657449640001206d657461646174610d02013044616f41737365744d657461000118616d6f756e7418013042616c616e63654f663c543e000138696e69745f64616f5f617373657418013042616c616e63654f663c543e000108446372656174652064616f2061737365742e4ce5889be5bbba20574554454520e8b584e4baa7587365745f6578697374656e69616c5f6465706f73697408011864616f5f696430012844616f417373657449640001486578697374656e69616c5f6465706f73697418013042616c616e63654f663c543e0003049115e8aebee7bdaee58aa0e585a55745544545e68980e99c80e8a681e79a84e69c80e5b08fe68ab5e68abcf6d6574616461746108011864616f5f696430012844616f417373657449640001206d657461646174610d02013044616f41737365744d657461000408a0596f752073686f756c6420686176652063726561746564207468652061737365742066697273742e54e8aebee7bdaee8b584e4baa7e58583e695b0e68dae106275726e08011864616f5f696430012844616f41737365744964000118616d6f756e7418013042616c616e63654f663c543e0005087c55736572732064657374726f79207468656972206f776e206173736574732e30e99480e6af81e8b584e4baa7207472616e736665720c0110646573749d03018c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f7572636500011864616f5f696430012844616f41737365744964000118616d6f756e74dc013042616c616e63654f663c543e0006203101546869732066756e6374696f6e207472616e73666572732074686520676976656e20616d6f756e742066726f6d2074686520736f7572636520746f207468652064657374696e6174696f6e2e002c2320417267756d656e7473008c2a2060616d6f756e7460202d2054686520616d6f756e7420746f207472616e736665727c2a2060736f7572636560202d2054686520736f75726365206163636f756e74a42a206064657374696e6174696f6e60202d205468652064657374696e6174696f6e206163636f756e7430e8bdace7a7bbe8b584e4baa7106a6f696e0c011864616f5f696430012844616f4173736574496400013073686172655f65787065637410010c7533320001486578697374656e69616c5f6465706f736974dc013042616c616e63654f663c543e00070430e68890e4b8bae4bc9ae59198040d01436f6e7461696e7320612076617269616e742070657220646973706174636861626c652065787472696e736963207468617420746869732070616c6c6574206861732ea5040c2877657465655f7375646f1870616c6c65741043616c6c04045400010c107375646f08011864616f5f696430012844616f4173736574496400011063616c6cb50301a8426f783c3c542061732077657465655f6f72673a3a436f6e6669673e3a3a52756e74696d6543616c6c3e00010894457865637574652065787465726e616c207472616e73616374696f6e7320617320726f6f746ce4bba520726f6f7420e8b4a6e688b7e689a7e8a18ce587bde695b0407365745f7375646f5f6163636f756e7408011864616f5f696430012844616f417373657449640001307375646f5f6163636f756e74000130543a3a4163636f756e74496400020840736574207375646f206163636f756e7460e8aebee7bdaee8b685e7baa7e794a8e688b7e8b4a6e688b728636c6f73655f7375646f04011864616f5f696430012844616f4173736574496400030828636c6f7365207375646f48e585b3e997ad207375646f20e58a9fe883bd040d01436f6e7461696e7320612076617269616e742070657220646973706174636861626c652065787472696e736963207468617420746869732070616c6c6574206861732ea9040c2c77657465655f6775696c641870616c6c65741043616c6c040454000108286775696c645f6a6f696e0c011864616f5f696430012844616f417373657449640001206775696c645f696430010c75363400010c77686f000130543a3a4163636f756e744964000100306372656174655f6775696c6414011864616f5f696430012844616f417373657449640001106e616d6538011c5665633c75383e0001106465736338011c5665633c75383e0001246d6574615f6461746138011c5665633c75383e00011c63726561746f72000130543a3a4163636f756e74496400020430e5889be5bbbae585ace4bc9a040d01436f6e7461696e7320612076617269616e742070657220646973706174636861626c652065787472696e736963207468617420746869732070616c6c6574206861732ead040c3477657465655f70726f6a6563741870616c6c65741043616c6c0404540001385070726f6a6563745f6a6f696e5f726571756573740c011864616f5f696430012844616f4173736574496400012870726f6a6563745f696430012450726f6a656374496400010c77686f000130543a3a4163636f756e74496400010448e794b3e8afb7e58aa0e585a5e59ba2e9989f386372656174655f70726f6a65637410011864616f5f696430012844616f417373657449640001106e616d6538011c5665633c75383e00012c6465736372697074696f6e38011c5665633c75383e00011c63726561746f72000130543a3a4163636f756e74496400020430e5889be5bbbae9a1b9e79bae4c6170706c795f70726f6a6563745f66756e64730c011864616f5f696430012844616f4173736574496400012870726f6a6563745f696430012450726f6a6563744964000118616d6f756e7418013042616c616e63654f663c543e00030454e4b8bae9a1b9e79baee794b3e8afb7e8b584e987912c6372656174655f7461736b2c011864616f5f696430012844616f4173736574496400012870726f6a6563745f696430012450726f6a65637449640001106e616d6538011c5665633c75383e00012c6465736372697074696f6e38011c5665633c75383e000114706f696e74a502010c7531360001207072696f7269747908010875380001306d61785f61737369676e6565b10401284f7074696f6e3c75383e000118736b696c6c739504013c4f7074696f6e3c5665633c75383e3e00012461737369676e656573b50401644f7074696f6e3c5665633c543a3a4163636f756e7449643e3e000124726576696577657273b50401644f7074696f6e3c5665633c543a3a4163636f756e7449643e3e000118616d6f756e7418013042616c616e63654f663c543e00040430e5889be5bbbae4bbbbe58aa1246a6f696e5f7461736b0c011864616f5f696430012844616f4173736574496400012870726f6a6563745f696430012450726f6a656374496400011c7461736b5f696430012450726f6a656374496400050430e58aa0e585a5e4bbbbe58aa1286c656176655f7461736b0c011864616f5f696430012844616f4173736574496400012870726f6a6563745f696430012450726f6a656374496400011c7461736b5f696430012450726f6a656374496400060430e7a6bbe5bc80e9a1b9e79bae406a6f696e5f7461736b5f7265766965770c011864616f5f696430012844616f4173736574496400012870726f6a6563745f696430012450726f6a656374496400011c7461736b5f69643001185461736b496400070460e58aa0e585a5e9a1b9e79baee5aea1e6a0b8e59ba2e9989f446c656176655f7461736b5f7265766965770c011864616f5f696430012844616f4173736574496400012870726f6a6563745f696430012450726f6a656374496400011c7461736b5f69643001185461736b496400080448e7a6bbe5bc80e4bbbbe58aa1e5aea1e6a0b82873746172745f7461736b0c011864616f5f696430012844616f4173736574496400012870726f6a6563745f696430012450726f6a656374496400011c7461736b5f696430012450726f6a656374496400090430e5bc80e5a78be4bbbbe58aa138726571756573745f7265766965770c011864616f5f696430012844616f4173736574496400012870726f6a6563745f696430012450726f6a656374496400011c7461736b5f696430012450726f6a6563744964000a0430e794b3e8afb7e5aea1e6a0b8247461736b5f646f6e650c011864616f5f696430012844616f4173736574496400012870726f6a6563745f696430012450726f6a656374496400011c7461736b5f696430012450726f6a6563744964000b0430e5ae8ce68890e4bbbbe58aa12c6d616b655f72657669657714011864616f5f696430012844616f4173736574496400012870726f6a6563745f696430012450726f6a656374496400011c7461736b5f696430012450726f6a656374496400011c6f70696e696f6eb90401345265766965774f70696e696f6e0001106d65746138011c5665633c75383e000c0448e58f91e98081e5aea1e6a0b8e68aa5e5918a506372656174655f70726f78795f70726f6a6563740c01106e616d6538011c5665633c75383e00012c6465736372697074696f6e38011c5665633c75383e00011c6465706f736974dc013042616c616e63654f663c543e000d0448e5889be5bbbae99d9e44414fe9a1b9e79bae2870726f78795f63616c6c08012870726f6a6563745f696430012450726f6a656374496400011063616c6cb50301a8426f783c3c542061732077657465655f6f72673a3a436f6e6669673e3a3a52756e74696d6543616c6c3e000e00040d01436f6e7461696e7320612076617269616e742070657220646973706174636861626c652065787472696e736963207468617420746869732070616c6c6574206861732eb10404184f7074696f6e04045401080108104e6f6e6500000010536f6d650400080000010000b50404184f7074696f6e04045401a40108104e6f6e6500000010536f6d650400a40000010000b904083477657465655f70726f6a656374345265766965774f70696e696f6e0001080c594553000000084e4f00010000bd040c2477657465655f676f761870616c6c65741043616c6c0404540001243c7375626d69745f70726f706f73616c10011864616f5f696430012844616f4173736574496400012c6d656d6265725f64617461c10401284d656d6265724461746100012070726f706f73616cb50301a8426f783c3c542061732077657465655f6f72673a3a436f6e6669673e3a3a52756e74696d6543616c6c3e000130706572696f645f696e64657810010c7533320001084463726561746520612070726f706f73616c48e5889be5bbbae4b880e4b8aae68f90e6a188406465706f7369745f70726f706f73616c0c011864616f5f696430012844616f4173736574496400012870726f706f73655f696410010c75333200011c6465706f736974dc013042616c616e63654f663c543e000308304f70656e20612070726f702e48e5bc80e5a78be585a8e6b091e585ace68a9534766f74655f666f725f70726f7010011864616f5f696430012844616f4173736574496400012870726f705f696e64657810012450726f70496e646578000118706c6564676521020124543a3a506c6564676500011c6f70696e696f6ec504011c4f70696e696f6e00040844566f746520666f72207468652070726f7054e4b8bae585a8e6b091e585ace68a95e68a95e7a5a82c63616e63656c5f766f746508011864616f5f696430012844616f41737365744964000114696e64657810012450726f70496e6465780005085c43616e63656c206120766f7465206f6e20612070726f7048e58f96e6b688e4b880e4b8aae68a95e7a5a83072756e5f70726f706f73616c08011864616f5f696430012844616f41737365744964000114696e64657810012450726f70496e646578000608f4566f746520616e64206578656375746520746865207472616e73616374696f6e20636f72726573706f6e64696e6720746f207468652070726f706f736178e689a7e8a18ce4b880e4b8aae68a95e7a5a8e9809ae8bf87e68f90e6a18818756e6c6f636b04011864616f5f696430012844616f4173736574496400070418556e6c6f636b447365745f6d61785f7072655f70726f707308011864616f5f696430012844616f4173736574496400010c6d617810010c753332000904d053657420746865206d6178696d756d206e756d626572206f662070726f706f73616c73206174207468652073616d652074696d65447570646174655f766f74655f6d6f64656c08011864616f5f696430012844616f417373657449640001146d6f64656c0801087538000f002c7365745f706572696f647308011864616f5f696430012844616f4173736574496400011c706572696f6473c90401b05665633c506572696f643c426c6f636b4e756d626572466f723c543e2c2042616c616e63654f663c543e3e3e001000040d01436f6e7461696e7320612076617269616e742070657220646973706174636861626c652065787472696e736963207468617420746869732070616c6c6574206861732ec104082477657465655f676f76284d656d6265724461746100010c18474c4f42414c000000144755494c44040030010c7536340001001c50524f4a454354040030010c75363400020000c504082477657465655f676f761c4f70696e696f6e0001080c594553000000084e4f00010000c904000002cd0400cd04082477657465655f676f7618506572696f64082c426c6f636b4e756d62657201101c42616c616e63650118002c01106e616d6538011c5665633c75383e00013070616c6c65745f696e646578a502010c753136000138707265706172655f706572696f6410012c426c6f636b4e756d6265720001306d61785f6465636964696e6710012c426c6f636b4e756d626572000138636f6e6669726d5f706572696f6410012c426c6f636b4e756d62657200013c6465636973696f6e5f706572696f6410012c426c6f636b4e756d6265720001506d696e5f656e6163746d656e745f706572696f6410012c426c6f636b4e756d6265720001406465636973696f6e5f6465706f73697418011c42616c616e63650001306d696e5f617070726f76616c080108753800012c6d696e5f737570706f7274080108753800012c6d61785f62616c616e636518011c42616c616e63650000d1040c3877657465655f74726561737572791870616c6c65741043616c6c040454000104147370656e640c011864616f5f696430012844616f4173736574496400012c62656e6566696369617279000130543a3a4163636f756e744964000118616d6f756e74dc013042616c616e63654f663c543e000200040d01436f6e7461696e7320612076617269616e742070657220646973706174636861626c652065787472696e736963207468617420746869732070616c6c6574206861732ed5040c2477657465655f6170701870616c6c65741043616c6c04045400010c186372656174653001106e616d6538011c5665633c75383e000114696d61676538011c5665633c75383e0001106d65746138011c5665633c75383e000110706f7274d90401305665633c536572766963653e00011c636f6d6d616e64e104011c436f6d6d616e6400010c656e76e50401345665633c456e76496e7075743e00010c63707510010c7533320001186d656d6f727910010c7533320001106469736bf50401245665633c4469736b3e000138736964655f636f6e7461696e6572010501385665633c436f6e7461696e65723e0001146c6576656c080108753800012c7465655f76657273696f6e0d05012854454556657273696f6e0001082c417070c2a063726561746530e6b3a8e5868ce4bbbbe58aa1187570646174651c01186170705f696430012054656541707049640001206e65775f6e616d659504013c4f7074696f6e3c5665633c75383e3e0001246e65775f696d6167659504013c4f7074696f6e3c5665633c75383e3e0001206e65775f706f7274110501504f7074696f6e3c5665633c536572766963653e3e00012c6e65775f636f6d6d616e641505013c4f7074696f6e3c436f6d6d616e643e00011c6e65775f656e76e50401345665633c456e76496e7075743e000130776974685f72657374617274200110626f6f6c000208284170702075706461746530e69bb4e696b0e4bbbbe58aa11c726573746172740401186170705f696430012054656541707049640006082c417070207265737461727430e69bb4e696b0e4bbbbe58aa1040d01436f6e7461696e7320612076617269616e742070657220646973706174636861626c652065787472696e736963207468617420746869732070616c6c6574206861732ed904000002dd0400dd040c4077657465655f7072696d6974697665731474797065731c536572766963650001100c5463700400a502010c7531360000000c5564700400a502010c7531360001002850726f6a6563745463700400a502010c7531360002002850726f6a6563745564700400a502010c75313600030000e1040c4077657465655f7072696d6974697665731474797065731c436f6d6d616e64000110085348040038011c5665633c75383e0000001042415348040038011c5665633c75383e0001000c5a5348040038011c5665633c75383e000200104e4f4e4500030000e504000002e90400e9040c4077657465655f7072696d69746976657314747970657320456e76496e70757400001001146574797065ed0401204564697454797065000114696e646578a502010c7531360001046bf1040118456e764b65790001047638011c5665633c75383e0000ed040c4077657465655f7072696d69746976657314747970657320456469745479706500010c18494e53455254000000185550444154450400a502010c7531360001001852454d4f56450400a502010c75313600020000f1040c4077657465655f7072696d69746976657314747970657318456e764b65790001080c456e76040038011c5665633c75383e0000001046696c65040038011c5665633c75383e00010000f504000002f90400f9040c4077657465655f7072696d697469766573147479706573104469736b000008011070617468fd0401244469736b436c61737300011073697a6510010c7533320000fd040c4077657465655f7072696d697469766573147479706573244469736b436c6173730001040c535344040038011c5665633c75383e00000000010500000205050005050c4077657465655f7072696d69746976657314747970657324436f6e7461696e65720000100114696d61676538011c5665633c75383e00011c636f6d6d616e64e104011c436f6d6d616e64000110706f7274d90401305665633c536572766963653e0001086372090501084372000009050c4077657465655f7072696d697469766573147479706573084372000010010c63707510010c75333200010c6d656d10010c7533320001106469736bf50401245665633c4469736b3e00010c67707510010c75333200000d050c4077657465655f7072696d6974697665731474797065732854454556657273696f6e0001080c5347580000000c43564d00010000110504184f7074696f6e04045401d9040108104e6f6e6500000010536f6d650400d9040000010000150504184f7074696f6e04045401e1040108104e6f6e6500000010536f6d650400e104000001000019050c2877657465655f7461736b1870616c6c65741043616c6c04045400010c186372656174652c01106e616d6538011c5665633c75383e000114696d61676538011c5665633c75383e0001106d65746138011c5665633c75383e000110706f7274d90401305665633c536572766963653e00011c636f6d6d616e64e104011c436f6d6d616e6400010c656e76e50401345665633c456e76496e7075743e00010c63707510010c7533320001186d656d6f727910010c7533320001106469736bf50401245665633c4469736b3e0001146c6576656c080108753800012c7465655f76657273696f6e0d05012854454556657273696f6e000108305461736bc2a063726561746530e6b3a8e5868ce4bbbbe58aa114726572756e0401086964300120546565417070496400020828526572756e207461736b30e9878de590afe4bbbbe58aa1187570646174651c01186170705f696430012054656541707049640001206e65775f6e616d659504013c4f7074696f6e3c5665633c75383e3e0001246e65775f696d6167659504013c4f7074696f6e3c5665633c75383e3e0001206e65775f706f7274110501504f7074696f6e3c5665633c536572766963653e3e00012c6e65775f636f6d6d616e641505013c4f7074696f6e3c436f6d6d616e643e00011c6e65775f656e76e50401345665633c456e76496e7075743e000130776974685f72657374617274200110626f6f6c0003082c5461736b2075706461746530e69bb4e696b0e4bbbbe58aa1040d01436f6e7461696e7320612076617269616e742070657220646973706174636861626c652065787472696e736963207468617420746869732070616c6c6574206861732e1d050c2477657465655f6770751870616c6c65741043616c6c04045400010c186372656174653401106e616d6538011c5665633c75383e000114696d61676538011c5665633c75383e0001106d65746138011c5665633c75383e000110706f7274d90401305665633c536572766963653e00011c636f6d6d616e64e104011c436f6d6d616e6400010c656e76e50401345665633c456e76496e7075743e00010c63707510010c7533320001186d656d6f727910010c7533320001106469736bf50401245665633c4469736b3e00010c67707510010c753332000138736964655f636f6e7461696e6572010501385665633c436f6e7461696e65723e0001146c6576656c080108753800012c7465655f76657273696f6e0d05012854454556657273696f6e0001082c417070c2a063726561746530e6b3a8e5868ce4bbbbe58aa1187570646174651c01186170705f696430012054656541707049640001206e65775f6e616d659504013c4f7074696f6e3c5665633c75383e3e0001246e65775f696d6167659504013c4f7074696f6e3c5665633c75383e3e0001206e65775f706f7274110501504f7074696f6e3c5665633c536572766963653e3e00012c6e65775f636f6d6d616e641505013c4f7074696f6e3c436f6d6d616e643e00011c6e65775f656e76e50401345665633c456e76496e7075743e000130776974685f72657374617274200110626f6f6c000208284170702075706461746530e69bb4e696b0e4bbbbe58aa11c726573746172740401186170705f696430012054656541707049640006082c417070207265737461727430e69bb4e696b0e4bbbbe58aa1040d01436f6e7461696e7320612076617269616e742070657220646973706174636861626c652065787472696e736963207468617420746869732070616c6c6574206861732e21050c3077657465655f776f726b65721870616c6c65741043616c6c04045400012840636c75737465725f72656769737465721001106e616d6538011c5665633c75383e00010869702505011c5665633c49703e000110706f727410010c7533320001146c6576656c080108753800010864576f726b6572c2a0636c7573746572c2a0726567697374657230e99b86e7bea4e6b3a8e5868c50636c75737465725f70726f6f665f75706c6f61640801086964300124436c7573746572496400011470726f6f663105013850726f6f664f66436c7573746572000408b0576f726b6572c2a0636c7573746572c2a075706c6f6164c2a070726f6f66206f6620776f726bc2a0646174616ce68f90e4baa4e99b86e7bea4e79a84e5b7a5e4bd9ce8af81e6988e40636c75737465725f6d6f7274676167652001086964300124436c7573746572496400010c63707510010c75333200010c6d656d10010c75333200011c63766d5f63707510010c75333200011c63766d5f6d656d10010c7533320001106469736b10010c75333200010c67707510010c75333200011c6465706f736974dc013042616c616e63654f663c543e0002085c576f726b657220636c7573746572206d6f72746761676530e8b4a8e68abce7a1ace4bbb648636c75737465725f756e6d6f7274676167650801086964300124436c75737465724964000124626c6f636b5f6e756d100144426c6f636b4e756d626572466f723c543e00030864576f726b657220636c757374657220756e6d6f72746761676524e8a7a3e68ab5e68abc44776f726b5f70726f6f665f75706c6f61640c011c776f726b5f69642d020118576f726b496400011470726f6f663505014c4f7074696f6e3c50726f6f664f66576f726b3e0001187265706f72749504013c4f7074696f6e3c5665633c75383e3e00050878576f726b2070726f6f66206f6620776f726b20646174612075706c6f616448e68f90e4baa4e5b7a5e4bd9ce8af81e6988e48636c75737465725f7769746864726177616c08011c776f726b5f69642d020118576f726b4964000118616d6f756e7418013042616c616e63654f663c543e0006086c576f726b6572c2a0636c7573746572c2a07769746864726177616c30e68f90e78eb0e4bd99e9a29d30636c75737465725f73746f700401086964300124436c7573746572496400070854576f726b6572c2a0636c7573746572c2a073746f7030e5819ce6ada2e99b86e7bea438636c75737465725f7265706f72740c0128636c75737465725f6964300124436c7573746572496400011c776f726b5f69642d020118576f726b4964000118726561736f6e38011c5665633c75383e00080854576f726b657220636c7573746572207265706f727430e68a95e8af89e99b86e7bea4307265706f72745f636c6f7365080128636c75737465725f6964300124436c7573746572496400011c776f726b5f69642d020118576f726b496400090850576f726b6572c2a07265706f7274c2a073746f7030e5819ce6ada2e68a95e8af8924776f726b5f73746f7004011c776f726b5f69642d020118576f726b4964000a0824576f726b2073746f7030e5819ce6ada2e5ba94e794a8040d01436f6e7461696e7320612076617269616e742070657220646973706174636861626c652065787472696e736963207468617420746869732070616c6c6574206861732e250500000229050029050c3077657465655f776f726b657214747970657308497000000c011069707634d902012c4f7074696f6e3c7533323e000110697076362d0501304f7074696f6e3c753132383e000118646f6d61696e9504013c4f7074696f6e3c5665633c75383e3e00002d0504184f7074696f6e04045401180108104e6f6e6500000010536f6d65040018000001000031050c3077657465655f776f726b65721474797065733850726f6f664f66436c757374657200000401287075626c69635f6b657938011c5665633c75383e0000350504184f7074696f6e0404540139050108104e6f6e6500000010536f6d6504003905000001000039050c3077657465655f776f726b65721474797065732c50726f6f664f66576f726b00000c01206c6f675f6861736838011c5665633c75383e00010863723d050114436f6d437200011c63725f6861736838011c5665633c75383e00003d050c4077657465655f7072696d69746976657314747970657314436f6d4372000018010c63707510010c75333200010c6d656d10010c75333200011c63766d5f63707510010c75333200011c63766d5f6d656d10010c7533320001106469736b10010c75333200010c67707510010c753332000041050c4070616c6c65745f636f6e7472616374731870616c6c65741043616c6c0404540001283c63616c6c5f6f6c645f776569676874140110646573749d0301504163636f756e7449644c6f6f6b75704f663c543e00011476616c7565dc013042616c616e63654f663c543e0001246761735f6c696d69742c01244f6c6457656967687400015473746f726167655f6465706f7369745f6c696d6974450501c44f7074696f6e3c3c42616c616e63654f663c543e20617320636f6465633a3a486173436f6d706163743e3a3a547970653e0001106461746138011c5665633c75383e0000041501446570726563617465642076657273696f6e206966205b6053656c663a3a63616c6c605d20666f722075736520696e20616e20696e2d73746f72616765206043616c6c602e80696e7374616e74696174655f776974685f636f64655f6f6c645f77656967687418011476616c7565dc013042616c616e63654f663c543e0001246761735f6c696d69742c01244f6c6457656967687400015473746f726167655f6465706f7369745f6c696d6974450501c44f7074696f6e3c3c42616c616e63654f663c543e20617320636f6465633a3a486173436f6d706163743e3a3a547970653e000110636f646538011c5665633c75383e0001106461746138011c5665633c75383e00011073616c7438011c5665633c75383e0001045901446570726563617465642076657273696f6e206966205b6053656c663a3a696e7374616e74696174655f776974685f636f6465605d20666f722075736520696e20616e20696e2d73746f72616765206043616c6c602e58696e7374616e74696174655f6f6c645f77656967687418011476616c7565dc013042616c616e63654f663c543e0001246761735f6c696d69742c01244f6c6457656967687400015473746f726167655f6465706f7369745f6c696d6974450501c44f7074696f6e3c3c42616c616e63654f663c543e20617320636f6465633a3a486173436f6d706163743e3a3a547970653e000124636f64655f6861736834012c436f6465486173683c543e0001106461746138011c5665633c75383e00011073616c7438011c5665633c75383e0002043101446570726563617465642076657273696f6e206966205b6053656c663a3a696e7374616e7469617465605d20666f722075736520696e20616e20696e2d73746f72616765206043616c6c602e2c75706c6f61645f636f64650c0110636f646538011c5665633c75383e00015473746f726167655f6465706f7369745f6c696d6974450501c44f7074696f6e3c3c42616c616e63654f663c543e20617320636f6465633a3a486173436f6d706163743e3a3a547970653e00012c64657465726d696e69736d4905012c44657465726d696e69736d000360ec55706c6f6164206e65772060636f64656020776974686f757420696e7374616e74696174696e67206120636f6e74726163742066726f6d2069742e00210149662074686520636f646520646f6573206e6f7420616c72656164792065786973742061206465706f7369742069732072657365727665642066726f6d207468652063616c6c65724501616e6420756e7265736572766564206f6e6c79207768656e205b6053656c663a3a72656d6f76655f636f6465605d2069732063616c6c65642e205468652073697a65206f66207468652072657365727665ac646570656e6473206f6e207468652073697a65206f662074686520737570706c6965642060636f6465602e00310149662074686520636f646520616c72656164792065786973747320696e2073746f726167652069742077696c6c207374696c6c2072657475726e20604f6b6020616e642075706772616465739474686520696e2073746f726167652076657273696f6e20746f207468652063757272656e74d05b60496e737472756374696f6e576569676874733a3a76657273696f6e605d28496e737472756374696f6e57656967687473292e0055012d206064657465726d696e69736d603a20496620746869732069732073657420746f20616e79206f746865722076616c756520627574205b6044657465726d696e69736d3a3a456e666f72636564605d207468656e5d012020746865206f6e6c792077617920746f20757365207468697320636f646520697320746f2064656c65676174652063616c6c20696e746f2069742066726f6d20616e206f6666636861696e20657865637574696f6e2ebc202053657420746f205b6044657465726d696e69736d3a3a456e666f72636564605d20696620696e20646f7562742e001823204e6f7465005901416e796f6e652063616e20696e7374616e7469617465206120636f6e74726163742066726f6d20616e792075706c6f6164656420636f646520616e6420746875732070726576656e74206974732072656d6f76616c2e4101546f2061766f6964207468697320736974756174696f6e206120636f6e7374727563746f7220636f756c6420656d706c6f792061636365737320636f6e74726f6c20736f20746861742069742063616e39016f6e6c7920626520696e7374616e746961746564206279207065726d697373696f6e656420656e7469746965732e205468652073616d652069732074727565207768656e2075706c6f6164696e67a07468726f756768205b6053656c663a3a696e7374616e74696174655f776974685f636f6465605d2e005101557365205b6044657465726d696e69736d3a3a52656c61786564605d206578636c75736976656c7920666f72206e6f6e2d64657465726d696e697374696320636f64652e204966207468652075706c6f616465644901636f64652069732064657465726d696e69737469632c2073706563696679696e67205b6044657465726d696e69736d3a3a52656c61786564605d2077696c6c20626520646973726567617264656420616e646c726573756c7420696e206869676865722067617320636f7374732e2c72656d6f76655f636f6465040124636f64655f6861736834012c436f6465486173683c543e000410350152656d6f76652074686520636f64652073746f72656420756e6465722060636f64655f686173686020616e6420726566756e6420746865206465706f73697420746f20697473206f776e65722e0045014120636f64652063616e206f6e6c792062652072656d6f76656420627920697473206f726967696e616c2075706c6f616465722028697473206f776e65722920616e64206f6e6c79206966206974206973646e6f74207573656420627920616e7920636f6e74726163742e207365745f636f6465080110646573749d0301504163636f756e7449644c6f6f6b75704f663c543e000124636f64655f6861736834012c436f6465486173683c543e000528090150726976696c656765642066756e6374696f6e2074686174206368616e6765732074686520636f6465206f6620616e206578697374696e6720636f6e74726163742e004501546869732074616b65732063617265206f66207570646174696e6720726566636f756e747320616e6420616c6c206f74686572206e6563657373617279206f7065726174696f6e732e2052657475726e73e8616e206572726f7220696620656974686572207468652060636f64655f6861736860206f722060646573746020646f206e6f742065786973742e001823204e6f74650031015468697320646f6573202a2a6e6f742a2a206368616e6765207468652061646472657373206f662074686520636f6e747261637420696e207175657374696f6e2e2054686973206d65616e733d01746861742074686520636f6e74726163742061646472657373206973206e6f206c6f6e67657220646572697665642066726f6d2069747320636f646520686173682061667465722063616c6c696e67487468697320646973706174636861626c652e1063616c6c140110646573749d0301504163636f756e7449644c6f6f6b75704f663c543e00011476616c7565dc013042616c616e63654f663c543e0001246761735f6c696d697428011857656967687400015473746f726167655f6465706f7369745f6c696d6974450501c44f7074696f6e3c3c42616c616e63654f663c543e20617320636f6465633a3a486173436f6d706163743e3a3a547970653e0001106461746138011c5665633c75383e00064005014d616b657320612063616c6c20746f20616e206163636f756e742c206f7074696f6e616c6c79207472616e7366657272696e6720736f6d652062616c616e63652e00302320506172616d657465727300a82a206064657374603a2041646472657373206f662074686520636f6e747261637420746f2063616c6c2efc2a206076616c7565603a205468652062616c616e636520746f207472616e736665722066726f6d2074686520606f726967696e6020746f206064657374602e15012a20606761735f6c696d6974603a2054686520676173206c696d697420656e666f72636564207768656e20657865637574696e672074686520636f6e7374727563746f722e55012a206073746f726167655f6465706f7369745f6c696d6974603a20546865206d6178696d756d20616d6f756e74206f662062616c616e636520746861742063616e20626520636861726765642066726f6d20746865a4202063616c6c657220746f2070617920666f72207468652073746f7261676520636f6e73756d65642ec42a206064617461603a2054686520696e707574206461746120746f207061737320746f2074686520636f6e74726163742e0025012a20496620746865206163636f756e74206973206120736d6172742d636f6e7472616374206163636f756e742c20746865206173736f63696174656420636f64652077696c6c206265ac657865637574656420616e6420616e792076616c75652077696c6c206265207472616e736665727265642e15012a20496620746865206163636f756e74206973206120726567756c6172206163636f756e742c20616e792076616c75652077696c6c206265207472616e736665727265642e45012a204966206e6f206163636f756e742065786973747320616e64207468652063616c6c2076616c7565206973206e6f74206c657373207468616e20606578697374656e7469616c5f6465706f736974602c11016120726567756c6172206163636f756e742077696c6c206265206372656174656420616e6420616e792076616c75652077696c6c206265207472616e736665727265642e54696e7374616e74696174655f776974685f636f646518011476616c7565dc013042616c616e63654f663c543e0001246761735f6c696d697428011857656967687400015473746f726167655f6465706f7369745f6c696d6974450501c44f7074696f6e3c3c42616c616e63654f663c543e20617320636f6465633a3a486173436f6d706163743e3a3a547970653e000110636f646538011c5665633c75383e0001106461746138011c5665633c75383e00011073616c7438011c5665633c75383e0007643101496e7374616e7469617465732061206e657720636f6e74726163742066726f6d2074686520737570706c6965642060636f646560206f7074696f6e616c6c79207472616e7366657272696e6734736f6d652062616c616e63652e0021015468697320646973706174636861626c6520686173207468652073616d65206566666563742061732063616c6c696e67205b6053656c663a3a75706c6f61645f636f6465605d202b3d015b6053656c663a3a696e7374616e7469617465605d2e2042756e646c696e67207468656d20746f6765746865722070726f766964657320656666696369656e6379206761696e732e20506c65617365d8616c736f20636865636b2074686520646f63756d656e746174696f6e206f66205b6053656c663a3a75706c6f61645f636f6465605d2e00302320506172616d6574657273004d012a206076616c7565603a205468652062616c616e636520746f207472616e736665722066726f6d2074686520606f726967696e6020746f20746865206e65776c79206372656174656420636f6e74726163742e15012a20606761735f6c696d6974603a2054686520676173206c696d697420656e666f72636564207768656e20657865637574696e672074686520636f6e7374727563746f722e55012a206073746f726167655f6465706f7369745f6c696d6974603a20546865206d6178696d756d20616d6f756e74206f662062616c616e636520746861742063616e20626520636861726765642f7265736572766564c8202066726f6d207468652063616c6c657220746f2070617920666f72207468652073746f7261676520636f6e73756d65642ecc2a2060636f6465603a2054686520636f6e747261637420636f646520746f206465706c6f7920696e207261772062797465732ef42a206064617461603a2054686520696e707574206461746120746f207061737320746f2074686520636f6e747261637420636f6e7374727563746f722e31012a206073616c74603a205573656420666f722074686520616464726573732064657269766174696f6e2e20536565205b6050616c6c65743a3a636f6e74726163745f61646472657373605d2e0094496e7374616e74696174696f6e20697320657865637574656420617320666f6c6c6f77733a0039012d2054686520737570706c6965642060636f646560206973206465706c6f7965642c20616e6420612060636f64655f6861736860206973206372656174656420666f72207468617420636f64652e59012d204966207468652060636f64655f686173686020616c726561647920657869737473206f6e2074686520636861696e2074686520756e6465726c79696e672060636f6465602077696c6c206265207368617265642e49012d205468652064657374696e6174696f6e206164647265737320697320636f6d7075746564206261736564206f6e207468652073656e6465722c20636f64655f6861736820616e64207468652073616c742e01012d2054686520736d6172742d636f6e7472616374206163636f756e7420697320637265617465642061742074686520636f6d707574656420616464726573732ec02d20546865206076616c756560206973207472616e7366657272656420746f20746865206e6577206163636f756e742e41012d2054686520606465706c6f79602066756e6374696f6e20697320657865637574656420696e2074686520636f6e74657874206f6620746865206e65776c792d63726561746564206163636f756e742e2c696e7374616e746961746518011476616c7565dc013042616c616e63654f663c543e0001246761735f6c696d697428011857656967687400015473746f726167655f6465706f7369745f6c696d6974450501c44f7074696f6e3c3c42616c616e63654f663c543e20617320636f6465633a3a486173436f6d706163743e3a3a547970653e000124636f64655f6861736834012c436f6465486173683c543e0001106461746138011c5665633c75383e00011073616c7438011c5665633c75383e000814fc496e7374616e746961746573206120636f6e74726163742066726f6d20612070726576696f75736c79206465706c6f796564207761736d2062696e6172792e003501546869732066756e6374696f6e206973206964656e746963616c20746f205b6053656c663a3a696e7374616e74696174655f776974685f636f6465605d2062757420776974686f7574207468654901636f6465206465706c6f796d656e7420737465702e20496e73746561642c207468652060636f64655f6861736860206f6620616e206f6e2d636861696e206465706c6f796564207761736d2062696e617279446d75737420626520737570706c6965642e1c6d6967726174650401307765696768745f6c696d697428011857656967687400091059015768656e2061206d6967726174696f6e20697320696e2070726f67726573732c207468697320646973706174636861626c652063616e206265207573656420746f2072756e206d6967726174696f6e2073746570732e610143616c6c73207468617420636f6e7472696275746520746f20616476616e63696e6720746865206d6967726174696f6e20686176652074686569722066656573207761697665642c20617320697427732068656c7066756c4501666f722074686520636861696e2e204e6f74652074686174207768696c6520746865206d6967726174696f6e20697320696e2070726f67726573732c207468652070616c6c65742077696c6c20616c736fd06c657665726167652074686520606f6e5f69646c656020686f6f6b7320746f2072756e206d6967726174696f6e2073746570732e040d01436f6e7461696e7320612076617269616e742070657220646973706174636861626c652065787472696e736963207468617420746869732070616c6c6574206861732e450504184f7074696f6e04045401dc0108104e6f6e6500000010536f6d650400dc000001000049050c4070616c6c65745f636f6e747261637473107761736d2c44657465726d696e69736d00010820456e666f726365640000001c52656c61786564000100004d050c2c70616c6c65745f7375646f1870616c6c6574144572726f720404540001042c526571756972655375646f0000048053656e646572206d75737420626520746865205375646f206163636f756e742e04684572726f7220666f7220746865205375646f2070616c6c65742e51050c4c626f756e6465645f636f6c6c656374696f6e732c626f756e6465645f76656328426f756e6465645665630804540100045300000400a401185665633c543e000055050c4c626f756e6465645f636f6c6c656374696f6e732c626f756e6465645f76656328426f756e6465645665630804540159050453000004005d0501185665633c543e000059050c6470616c6c65745f636f6c6c61746f725f73656c656374696f6e1870616c6c65743443616e646964617465496e666f08244163636f756e74496401001c42616c616e636501180008010c77686f0001244163636f756e74496400011c6465706f73697418011c42616c616e636500005d0500000259050061050c6470616c6c65745f636f6c6c61746f725f73656c656374696f6e1870616c6c6574144572726f7204045400014444546f6f4d616e7943616e646964617465730000048c5468652070616c6c65742068617320746f6f206d616e792063616e646964617465732e5c546f6f466577456c696769626c65436f6c6c61746f7273000104ac4c656176696e6720776f756c6420726573756c7420696e20746f6f206665772063616e646964617465732e40416c726561647943616e6469646174650002047c4163636f756e7420697320616c726561647920612063616e6469646174652e304e6f7443616e6469646174650003046c4163636f756e74206973206e6f7420612063616e6469646174652e50546f6f4d616e79496e76756c6e657261626c65730004048454686572652061726520746f6f206d616e7920496e76756c6e657261626c65732e4c416c7265616479496e76756c6e657261626c650005048c4163636f756e7420697320616c726561647920616e20496e76756c6e657261626c652e3c4e6f74496e76756c6e657261626c650006047c4163636f756e74206973206e6f7420616e20496e76756c6e657261626c652e5c4e6f4173736f63696174656456616c696461746f7249640007049c4163636f756e7420686173206e6f206173736f6369617465642076616c696461746f722049442e5856616c696461746f724e6f74526567697374657265640008048c56616c696461746f72204944206973206e6f742079657420726567697374657265642e6c496e73657274546f43616e6469646174654c6973744661696c65640009049c436f756c64206e6f7420696e7365727420696e207468652063616e646964617465206c6973742e7452656d6f766546726f6d43616e6469646174654c6973744661696c6564000a04a4436f756c64206e6f742072656d6f76652066726f6d207468652063616e646964617465206c6973742e344465706f736974546f6f4c6f77000b04f44e6577206465706f73697420616d6f756e7420776f756c642062652062656c6f7720746865206d696e696d756d2063616e64696461637920626f6e642e6455706461746543616e6469646174654c6973744661696c6564000c0490436f756c64206e6f7420757064617465207468652063616e646964617465206c6973742e40496e73756666696369656e74426f6e64000d0429014465706f73697420616d6f756e7420697320746f6f206c6f7720746f2074616b652074686520746172676574277320736c6f7420696e207468652063616e646964617465206c6973742e5054617267657449734e6f7443616e646964617465000e042d0154686520746172676574206163636f756e7420746f206265207265706c6163656420696e207468652063616e646964617465206c697374206973206e6f7420612063616e6469646174652e404964656e746963616c4465706f736974000f040d015468652075706461746564206465706f73697420616d6f756e7420697320657175616c20746f2074686520616d6f756e7420616c72656164792072657365727665642e40496e76616c6964556e726573657276650010043d0143616e6e6f74206c6f7765722063616e64696461637920626f6e64207768696c65206f6363757079696e6720612066757475726520636f6c6c61746f7220736c6f7420696e20746865206c6973742e048054686520604572726f726020656e756d206f6620746869732070616c6c65742e650500000269050069050000040800c103006d0500000210007105000004087505380075050c1c73705f636f72651863727970746f244b65795479706549640000040048011c5b75383b20345d000079050c3870616c6c65745f73657373696f6e1870616c6c6574144572726f7204045400011430496e76616c696450726f6f6600000460496e76616c6964206f776e6572736869702070726f6f662e5c4e6f4173736f63696174656456616c696461746f7249640001049c4e6f206173736f6369617465642076616c696461746f7220494420666f72206163636f756e742e344475706c6963617465644b65790002046452656769737465726564206475706c6963617465206b65792e184e6f4b657973000304a44e6f206b65797320617265206173736f63696174656420776974682074686973206163636f756e742e244e6f4163636f756e7400040419014b65792073657474696e67206163636f756e74206973206e6f74206c6976652c20736f206974277320696d706f737369626c6520746f206173736f6369617465206b6579732e04744572726f7220666f72207468652073657373696f6e2070616c6c65742e7d050c4c626f756e6465645f636f6c6c656374696f6e732c626f756e6465645f76656328426f756e64656456656308045401c503045300000400810501185665633c543e00008105000002c503008505084873705f636f6e73656e7375735f736c6f747310536c6f740000040030010c7536340000890500000408850510008d050c4c626f756e6465645f636f6c6c656374696f6e7344626f756e6465645f62747265655f7365743c426f756e646564425472656553657408045401e9010453000004009105012c42547265655365743c543e000091050420425472656553657404045401e90100040095050000009505000002e9010099050000029d05009d05086463756d756c75735f70616c6c65745f78636d705f7175657565584f7574626f756e644368616e6e656c44657461696c730000140124726563697069656e74e90101185061726149640001147374617465a10501344f7574626f756e6453746174650001347369676e616c735f6578697374200110626f6f6c00012c66697273745f696e646578a502010c7531360001286c6173745f696e646578a502010c7531360000a105086463756d756c75735f70616c6c65745f78636d705f7175657565344f7574626f756e645374617465000108084f6b0000002453757370656e64656400010000a50500000408e901a50200a905086463756d756c75735f70616c6c65745f78636d705f71756575653c5175657565436f6e6669674461746100000c014473757370656e645f7468726573686f6c6410010c75333200013864726f705f7468726573686f6c6410010c753332000140726573756d655f7468726573686f6c6410010c7533320000ad050c6463756d756c75735f70616c6c65745f78636d705f71756575651870616c6c6574144572726f7204045400010c384261645175657565436f6e666967000004110153657474696e672074686520717565756520636f6e666967206661696c65642073696e6365206f6e65206f66206974732076616c7565732077617320696e76616c69642e40416c726561647953757370656e6465640001048c54686520657865637574696f6e20697320616c72656164792073757370656e6465642e38416c7265616479526573756d65640002048454686520657865637574696f6e20697320616c726561647920726573756d65642e048054686520604572726f726020656e756d206f6620746869732070616c6c65742eb1050c2870616c6c65745f78636d1870616c6c65742c5175657279537461747573042c426c6f636b4e756d6265720110010c1c50656e64696e67100124726573706f6e646572d901014456657273696f6e65644c6f636174696f6e00014c6d617962655f6d617463685f71756572696572b50501644f7074696f6e3c56657273696f6e65644c6f636174696f6e3e0001306d617962655f6e6f74696679b90501404f7074696f6e3c2875382c207538293e00011c74696d656f757410012c426c6f636b4e756d6265720000003c56657273696f6e4e6f7469666965720801186f726967696ed901014456657273696f6e65644c6f636174696f6e00012469735f616374697665200110626f6f6c000100145265616479080120726573706f6e7365c105014456657273696f6e6564526573706f6e7365000108617410012c426c6f636b4e756d62657200020000b50504184f7074696f6e04045401d9010108104e6f6e6500000010536f6d650400d9010000010000b90504184f7074696f6e04045401bd050108104e6f6e6500000010536f6d650400bd050000010000bd0500000408080800c105080c78636d4456657273696f6e6564526573706f6e736500010c0856320400e103013076323a3a526573706f6e736500020008563304000d04013076333a3a526573706f6e736500030008563404003101013076343a3a526573706f6e736500040000c5050000040810d90100c9050000040c30281000cd050c4c626f756e6465645f636f6c6c656374696f6e732c626f756e6465645f76656328426f756e64656456656308045401d105045300000400d50501185665633c543e0000d10500000408d9011000d505000002d10500d9050c2870616c6c65745f78636d1870616c6c65745456657273696f6e4d6967726174696f6e53746167650001105c4d696772617465537570706f7274656456657273696f6e0000005c4d69677261746556657273696f6e4e6f74696669657273000100504e6f7469667943757272656e745461726765747304009504013c4f7074696f6e3c5665633c75383e3e000200684d696772617465416e644e6f746966794f6c645461726765747300030000dd050000040c1000e10500e105080c78636d4056657273696f6e6564417373657449640001080856330400b901012c76333a3a4173736574496400030008563404001d01012c76343a3a4173736574496400040000e5050c2870616c6c65745f78636d1870616c6c65746852656d6f74654c6f636b656446756e6769626c655265636f72640848436f6e73756d65724964656e7469666965720198304d6178436f6e73756d6572730000100118616d6f756e74180110753132380001146f776e6572d901014456657273696f6e65644c6f636174696f6e0001186c6f636b6572d901014456657273696f6e65644c6f636174696f6e000124636f6e73756d657273e90501d0426f756e6465645665633c28436f6e73756d65724964656e7469666965722c2075313238292c204d6178436f6e73756d6572733e0000e9050c4c626f756e6465645f636f6c6c656374696f6e732c626f756e6465645f76656328426f756e64656456656308045401ed05045300000400f10501185665633c543e0000ed0500000408981800f105000002ed0500f5050c4c626f756e6465645f636f6c6c656374696f6e732c626f756e6465645f76656328426f756e64656456656308045401f905045300000400fd0501185665633c543e0000f9050000040818d90100fd05000002f9050001060c2870616c6c65745f78636d1870616c6c6574144572726f7204045400016c2c556e726561636861626c650000085d0154686520646573697265642064657374696e6174696f6e2077617320756e726561636861626c652c2067656e6572616c6c7920626563617573652074686572652069732061206e6f20776179206f6620726f7574696e6718746f2069742e2c53656e644661696c757265000108410154686572652077617320736f6d65206f746865722069737375652028692e652e206e6f7420746f20646f207769746820726f7574696e672920696e2073656e64696e6720746865206d6573736167652ec8506572686170732061206c61636b206f6620737061636520666f7220627566666572696e6720746865206d6573736167652e2046696c74657265640002049c546865206d65737361676520657865637574696f6e206661696c73207468652066696c7465722e48556e776569676861626c654d657373616765000304b4546865206d65737361676527732077656967687420636f756c64206e6f742062652064657465726d696e65642e6044657374696e6174696f6e4e6f74496e7665727469626c65000404dc5468652064657374696e6174696f6e20604c6f636174696f6e602070726f76696465642063616e6e6f7420626520696e7665727465642e14456d707479000504805468652061737365747320746f2062652073656e742061726520656d7074792e3843616e6e6f745265616e63686f720006043501436f756c64206e6f742072652d616e63686f72207468652061737365747320746f206465636c61726520746865206665657320666f72207468652064657374696e6174696f6e20636861696e2e34546f6f4d616e79417373657473000704c4546f6f206d616e79206173736574732068617665206265656e20617474656d7074656420666f72207472616e736665722e34496e76616c69644f726967696e000804784f726967696e20697320696e76616c696420666f722073656e64696e672e2842616456657273696f6e00090421015468652076657273696f6e206f6620746865206056657273696f6e6564602076616c75652075736564206973206e6f742061626c6520746f20626520696e7465727072657465642e2c4261644c6f636174696f6e000a08410154686520676976656e206c6f636174696f6e20636f756c64206e6f7420626520757365642028652e672e20626563617573652069742063616e6e6f742062652065787072657373656420696e2074686560646573697265642076657273696f6e206f662058434d292e384e6f537562736372697074696f6e000b04bc546865207265666572656e63656420737562736372697074696f6e20636f756c64206e6f7420626520666f756e642e44416c726561647953756273637269626564000c041101546865206c6f636174696f6e20697320696e76616c69642073696e636520697420616c726561647920686173206120737562736372697074696f6e2066726f6d2075732e5843616e6e6f74436865636b4f757454656c65706f7274000d042901436f756c64206e6f7420636865636b2d6f7574207468652061737365747320666f722074656c65706f72746174696f6e20746f207468652064657374696e6174696f6e20636861696e2e284c6f7742616c616e6365000e044101546865206f776e657220646f6573206e6f74206f776e2028616c6c29206f662074686520617373657420746861742074686579207769736820746f20646f20746865206f7065726174696f6e206f6e2e30546f6f4d616e794c6f636b73000f04c0546865206173736574206f776e65722068617320746f6f206d616e79206c6f636b73206f6e207468652061737365742e4c4163636f756e744e6f74536f7665726569676e001004310154686520676976656e206163636f756e74206973206e6f7420616e206964656e7469666961626c6520736f7665726569676e206163636f756e7420666f7220616e79206c6f636174696f6e2e28466565734e6f744d65740011042901546865206f7065726174696f6e207265717569726564206665657320746f20626520706169642077686963682074686520696e69746961746f7220636f756c64206e6f74206d6565742e304c6f636b4e6f74466f756e64001204f4412072656d6f7465206c6f636b20776974682074686520636f72726573706f6e64696e67206461746120636f756c64206e6f7420626520666f756e642e14496e557365001304490154686520756e6c6f636b206f7065726174696f6e2063616e6e6f742073756363656564206265636175736520746865726520617265207374696c6c20636f6e73756d657273206f6620746865206c6f636b2e5c496e76616c696441737365744e6f74436f6e63726574650014046c496e76616c6964206e6f6e2d636f6e63726574652061737365742e68496e76616c69644173736574556e6b6e6f776e52657365727665001504f0496e76616c69642061737365742c207265736572766520636861696e20636f756c64206e6f742062652064657465726d696e656420666f722069742e78496e76616c69644173736574556e737570706f72746564526573657276650016044501496e76616c69642061737365742c20646f206e6f7420737570706f72742072656d6f7465206173736574207265736572766573207769746820646966666572656e7420666565732072657365727665732e3c546f6f4d616e7952657365727665730017044901546f6f206d616e7920617373657473207769746820646966666572656e742072657365727665206c6f636174696f6e732068617665206265656e20617474656d7074656420666f72207472616e736665722e604c6f63616c457865637574696f6e496e636f6d706c6574650018047c4c6f63616c2058434d20657865637574696f6e20696e636f6d706c6574652e38556e61626c65546f4465636f646500190454436f756c64206e6f74206465636f64652058434d2e2c58636d546f6f4c61726765001a088058434d20656e636f646564206c656e67746820697320746f6f206c617267652e1d0152657475726e6564207768656e20616e2058434d20656e636f646564206c656e677468206973206c6172676572207468616e20604d617858636d456e636f64656453697a65602e048054686520604572726f726020656e756d206f6620746869732070616c6c65742e0506085070616c6c65745f6d6573736167655f717565756524426f6f6b537461746504344d6573736167654f726967696e01e50100180114626567696e10012450616765496e64657800010c656e6410012450616765496e646578000114636f756e7410012450616765496e64657800014072656164795f6e65696768626f757273090601844f7074696f6e3c4e65696768626f7572733c4d6573736167654f726967696e3e3e0001346d6573736167655f636f756e7430010c75363400011073697a6530010c7536340000090604184f7074696f6e040454010d060108104e6f6e6500000010536f6d6504000d0600000100000d06085070616c6c65745f6d6573736167655f7175657565284e65696768626f75727304344d6573736167654f726967696e01e5010008011070726576e50101344d6573736167654f726967696e0001106e657874e50101344d6573736167654f726967696e0000110600000408e50110001506085070616c6c65745f6d6573736167655f71756575651050616765081053697a650110204865617053697a65000018012472656d61696e696e6710011053697a6500013872656d61696e696e675f73697a6510011053697a6500012c66697273745f696e64657810011053697a65000114666972737410011053697a650001106c61737410011053697a65000110686561701906019c426f756e6465645665633c75382c20496e746f5533323c4865617053697a652c2053697a653e3e000019060c4c626f756e6465645f636f6c6c656374696f6e732c626f756e6465645f76656328426f756e64656456656308045401080453000004003801185665633c543e00001d060c5070616c6c65745f6d6573736167655f71756575651870616c6c6574144572726f720404540001242c4e6f745265617061626c65000008490150616765206973206e6f74207265617061626c65206265636175736520697420686173206974656d732072656d61696e696e6720746f2062652070726f63657373656420616e64206973206e6f74206f6c641c656e6f7567682e184e6f50616765000104845061676520746f2062652072656170656420646f6573206e6f742065786973742e244e6f4d657373616765000204a8546865207265666572656e636564206d65737361676520636f756c64206e6f7420626520666f756e642e40416c726561647950726f6365737365640003040101546865206d6573736167652077617320616c72656164792070726f63657373656420616e642063616e6e6f742062652070726f63657373656420616761696e2e18517565756564000404ac546865206d6573736167652069732071756575656420666f722066757475726520657865637574696f6e2e48496e73756666696369656e74576569676874000504190154686572652069732074656d706f726172696c79206e6f7420656e6f7567682077656967687420746f20636f6e74696e756520736572766963696e67206d657373616765732e6054656d706f726172696c79556e70726f6365737361626c65000610a854686973206d6573736167652069732074656d706f726172696c7920756e70726f6365737361626c652e00590153756368206572726f7273206172652065787065637465642c20627574206e6f742067756172616e746565642c20746f207265736f6c7665207468656d73656c766573206576656e7475616c6c79207468726f756768247265747279696e672e2c517565756550617573656400070cec5468652071756575652069732070617573656420616e64206e6f206d6573736167652063616e2062652065786563757465642066726f6d2069742e001d01546869732063616e206368616e676520617420616e792074696d6520616e64206d6179207265736f6c766520696e20746865206675747572652062792072652d747279696e672e4c526563757273697665446973616c6c6f7765640008043101416e6f746865722063616c6c20697320696e2070726f677265737320616e64206e6565647320746f2066696e697368206265666f726520746869732063616c6c2063616e2068617070656e2e048054686520604572726f726020656e756d206f6620746869732070616c6c65742e21060000040800300025060c4c626f756e6465645f636f6c6c656374696f6e732c626f756e6465645f76656328426f756e6465645665630804540129060453000004002d0601185665633c543e00002906082c6f726d6c5f746f6b656e732c42616c616e63654c6f636b041c42616c616e63650118000801086964290101384c6f636b4964656e746966696572000118616d6f756e7418011c42616c616e636500002d060000022906003106082c6f726d6c5f746f6b656e732c4163636f756e7444617461041c42616c616e63650118000c01106672656518011c42616c616e6365000120726573657276656418011c42616c616e636500011866726f7a656e18011c42616c616e6365000035060c4c626f756e6465645f636f6c6c656374696f6e732c626f756e6465645f76656328426f756e6465645665630804540139060453000004003d0601185665633c543e00003906082c6f726d6c5f746f6b656e732c52657365727665446174610844526573657276654964656e7469666965720129011c42616c616e6365011800080108696429010144526573657276654964656e746966696572000118616d6f756e7418011c42616c616e636500003d0600000239060041060c2c6f726d6c5f746f6b656e73186d6f64756c65144572726f720404540001203442616c616e6365546f6f4c6f77000004585468652062616c616e636520697320746f6f206c6f775c416d6f756e74496e746f42616c616e63654661696c65640001049c43616e6e6f7420636f6e7665727420416d6f756e7420696e746f2042616c616e63652074797065544c69717569646974795265737472696374696f6e73000204d04661696c65642062656361757365206c6971756964697479207265737472696374696f6e732064756520746f206c6f636b696e67404d61784c6f636b734578636565646564000304b44661696c6564206265636175736520746865206d6178696d756d206c6f636b7320776173206578636565646564244b656570416c6976650004048c5472616e736665722f7061796d656e7420776f756c64206b696c6c206163636f756e74484578697374656e7469616c4465706f736974000504e856616c756520746f6f206c6f7720746f20637265617465206163636f756e742064756520746f206578697374656e7469616c206465706f7369742c446561644163636f756e740006048842656e6566696369617279206163636f756e74206d757374207072652d65786973743c546f6f4d616e795265736572766573000700048054686520604572726f726020656e756d206f6620746869732070616c6c65742e45060c4c626f756e6465645f636f6c6c656374696f6e732c626f756e6465645f76656328426f756e6465645665630804540134045300000400510201185665633c543e00004906084c77657465655f6d6573736167655f717565756524426f6f6b537461746504344d6573736167654f726967696e01f90100180114626567696e10012450616765496e64657800010c656e6410012450616765496e646578000114636f756e7410012450616765496e64657800014072656164795f6e65696768626f7572734d0601844f7074696f6e3c4e65696768626f7572733c4d6573736167654f726967696e3e3e0001346d6573736167655f636f756e7430010c75363400011073697a6530010c75363400004d0604184f7074696f6e0404540151060108104e6f6e6500000010536f6d650400510600000100005106084c77657465655f6d6573736167655f7175657565284e65696768626f75727304344d6573736167654f726967696e01f9010008011070726576f90101344d6573736167654f726967696e0001106e657874f90101344d6573736167654f726967696e0000550600000408f90110005906084c77657465655f6d6573736167655f71756575651050616765081053697a650110204865617053697a65000018012472656d61696e696e6710011053697a6500013872656d61696e696e675f73697a6510011053697a6500012c66697273745f696e64657810011053697a65000114666972737410011053697a650001106c61737410011053697a65000110686561705d06019c426f756e6465645665633c75382c20496e746f5533323c4865617053697a652c2053697a653e3e00005d060c4c626f756e6465645f636f6c6c656374696f6e732c626f756e6465645f76656328426f756e64656456656308045401080453000004003801185665633c543e000061060c4c77657465655f6d6573736167655f71756575651870616c6c6574144572726f720404540001242c4e6f745265617061626c65000008490150616765206973206e6f74207265617061626c65206265636175736520697420686173206974656d732072656d61696e696e6720746f2062652070726f63657373656420616e64206973206e6f74206f6c641c656e6f7567682e184e6f50616765000104845061676520746f2062652072656170656420646f6573206e6f742065786973742e244e6f4d657373616765000204a8546865207265666572656e636564206d65737361676520636f756c64206e6f7420626520666f756e642e40416c726561647950726f6365737365640003040101546865206d6573736167652077617320616c72656164792070726f63657373656420616e642063616e6e6f742062652070726f63657373656420616761696e2e18517565756564000404ac546865206d6573736167652069732071756575656420666f722066757475726520657865637574696f6e2e48496e73756666696369656e74576569676874000504190154686572652069732074656d706f726172696c79206e6f7420656e6f7567682077656967687420746f20636f6e74696e756520736572766963696e67206d657373616765732e6054656d706f726172696c79556e70726f6365737361626c65000610a854686973206d6573736167652069732074656d706f726172696c7920756e70726f6365737361626c652e00590153756368206572726f7273206172652065787065637465642c20627574206e6f742067756172616e746565642c20746f207265736f6c7665207468656d73656c766573206576656e7475616c6c79207468726f756768247265747279696e672e2c517565756550617573656400070cec5468652071756575652069732070617573656420616e64206e6f206d6573736167652063616e2062652065786563757465642066726f6d2069742e001d01546869732063616e206368616e676520617420616e792074696d6520616e64206d6179207265736f6c766520696e20746865206675747572652062792072652d747279696e672e4c526563757273697665446973616c6c6f7765640008043101416e6f746865722063616c6c20697320696e2070726f677265737320616e64206e6565647320746f2066696e697368206265666f726520746869732063616c6c2063616e2068617070656e2e048054686520604572726f726020656e756d206f6620746869732070616c6c65742e65060c3870616c6c65745f7574696c6974791870616c6c6574144572726f7204045400010430546f6f4d616e7943616c6c730000045c546f6f206d616e792063616c6c7320626174636865642e048054686520604572726f726020656e756d206f6620746869732070616c6c65742e6906082477657465655f6f72671c4f7267496e666f08244163636f756e74496401002c426c6f636b4e756d626572011000380108696430012844616f4173736574496400011c63726561746f720001244163636f756e74496400012c73746172745f626c6f636b10012c426c6f636b4e756d62657200013864616f5f6163636f756e745f69640001244163636f756e7449640001106e616d6538011c5665633c75383e0001106465736338011c5665633c75383e00011c707572706f736538011c5665633c75383e0001246d6574615f6461746138011c5665633c75383e000118696d5f61706938011c5665633c75383e000108626738011c5665633c75383e0001106c6f676f38011c5665633c75383e00010c696d6738011c5665633c75383e000120686f6d655f75726c38011c5665633c75383e0001187374617475739d04011853746174757300006d060c4c626f756e6465645f636f6c6c656374696f6e732c626f756e6465645f76656328426f756e646564566563080454017106045300000400750601185665633c543e00007106082477657465655f6f7267244775696c64496e666f08244163636f756e74496401002c426c6f636b4e756d626572011000200108696430011c4775696c64496400011c63726561746f720001244163636f756e74496400012c73746172745f626c6f636b10012c426c6f636b4e756d62657200013864616f5f6163636f756e745f69640001244163636f756e7449640001106e616d6538011c5665633c75383e0001106465736338011c5665633c75383e0001246d6574615f6461746138011c5665633c75383e0001187374617475739d040118537461747573000075060000027106007906000004083010007d060c4c626f756e6465645f636f6c6c656374696f6e732c626f756e6465645f76656328426f756e646564566563080454018106045300000400850601185665633c543e00008106082477657465655f6f72672c517561727465725461736b04244163636f756e74496401000018010869643001185461736b49640001106e616d6538011c5665633c75383e0001207072696f72697479080108753800011c63726561746f720001244163636f756e7449640001107461677338011c5665633c75383e00011873746174757308010875380000850600000281060089060c4c626f756e6465645f636f6c6c656374696f6e732c626f756e6465645f76656328426f756e6465645665630804540100045300000400a401185665633c543e00008d06000004083030009106082477657465655f6f72670c41707004244163636f756e7449640100001c0108696430012844616f4173736574496400010c75726c38011c5665633c75383e0001106e616d6538011c5665633c75383e0001106465736338011c5665633c75383e00011069636f6e38011c5665633c75383e00011c63726561746f720001244163636f756e7449640001187374617475739d040118537461747573000095060c4c626f756e6465645f636f6c6c656374696f6e732c626f756e6465645f76656328426f756e6465645665630804540199060453000004009d0601185665633c543e00009906082477657465655f6f7267184f7267417070042c426c6f636b4e756d626572011000200108696430012844616f417373657449640001186170705f696430012844616f4173736574496400012c73746172745f626c6f636b10012c426c6f636b4e756d6265720001106e616d6538011c5665633c75383e0001106465736338011c5665633c75383e00011069636f6e38011c5665633c75383e00010c75726c38011c5665633c75383e0001187374617475739d04011853746174757300009d06000002990600a10600000408300000a50608346672616d655f737570706f72742050616c6c65744964000004002901011c5b75383b20385d0000a9060c2477657465655f6f72671870616c6c6574144572726f7204045400014458486176654e6f4372656174655065726d697373696f6e00000884446f206e6f742068617665207065726d697373696f6e20746f206372656174652e54e6b2a1e69c89e5889be5bbbae79a84e69d83e999902444616f4578697374730001084844414f20616c7265616479206578697374733ce7bb84e7bb87e5b7b2e5ad98e59ca83044616f4e6f744578697374730002084c44414f20646f6573206e6f742065786973742e3ce7bb84e7bb87e4b88de5ad98e59ca8404775696c644372656174654572726f72000308486775696c6420637265617465206572726f7248e585ace4bc9ae5889be5bbbae5a4b1e8b4a5384775696c644e6f74457869737473000408546775696c6420646f6573206e6f742065786973742e3ce585ace4bc9ae4b88de5ad98e59ca828496e5661696c43616c6c0005085044414f20756e737570706f727465642063616c6c3ce697a0e69588e79a84e8b083e794a8244261644f726967696e0006083457726f6e67206f726967696e2e3ce99499e8afafe79a84e7bb84e7bb873444616f49644e6f744d617463680007085c4e6f7420746865206964206f6620746869732064616f2e4ce7bb84e7bb8720696420e4b88de6ada3e7a1ae2c4e616d65546f6f4c6f6e670008089c546865206465736372697074696f6e206f66207468652044414f20697320746f6f206c6f6e672e30e5908de5ad97e5a4aae995bf2c44657363546f6f4c6f6e670009089c546865206465736372697074696f6e206f66207468652044414f20697320746f6f206c6f6e672e48e7bb84e7bb87e4bb8be7bb8de5a4aae995bf38507572706f7365546f6f4c6f6e67000a089c546865206465736372697074696f6e206f66207468652044414f20697320746f6f206c6f6e672e48e7bb84e7bb87e79baee6a087e5a4aae995bf3c4d65746144617461546f6f4c6f6e67000b089c546865206465736372697074696f6e206f66207468652044414f20697320746f6f206c6f6e672e48e7bb84e7bb87e79baee6a087e5a4aae995bf204f766572666c6f77000c08944e756d65726963616c2063616c63756c6174696f6e206f766572666c6f77206572726f722e30e6baa2e587bae99499e8afaf38546f6f4d616e794d656d62657273000d08646d656d626572206e756d62657220697320746f6f206c6f6e6748e68890e59198e695b0e9878fe5a4aae5a4a73c42616444616f476f764f726967696e000e085457726f6e672064616f20676f76206f726967696e2e60e99499e8afafe79a8464616fe7bb84e7bb87e8b4a6e688b730426164476f764f726967696e000f085457726f6e672064616f20676f76206f726967696e2e60e99499e8afafe79a8464616fe7bb84e7bb87e8b4a6e688b73042616444616f476f763430330010084857726f6e672064616f20676f76203430332e60e99499e8afafe79a8464616fe7bb84e7bb87e8b4a6e688b7048054686520604572726f726020656e756d206f6620746869732070616c6c65742ead06083077657465655f6173736574733044616f4173736574496e666f08244163636f756e74496401003044616f41737365744d657461010d02000801146f776e65720001244163636f756e7449640001206d657461646174610d02013044616f41737365744d6574610000b1060c3077657465655f6173736574731870616c6c6574144572726f7204045400014c5c416d6f756e74496e746f42616c616e63654661696c65640000003442616c616e6365546f6f4c6f77000100484173736574416c72656164794578697374730002003841737365744e6f74457869737473000300444d657461646174614e6f744368616e67650004002c4d65746164617461457272000500204e6f744f776e65720006005c53686f756c644e6f744368616e6765446563696d616c73000700444d657461646174614e6f74457869737473000800384e617469766543757272656e63790009004843757272656e63794964546f6f4c61726765000a004043757272656e63794964546f6f4c6f77000b002444616f457869737473000c00444365785472616e73666572436c6f736564000d00384173736574496445786973746564000e00344465706f736974546f6f4c6f77000f00384465706f7369744e6f745a65726f001000404465706f736974526174654572726f720011003042616444616f4f726967696e001200048054686520604572726f726020656e756d206f6620746869732070616c6c65742eb5060c4c626f756e6465645f636f6c6c656374696f6e732c626f756e6465645f76656328426f756e64656456656308045401b906045300000400bd0601185665633c543e0000b906082877657465655f7375646f205375646f5461736b082c426c6f636b4e756d62657201101043616c6c01b503000c0108696410010c75333200012070726f706f73616cb503011043616c6c00011074696d6510012c426c6f636b4e756d6265720000bd06000002b90600c1060c2877657465655f7375646f1870616c6c6574144572726f7204045400010c1c4e6f745375646f000004984e6f742061207375646f206163636f756e742c206e6f7220612064616f206163636f756e742e34526f6f744e6f74457869737473000100305375646f52756e4572726f72000200048054686520604572726f726020656e756d206f6620746869732070616c6c65742ec5060c2c77657465655f6775696c641870616c6c6574144572726f720404540001043042616444616f4f726967696e000000048054686520604572726f726020656e756d206f6620746869732070616c6c65742ec9060c4c626f756e6465645f636f6c6c656374696f6e732c626f756e6465645f76656328426f756e64656456656308045401cd06045300000400d50601185665633c543e0000cd06083477657465655f70726f6a6563742c50726f6a656374496e666f04244163636f756e744964010000180108696430012450726f6a65637449640001106e616d6538011c5665633c75383e00012c6465736372697074696f6e38011c5665633c75383e00013864616f5f6163636f756e745f69640001244163636f756e74496400011c63726561746f720001244163636f756e744964000118737461747573d10601185374617475730000d106083477657465655f70726f6a656374185374617475730001081841637469766500000020496e41637469766500010000d506000002cd0600d9060c4c626f756e6465645f636f6c6c656374696f6e732c626f756e6465645f76656328426f756e64656456656308045401dd06045300000400ed0601185665633c543e0000dd06083477657465655f70726f6a656374205461736b496e666f08244163636f756e74496401001c42616c616e636501180034010869643001185461736b49640001106e616d6538011c5665633c75383e00012c6465736372697074696f6e38011c5665633c75383e000114706f696e74a502010c7531360001207072696f72697479080108753800012870726f6a6563745f696430012450726f6a656374496400011c63726561746f720001244163636f756e74496400011c72657761726473e10601685665633c2844616f417373657449642c2042616c616e6365293e0001306d61785f61737369676e6565080108753800012461737369676e656573a401385665633c4163636f756e7449643e000124726576696577657273a401385665633c4163636f756e7449643e000118736b696c6c7338011c5665633c75383e000118737461747573e90601285461736b5374617475730000e106000002e50600e50600000408301800e906083477657465655f70726f6a656374285461736b53746174757300011010546f446f00000028496e50726f677265737300010020496e52657669657700020010446f6e6500030000ed06000002dd0600f106083477657465655f70726f6a6563743052657669657753746174757304244163636f756e74496401000008011c7265636f726473f50601705665633c5265766965775265636f72643c4163636f756e7449643e3e00011474616c6c79fd06011454616c6c790000f506000002f90600f906083477657465655f70726f6a656374305265766965775265636f726404244163636f756e7449640100000c010c77686f0001244163636f756e7449640001106d65746138011c5665633c75383e0001186f7074696f6eb90401345265766965774f70696e696f6e0000fd06083477657465655f70726f6a6563741454616c6c79000008010c79657310010c7533320001086e6f10010c753332000001070c3477657465655f70726f6a6563741870616c6c6574144572726f7204045400013828496e5661696c43616c6c00000038546f6f4d616e794d656d626572730001004850726f6a6563744372656174654572726f720002002850726f6a6563743430330003003c416c726561647941737369676e65650004002c4e6f7441737369676e65650005002c4e6f7452657669657765720006003c416c726561647952657669657765720007003c546f6f4d616e7941737369676e6565000800305461736b4973537461726564000900284e6f5265766965776572000a0030526570656174526576696577000b003452657669657750656e64696e67000c003042616444616f4f726967696e000d00048054686520604572726f726020656e756d206f6620746869732070616c6c65742e05070c4c626f756e6465645f636f6c6c656374696f6e732c626f756e6465645f76656328426f756e64656456656308045401cd04045300000400c90401185665633c543e000009070000020d07000d07082477657465655f676f761c50726550726f70102c426c6f636b4e756d62657201101043616c6c01b50310486173680134244163636f756e7449640100001c0108696410012450726f70496e646578000110686173683401104861736800011063616c6cb503011043616c6c00012c6d656d6265725f64617461c10401284d656d6265724461746100011c637265617465720001244163636f756e744964000130706572696f645f696e64657810010c753332000114737461727410012c426c6f636b4e756d6265720000110700000408a418001507082477657465655f676f761050726f700c2c426c6f636b4e756d62657201101043616c6c01b5031c42616c616e63650118001c0108696410012450726f70496e64657800012070726f706f73616cb503011043616c6c000114737461727410012c426c6f636b4e756d626572000130706572696f645f696e64657810010c75333200011474616c6c791907013854616c6c793c42616c616e63653e00012c6d656d6265725f64617461c10401284d656d626572446174610001187374617475731d07012850726f7053746174757300001907082477657465655f676f761454616c6c79041c42616c616e636501180008010c79657318011c42616c616e63650001086e6f18011c42616c616e636500001d07082477657465655f676f762850726f7053746174757300010c1c4f6e676f696e6700000020417070726f7665640001002052656a656374656400020000210700000225070025070000040818100029070000022d07002d07082477657465655f676f7620566f7465496e666f181444616f4964013018506c656467650121022c426c6f636b4e756d626572011028566f746557656967687401181c4f70696e696f6e01c5042450726f70496e64657801100018011864616f5f696430011444616f4964000118706c6564676521020118506c6564676500011c6f70696e696f6ec504011c4f70696e696f6e00012c766f74655f776569676874180128566f7465576569676874000130756e6c6f636b5f626c6f636b10012c426c6f636b4e756d62657200012870726f705f696e64657810012450726f70496e646578000031070c2477657465655f676f761870616c6c6574144572726f7204045400014c204f766572666c6f7700000474496e746567657220636f6d7075746174696f6e206f766572666c6f772e344465706f736974546f6f4c6f770001047c496e73756666696369656e7420616d6f756e74206f66206465706f7369742e40546f6f4d616e7950726f706f73616c73000204904d6178696d756d206e756d626572206f662070726f706f73616c7320726561636865642e3c50726f706f73616c4d697373696e670003046050726f706f73616c20646f6573206e6f742065786973742e2c4e6f6e6557616974696e670004048c546865726520617265206e6f2070726f706f73616c7320696e2070726f67726573732e3450726f704e6f744578697374730005045050726f7020646f6573206e6f742065786973742e3050726f7046696e69736865640006042850726f7020656e64732e28566f74654e6f74456e640007046050726f7020766f74696e6720697320756e6465727761792e2c496e44656c617954696d650008045c44656c6179656420657865637574696f6e2074696d652e1c566f7465456e640009045850726f7020766f74696e672068617320656e6465642e38566f7465526564756e64616e6379000a0418e68a95e7a5a844566f7465456e644275744e6f7450617373000b0490566f74696e6720636c6f736564206275742070726f706f73616c2072656a65637465642e304e6f745461626c6554696d65000c048449742773206e6f742074696d6520746f206f70656e2061206e65772070726f702e40566f7465576569676874546f6f4c6f77000d042c426164206f726967696e2e3c506c656467654e6f74456e6f756768000e0418e698afe79a8418476f76343033000f0430e6b2a1e69c89e69d83e9999018476f7634303400100430e6b2a1e69c89e689bee588b024506572696f643430340011043ce697a0e69588e79a84e8bda8e981933042616444616f4f726967696e00120448e99499e8afafe79a8444414fe7bb84e7bb87048054686520604572726f726020656e756d206f6620746869732070616c6c65742e35070c3877657465655f74726561737572791870616c6c6574144572726f72040454000108484d617842616c616e636545786365656465640000043c44414f206964206d69736d617463683042616444616f4f726967696e000100048054686520604572726f726020656e756d206f6620746869732070616c6c65742e3907082477657465655f6170701854656541707008244163636f756e74496401002c426c6f636b4e756d6265720110003801086964300120546565417070496400011c63726561746f720001244163636f756e74496400012c636f6e74726163745f69640001244163636f756e74496400012c73746172745f626c6f636b10012c426c6f636b4e756d6265720001106e616d6538011c5665633c75383e000114696d61676538011c5665633c75383e0001106d65746138011c5665633c75383e00011c636f6d6d616e64e104011c436f6d6d616e64000110706f7274d90401305665633c536572766963653e0001086372090501084372000138736964655f636f6e7461696e6572010501385665633c436f6e7461696e65723e0001146c6576656c080130436c75737465724c6576656c00012c7465655f76657273696f6e0d05012854454556657273696f6e000118737461747573080128576f726b53746174757300003d07082477657465655f61707014507269636500000c011c6370755f70657210010c7533320001286d656d6f72795f70657210010c7533320001206469736b5f70657210010c753332000041070000040830a5020045070c4077657465655f7072696d6974697665731474797065730c456e7600000c0114696e646578a502010c7531360001046bf1040118456e764b65790001047638011c5665633c75383e000049070c2477657465655f6170701870616c6c6574144572726f72040454000120444170705374617475734d69736d617463680000085041707020737461747573206d69736d617463682e3ce78ab6e68081e4b88de58cb9e9858d2c4170704e6f7445786973740001083c417070206e6f74206578697374732e30417070e4b88de5ad98e59ca828546f6f4d616e7941707000020834546f6f206d616e79206170702e4041707020e695b0e9878fe8bf87e5a49a1841707034303300030820417070203430332e1c41707020343033404e6f74456e6f75676842616c616e63650004084c4e6f7420656e6f7567682062616c616e63652e30e4bd99e9a29de4b88de8b6b3344c6576656c4e6f744578697374000508444c6576656c206e6f74206578697374732e3ce7ad89e7baa7e4b88de5ad98e59ca824437075546f6f4c6f770006082c43707520746f6f204c6f772843707520e8bf87e4bd8e304d656d6f7279546f6f4c6f77000708384d656d6f727920746f6f204c6f7730e58685e5ad98e8bf87e4bd8e048054686520604572726f726020656e756d206f6620746869732070616c6c65742e4d07082877657465655f7461736b1c5465655461736b08244163636f756e74496401002c426c6f636b4e756d6265720110003401086964300120546565417070496400011c63726561746f720001244163636f756e74496400012c636f6e74726163745f69640001244163636f756e74496400012c73746172745f626c6f636b10012c426c6f636b4e756d6265720001106e616d6538011c5665633c75383e000114696d61676538011c5665633c75383e0001106d65746138011c5665633c75383e00011c636f6d6d616e64e104011c436f6d6d616e64000110706f7274d90401305665633c536572766963653e000118737461747573080128576f726b53746174757300010863720905010843720001146c6576656c080130436c75737465724c6576656c00012c7465655f76657273696f6e0d05012854454556657273696f6e00005107082877657465655f7461736b14507269636500000c01346370755f7065725f626c6f636b10010c7533320001406d656d6f72795f7065725f626c6f636b10010c7533320001386469736b5f7065725f626c6f636b10010c753332000055070c2877657465655f7461736b1870616c6c6574144572726f72040454000120485461736b5374617475734d69736d61746368000004545461736b20737461747573206d69736d617463682e345461736b4e6f7445786973747300010440526f6f74206e6f74206578697374732e2c546f6f4d616e795461736b00020434546f6f206d616e79206170702e1c5461736b343033000304245461736b203430332e404e6f74456e6f75676842616c616e63650004044c4e6f7420656e6f7567682062616c616e63652e305461736b497352756e696e670005043c5461736b2069732072756e696e672e305461736b497353746f706564000604345461736b2069732073746f702e384c6576656c4e6f74457869737473000704444c6576656c206e6f74206578697374732e048054686520604572726f726020656e756d206f6620746869732070616c6c65742e5907082477657465655f6770751847707541707008244163636f756e74496401002c426c6f636b4e756d6265720110003801086964300120546565417070496400011c63726561746f720001244163636f756e74496400012c636f6e74726163745f69640001244163636f756e74496400012c73746172745f626c6f636b10012c426c6f636b4e756d6265720001106e616d6538011c5665633c75383e000114696d61676538011c5665633c75383e0001106d65746138011c5665633c75383e00011c636f6d6d616e64e104011c436f6d6d616e64000110706f7274d90401305665633c536572766963653e000118737461747573080108753800010863720905010843720001146c6576656c080108753800012c7465655f76657273696f6e0d05012854454556657273696f6e000138736964655f636f6e7461696e6572010501385665633c436f6e7461696e65723e00005d07082477657465655f67707514507269636500000c011c6370755f70657210010c7533320001286d656d6f72795f70657210010c7533320001206469736b5f70657210010c753332000061070c2477657465655f6770751870616c6c6574144572726f72040454000120444170705374617475734d69736d617463680000085041707020737461747573206d69736d617463682e3ce78ab6e68081e4b88de58cb9e9858d2c4170704e6f7445786973740001083c417070206e6f74206578697374732e30417070e4b88de5ad98e59ca828546f6f4d616e7941707000020834546f6f206d616e79206170702e4041707020e695b0e9878fe8bf87e5a49a1841707034303300030820417070203430332e1c41707020343033404e6f74456e6f75676842616c616e63650004084c4e6f7420656e6f7567682062616c616e63652e30e4bd99e9a29de4b88de8b6b3344c6576656c4e6f744578697374000508444c6576656c206e6f74206578697374732e3ce7ad89e7baa7e4b88de5ad98e59ca824437075546f6f4c6f770006082c43707520746f6f204c6f772843707520e8bf87e4bd8e304d656d6f7279546f6f4c6f77000708384d656d6f727920746f6f204c6f7730e58685e5ad98e8bf87e4bd8e048054686520604572726f726020656e756d206f6620746869732070616c6c65742e65070c3077657465655f776f726b6572147479706573284b3873436c757374657208244163636f756e74496401002c426c6f636b4e756d6265720110002401086964300124436c7573746572496400011c6163636f756e740001244163636f756e74496400012c73746172745f626c6f636b10012c426c6f636b4e756d62657200012873746f705f626c6f636bd902014c4f7074696f6e3c426c6f636b4e756d6265723e0001387465726d696e616c5f626c6f636bd902014c4f7074696f6e3c426c6f636b4e756d6265723e0001106e616d6538011c5665633c75383e00010869702505011c5665633c49703e000110706f727410010c753332000118737461747573080108753800006907000004083d053d05006d070c3077657465655f776f726b6572147479706573304465706f7369745072696365000018011c6370755f70657210010c75333200012c63766d5f6370755f70657210010c7533320001286d656d6f72795f70657210010c75333200013863766d5f6d656d6f72795f70657210010c7533320001206469736b5f70657210010c75333200011c6770755f70657210010c753332000071070c3077657465655f776f726b65721474797065731c4465706f736974041c42616c616e63650118001c011c6465706f73697418011c42616c616e636500010c63707510010c75333200011c63766d5f63707510010c75333200010c6d656d10010c75333200011c63766d5f6d656d10010c7533320001106469736b10010c75333200010c67707510010c7533320000750700000408302d020079070c3077657465655f776f726b657214747970657350436c7573746572436f6e74726163745374617465082c426c6f636b4e756d6265720110244163636f756e7449640100000c013073746172745f6e756d62657210012c426c6f636b4e756d626572000110757365720001244163636f756e74496400011c776f726b5f69642d020118576f726b496400007d07000004082d02300081070c3077657465655f776f726b657214747970657334436f6e74726163745374617465082c426c6f636b4e756d62657201101c42616c616e63650118000c0130626c6f636b5f6e756d62657210012c426c6f636b4e756d6265720001186d696e74656418011c42616c616e63650001287769746864726177616c18011c42616c616e636500008507000004082d02100089070c3077657465655f776f726b65721870616c6c6574144572726f7204045400015c444170705374617475734d69736d617463680000084c41707020737461747573206d69736d6174636854e7a88be5ba8fe78ab6e68081e4b88de58cb9e9858d3c436c7573746572497345786973747300010844436c7573746572206973206578697374733ce99b86e7bea4e5b7b2e5ad98e59ca840436c75737465724e6f7445786973747300020854436c7573746572206973206e6f74206578697374733ce99b86e7bea4e4b88de5ad98e59ca844436c75737465724e6f745374617274656400030858436c7573746572206973206e6f7420737461727465643ce99b86e7bea4e69caae590afe58aa850436c757374657243616e4e6f7453746f707065640004085c436c75737465722063616e206e6f742073746f7070656448e99b86e7bea4e697a0e6b395e5819ce6ada228546f6f4d616e7941707000050838546f6f206d616e7920617070732048e7a88be5ba8fe695b0e9878fe8bf87e5a49a244e6f436c7573746572000608284e6f20636c757374657230e6b2a1e69c89e99b86e7bea4304170704e6f7445786973747300070844417070206973206e6f74206578697374733ce7a88be5ba8fe4b88de5ad98e59ca834576f726b4e6f7445786973747300080848576f726b206973206e6f74206578697374733ce5b7a5e4bd9ce4b88de5ad98e59ca84c496e73756666696369656e7442616c616e636500090854496e73756666696369656e742062616c616e63652e30e4bd99e9a29de4b88de8b6b364496e73756666696369656e744d696e74656442616c616e6365000a086c496e73756666696369656e74204d696e7465642042616c616e636548e59088e7baa6e4bd99e9a29de4b88de8b6b3345461736b4e6f74457869737473000b08485461736b206973206e6f74206578697374733ce4bbbbe58aa1e4b88de5ad98e59ca838576f726b4e6f7453746172746564000c084c576f726b206973206e6f7420737461727465643ce5b7a5e4bd9ce69caae590afe58aa8344e6f74416c6c6f776564343033000d082c4e6f7420616c6c6f77656424e69caae58581e8aeb854436c757374657252656769737465724d6973734970000e0860436c7573746572207265676973746572206d69737320697050e99b86e7bea4e6b3a8e5868ce7bcbae5b0916970344970466f726d61744572726f72000f083c497020666f726d6174206572726f72386970e6a0bce5bc8fe99499e8afaf4c496e73756666696369656e744465706f73697400100854496e73756666696369656e74206465706f7369742e30e68ab5e68abce4b88de8b6b3404475706c69636174654465706f736974001108484475706c6963617465206465706f7369742e30e9878de5a48de68ab5e68abc384c6576656c4e6f744578697374730012084c4c6576656c206973206e6f74206578697374733ce7ad89e7baa7e4b88de5ad98e59ca8384e6f436c7573746572466f756e64001308404e6f20636c757374657220666f756e6448e6b2a1e69c89e689bee588b0e99b86e7bea450576f726b426c6f636b4e756d6265724572726f720014085c576f726b20626c6f636b206e756d626572206572726f7254e5b7a5e4bd9ce59d97e9ab98e5baa6e99499e8afaf34526561736f6e546f6f4c6f6e670015083c526561736f6e20746f6f206c6f6e6730e79086e794b1e5a4aae995bf44576f726b547970654e6f7445786973747300160850576f726b2074797065206e6f742065786973747354e5b7a5e4bd9ce7b1bbe59e8be4b88de5ad98e59ca8048054686520604572726f726020656e756d206f6620746869732070616c6c65742e8d070c4c626f756e6465645f636f6c6c656374696f6e732c626f756e6465645f76656328426f756e64656456656308045401080453000004003801185665633c543e000091070c4070616c6c65745f636f6e747261637473107761736d20436f6465496e666f04045400001401146f776e65720001384163636f756e7449644f663c543e00011c6465706f736974dc013042616c616e63654f663c543e000120726566636f756e742c010c75363400012c64657465726d696e69736d4905012c44657465726d696e69736d000120636f64655f6c656e10010c753332000095070c4070616c6c65745f636f6e7472616374731c73746f7261676530436f6e7472616374496e666f040454000020011c747269655f696499070118547269654964000124636f64655f6861736834012c436f6465486173683c543e00013473746f726167655f627974657310010c75333200013473746f726167655f6974656d7310010c75333200015073746f726167655f627974655f6465706f73697418013042616c616e63654f663c543e00015073746f726167655f6974656d5f6465706f73697418013042616c616e63654f663c543e00015073746f726167655f626173655f6465706f73697418013042616c616e63654f663c543e00015464656c65676174655f646570656e64656e636965739d07011d01426f756e64656442547265654d61703c436f6465486173683c543e2c2042616c616e63654f663c543e2c20543a3a0a4d617844656c6567617465446570656e64656e636965733e000099070c4c626f756e6465645f636f6c6c656374696f6e732c626f756e6465645f76656328426f756e64656456656308045401080453000004003801185665633c543e00009d070c4c626f756e6465645f636f6c6c656374696f6e7344626f756e6465645f62747265655f6d61703c426f756e64656442547265654d61700c044b013404560118045300000400a107013842547265654d61703c4b2c20563e0000a107042042547265654d617008044b013404560118000400a507000000a507000002a90700a90700000408341800ad070c4070616c6c65745f636f6e7472616374731c73746f726167655044656c6574696f6e51756575654d616e616765720404540000080138696e736572745f636f756e74657210010c75333200013864656c6574655f636f756e74657210010c7533320000b1070c4c626f756e6465645f636f6c6c656374696f6e732c626f756e6465645f76656328426f756e64656456656308045401080453000004003801185665633c543e0000b5070c4070616c6c65745f636f6e747261637473207363686564756c65205363686564756c6504045400000c01186c696d697473b90701184c696d69747300014c696e737472756374696f6e5f77656967687473bd070154496e737472756374696f6e576569676874733c543e00013c686f73745f666e5f77656967687473c1070140486f7374466e576569676874733c543e0000b9070c4070616c6c65745f636f6e747261637473207363686564756c65184c696d69747300001401306576656e745f746f7069637310010c7533320001306d656d6f72795f706167657310010c75333200012c7375626a6563745f6c656e10010c75333200012c7061796c6f61645f6c656e10010c75333200013872756e74696d655f6d656d6f727910010c7533320000bd070c4070616c6c65745f636f6e747261637473207363686564756c6548496e737472756374696f6e5765696768747304045400000401106261736510010c7533320000c1070c4070616c6c65745f636f6e747261637473207363686564756c6534486f7374466e576569676874730404540000fc011863616c6c657228011857656967687400012c69735f636f6e7472616374280118576569676874000124636f64655f686173682801185765696768740001346f776e5f636f64655f6861736828011857656967687400014063616c6c65725f69735f6f726967696e28011857656967687400013863616c6c65725f69735f726f6f7428011857656967687400011c616464726573732801185765696768740001206761735f6c65667428011857656967687400011c62616c616e636528011857656967687400014476616c75655f7472616e7366657272656428011857656967687400013c6d696e696d756d5f62616c616e6365280118576569676874000130626c6f636b5f6e756d62657228011857656967687400010c6e6f772801185765696768740001347765696768745f746f5f666565280118576569676874000114696e707574280118576569676874000138696e7075745f7065725f62797465280118576569676874000120722372657475726e28011857656967687400013c72657475726e5f7065725f627974652801185765696768740001247465726d696e61746528011857656967687400011872616e646f6d2801185765696768740001346465706f7369745f6576656e7428011857656967687400015c6465706f7369745f6576656e745f7065725f746f7069632801185765696768740001586465706f7369745f6576656e745f7065725f6279746528011857656967687400013464656275675f6d65737361676528011857656967687400015864656275675f6d6573736167655f7065725f6279746528011857656967687400012c7365745f73746f726167652801185765696768740001607365745f73746f726167655f7065725f6e65775f627974652801185765696768740001607365745f73746f726167655f7065725f6f6c645f627974652801185765696768740001347365745f636f64655f68617368280118576569676874000134636c6561725f73746f72616765280118576569676874000158636c6561725f73746f726167655f7065725f62797465280118576569676874000140636f6e7461696e735f73746f72616765280118576569676874000164636f6e7461696e735f73746f726167655f7065725f6279746528011857656967687400012c6765745f73746f726167652801185765696768740001506765745f73746f726167655f7065725f6279746528011857656967687400013074616b655f73746f7261676528011857656967687400015474616b655f73746f726167655f7065725f627974652801185765696768740001207472616e7366657228011857656967687400011063616c6c28011857656967687400013464656c65676174655f63616c6c28011857656967687400015c63616c6c5f7472616e736665725f73757263686172676528011857656967687400015063616c6c5f7065725f636c6f6e65645f6279746528011857656967687400012c696e7374616e7469617465280118576569676874000178696e7374616e74696174655f7472616e736665725f737572636861726765280118576569676874000168696e7374616e74696174655f7065725f696e7075745f62797465280118576569676874000164696e7374616e74696174655f7065725f73616c745f62797465280118576569676874000134686173685f736861325f323536280118576569676874000158686173685f736861325f3235365f7065725f6279746528011857656967687400013c686173685f6b656363616b5f323536280118576569676874000160686173685f6b656363616b5f3235365f7065725f6279746528011857656967687400013c686173685f626c616b65325f323536280118576569676874000160686173685f626c616b65325f3235365f7065725f6279746528011857656967687400013c686173685f626c616b65325f313238280118576569676874000160686173685f626c616b65325f3132385f7065725f6279746528011857656967687400013465636473615f7265636f76657228011857656967687400015065636473615f746f5f6574685f61646472657373280118576569676874000138737232353531395f76657269667928011857656967687400015c737232353531395f7665726966795f7065725f627974652801185765696768740001407265656e7472616e63655f636f756e742801185765696768740001606163636f756e745f7265656e7472616e63655f636f756e7428011857656967687400014c696e7374616e74696174696f6e5f6e6f6e63652801185765696768740001606c6f636b5f64656c65676174655f646570656e64656e6379280118576569676874000168756e6c6f636b5f64656c65676174655f646570656e64656e63792801185765696768740000c5070c3473705f61726974686d65746963287065725f7468696e67731c50657262696c6c0000040010010c7533320000c907084070616c6c65745f636f6e7472616374732c456e7669726f6e6d656e7404045400001801286163636f756e745f6964cd07017c456e7669726f6e6d656e74547970653c4163636f756e7449644f663c543e3e00011c62616c616e6365d1070174456e7669726f6e6d656e74547970653c42616c616e63654f663c543e3e00011068617368d50701c8456e7669726f6e6d656e74547970653c3c54206173206672616d655f73797374656d3a3a436f6e6669673e3a3a486173683e000118686173686572d90701d4456e7669726f6e6d656e74547970653c3c54206173206672616d655f73797374656d3a3a436f6e6669673e3a3a48617368696e673e00012474696d657374616d70e1070170456e7669726f6e6d656e74547970653c4d6f6d656e744f663c543e3e000130626c6f636b5f6e756d626572e5070188456e7669726f6e6d656e74547970653c426c6f636b4e756d626572466f723c543e3e0000cd07084070616c6c65745f636f6e7472616374733c456e7669726f6e6d656e74547970650404540100000000d107084070616c6c65745f636f6e7472616374733c456e7669726f6e6d656e74547970650404540118000000d507084070616c6c65745f636f6e7472616374733c456e7669726f6e6d656e74547970650404540134000000d907084070616c6c65745f636f6e7472616374733c456e7669726f6e6d656e745479706504045401dd07000000dd070c2873705f72756e74696d65187472616974732c426c616b6554776f32353600000000e107084070616c6c65745f636f6e7472616374733c456e7669726f6e6d656e74547970650404540130000000e507084070616c6c65745f636f6e7472616374733c456e7669726f6e6d656e74547970650404540110000000e907084070616c6c65745f636f6e7472616374732841706956657273696f6e00000400a502010c7531360000ed070c4070616c6c65745f636f6e7472616374731870616c6c6574144572726f7204045400018c3c496e76616c69645363686564756c650000041901496e76616c6964207363686564756c6520737570706c6965642c20652e672e2077697468207a65726f20776569676874206f662061206261736963206f7065726174696f6e2e40496e76616c696443616c6c466c6167730001043501496e76616c696420636f6d62696e6174696f6e206f6620666c61677320737570706c69656420746f20607365616c5f63616c6c60206f7220607365616c5f64656c65676174655f63616c6c602e204f75744f66476173000204b854686520657865637574656420636f6e7472616374206578686175737465642069747320676173206c696d69742e504f7574707574427566666572546f6f536d616c6c0003040101546865206f75747075742062756666657220737570706c69656420746f206120636f6e7472616374204150492063616c6c2077617320746f6f20736d616c6c2e385472616e736665724661696c65640004083501506572666f726d696e672074686520726571756573746564207472616e73666572206661696c65642e2050726f6261626c7920626563617573652074686572652069736e277420656e6f75676894667265652062616c616e636520696e207468652073656e6465722773206163636f756e742e4c4d617843616c6c4465707468526561636865640005082101506572666f726d696e6720612063616c6c207761732064656e6965642062656361757365207468652063616c6c696e67206465707468207265616368656420746865206c696d6974946f6620776861742069732073706563696669656420696e20746865207363686564756c652e40436f6e74726163744e6f74466f756e64000604bc4e6f20636f6e74726163742077617320666f756e64206174207468652073706563696669656420616464726573732e30436f6465546f6f4c617267650007083d0154686520636f646520737570706c69656420746f2060696e7374616e74696174655f776974685f636f646560206578636565647320746865206c696d69742073706563696669656420696e207468654463757272656e74207363686564756c652e30436f64654e6f74466f756e64000804c44e6f20636f646520636f756c6420626520666f756e642061742074686520737570706c69656420636f646520686173682e40436f6465496e666f4e6f74466f756e64000904d84e6f20636f646520696e666f20636f756c6420626520666f756e642061742074686520737570706c69656420636f646520686173682e2c4f75744f66426f756e6473000a0425014120627566666572206f757473696465206f662073616e64626f78206d656d6f7279207761732070617373656420746f206120636f6e7472616374204150492066756e6374696f6e2e384465636f64696e674661696c6564000b042901496e7075742070617373656420746f206120636f6e7472616374204150492066756e6374696f6e206661696c656420746f206465636f646520617320657870656374656420747970652e3c436f6e747261637454726170706564000c0488436f6e7472616374207472617070656420647572696e6720657865637574696f6e2e3456616c7565546f6f4c61726765000d04cc5468652073697a6520646566696e656420696e2060543a3a4d617856616c756553697a6560207761732065786365656465642e605465726d696e617465645768696c655265656e7472616e74000e0819015465726d696e6174696f6e206f66206120636f6e7472616374206973206e6f7420616c6c6f776564207768696c652074686520636f6e747261637420697320616c7265616479e06f6e207468652063616c6c20737461636b2e2043616e2062652074726967676572656420627920607365616c5f7465726d696e617465602e38496e707574466f72776172646564000f044101607365616c5f63616c6c6020666f72776172646564207468697320636f6e74726163747320696e7075742e204974207468657265666f7265206973206e6f206c6f6e67657220617661696c61626c652e5052616e646f6d5375626a656374546f6f4c6f6e67001004d8546865207375626a6563742070617373656420746f20607365616c5f72616e646f6d60206578636565647320746865206c696d69742e34546f6f4d616e79546f706963730011041d0154686520616d6f756e74206f6620746f706963732070617373656420746f20607365616c5f6465706f7369745f6576656e747360206578636565647320746865206c696d69742e404e6f436861696e457874656e73696f6e00120c450154686520636861696e20646f6573206e6f742070726f76696465206120636861696e20657874656e73696f6e2e2043616c6c696e672074686520636861696e20657874656e73696f6e20726573756c74734d01696e2074686973206572726f722e204e6f74652074686174207468697320757375616c6c79202073686f756c646e27742068617070656e206173206465706c6f79696e67207375636820636f6e7472616374733069732072656a65637465642e3c58434d4465636f64654661696c6564001304844661696c656420746f206465636f6465207468652058434d2070726f6772616d2e444475706c6963617465436f6e7472616374001404c84120636f6e74726163742077697468207468652073616d65204163636f756e74496420616c7265616479206578697374732e5c5465726d696e61746564496e436f6e7374727563746f7200150cb84120636f6e74726163742073656c66206465737472756374656420696e2069747320636f6e7374727563746f722e00d0546869732063616e2062652074726967676572656420627920612063616c6c20746f20607365616c5f7465726d696e617465602e405265656e7472616e636544656e6965640016100d01412063616c6c20747269656420746f20696e766f6b65206120636f6e7472616374207468617420697320666c6167676564206173206e6f6e2d7265656e7472616e742e5d01546865206f6e6c79206f74686572206361757365206973207468617420612063616c6c2066726f6d206120636f6e747261637420696e746f207468652072756e74696d6520747269656420746f2063616c6c206261636b4901696e746f206070616c6c65742d636f6e747261637473602e205468697320776f756c64206d616b65207468652077686f6c652070616c6c6574207265656e7472616e7420776974682072656761726420746fbc636f6e747261637420636f646520657865637574696f6e207768696368206973206e6f7420737570706f727465642e7053746f726167654465706f7369744e6f74456e6f75676846756e647300170421014f726967696e20646f65736e2774206861766520656e6f7567682062616c616e636520746f20706179207468652072657175697265642073746f72616765206465706f736974732e7053746f726167654465706f7369744c696d69744578686175737465640018040d014d6f72652073746f72616765207761732063726561746564207468616e20616c6c6f776564206279207468652073746f72616765206465706f736974206c696d69742e24436f6465496e5573650019044901436f64652072656d6f76616c207761732064656e69656420626563617573652074686520636f6465206973207374696c6c20696e20757365206279206174206c65617374206f6e6520636f6e74726163742e40436f6e74726163745265766572746564001a10250154686520636f6e74726163742072616e20746f20636f6d706c6574696f6e20627574206465636964656420746f20726576657274206974732073746f72616765206368616e6765732e4901506c65617365206e6f746520746861742074686973206572726f72206973206f6e6c792072657475726e65642066726f6d2065787472696e736963732e205768656e2063616c6c6564206469726563746c795d016f72207669612052504320616e20604f6b602077696c6c2062652072657475726e65642e20496e20746869732063617365207468652063616c6c6572206e6565647320746f20696e73706563742074686520666c616773c4746f2064657465726d696e652077686574686572206120726576657273696f6e206861732074616b656e20706c6163652e30436f646552656a6563746564001b20f854686520636f6e7472616374277320636f64652077617320666f756e6420746f20626520696e76616c696420647572696e672076616c69646174696f6e2e004d01546865206d6f7374206c696b656c79206361757365206f662074686973206973207468617420616e20415049207761732075736564207768696368206973206e6f7420737570706f727465642062792074686551016e6f64652e20546869732068617070656e7320696620616e206f6c646572206e6f6465206973207573656420776974682061206e65772076657273696f6e206f6620696e6b212e20547279207570646174696e67a8796f7572206e6f646520746f20746865206e657765737420617661696c61626c652076657273696f6e2e00510141206d6f72652064657461696c6564206572726f722063616e20626520666f756e64206f6e20746865206e6f646520636f6e736f6c65206966206465627567206d657373616765732061726520656e61626c6564a8627920737570706c79696e6720602d6c72756e74696d653a3a636f6e7472616374733d6465627567602e3c496e64657465726d696e6973746963001c042901416e20696e64657465726d696e697374696320636f646520776173207573656420696e206120636f6e746578742077686572652074686973206973206e6f74207065726d69747465642e4c4d6967726174696f6e496e50726f6772657373001d042501412070656e64696e67206d6967726174696f6e206e6565647320746f20636f6d706c657465206265666f7265207468652065787472696e7369632063616e2062652063616c6c65642e504e6f4d6967726174696f6e506572666f726d6564001e040d014d6967726174652064697370617463682063616c6c2077617320617474656d7074656420627574206e6f206d6967726174696f6e2077617320706572666f726d65642e784d617844656c6567617465446570656e64656e6369657352656163686564001f04150154686520636f6e747261637420686173207265616368656420697473206d6178696d756d206e756d626572206f662064656c656761746520646570656e64656e636965732e6844656c6567617465446570656e64656e63794e6f74466f756e64002004150154686520646570656e64656e637920776173206e6f7420666f756e6420696e2074686520636f6e747261637427732064656c656761746520646570656e64656e636965732e7c44656c6567617465446570656e64656e6379416c7265616479457869737473002104f854686520636f6e747261637420616c726561647920646570656e6473206f6e2074686520676976656e2064656c656761746520646570656e64656e63792e8443616e6e6f7441646453656c66417344656c6567617465446570656e64656e6379002204290143616e206e6f742061646420612064656c656761746520646570656e64656e637920746f2074686520636f64652068617368206f662074686520636f6e747261637420697473656c662e048054686520604572726f726020656e756d206f6620746869732070616c6c65742ef107102873705f72756e74696d651c67656e657269634c756e636865636b65645f65787472696e73696348556e636865636b656445787472696e736963101c41646472657373019d031043616c6c01b503245369676e617475726501f50714457874726101010800040038000000f507082873705f72756e74696d65384d756c74695369676e617475726500010c1c456432353531390400f9070148656432353531393a3a5369676e61747572650000001c537232353531390400f9070148737232353531393a3a5369676e61747572650001001445636473610400fd07014065636473613a3a5369676e617475726500020000f907000003400000000800fd07000003410000000800010800000424050809080d08110815081d0821082508290800050810306672616d655f73797374656d28657874656e73696f6e7354636865636b5f6e6f6e5f7a65726f5f73656e64657248436865636b4e6f6e5a65726f53656e64657204045400000000090810306672616d655f73797374656d28657874656e73696f6e7348636865636b5f737065635f76657273696f6e40436865636b5370656356657273696f6e040454000000000d0810306672616d655f73797374656d28657874656e73696f6e7340636865636b5f74785f76657273696f6e38436865636b547856657273696f6e04045400000000110810306672616d655f73797374656d28657874656e73696f6e7334636865636b5f67656e6573697330436865636b47656e6573697304045400000000150810306672616d655f73797374656d28657874656e73696f6e733c636865636b5f6d6f7274616c69747938436865636b4d6f7274616c697479040454000004001908010c45726100001908102873705f72756e74696d651c67656e657269630c6572610c4572610001010420496d6d6f7274616c0000001c4d6f7274616c31040008000001001c4d6f7274616c32040008000002001c4d6f7274616c33040008000003001c4d6f7274616c34040008000004001c4d6f7274616c35040008000005001c4d6f7274616c36040008000006001c4d6f7274616c37040008000007001c4d6f7274616c38040008000008001c4d6f7274616c3904000800000900204d6f7274616c313004000800000a00204d6f7274616c313104000800000b00204d6f7274616c313204000800000c00204d6f7274616c313304000800000d00204d6f7274616c313404000800000e00204d6f7274616c313504000800000f00204d6f7274616c313604000800001000204d6f7274616c313704000800001100204d6f7274616c313804000800001200204d6f7274616c313904000800001300204d6f7274616c323004000800001400204d6f7274616c323104000800001500204d6f7274616c323204000800001600204d6f7274616c323304000800001700204d6f7274616c323404000800001800204d6f7274616c323504000800001900204d6f7274616c323604000800001a00204d6f7274616c323704000800001b00204d6f7274616c323804000800001c00204d6f7274616c323904000800001d00204d6f7274616c333004000800001e00204d6f7274616c333104000800001f00204d6f7274616c333204000800002000204d6f7274616c333304000800002100204d6f7274616c333404000800002200204d6f7274616c333504000800002300204d6f7274616c333604000800002400204d6f7274616c333704000800002500204d6f7274616c333804000800002600204d6f7274616c333904000800002700204d6f7274616c343004000800002800204d6f7274616c343104000800002900204d6f7274616c343204000800002a00204d6f7274616c343304000800002b00204d6f7274616c343404000800002c00204d6f7274616c343504000800002d00204d6f7274616c343604000800002e00204d6f7274616c343704000800002f00204d6f7274616c343804000800003000204d6f7274616c343904000800003100204d6f7274616c353004000800003200204d6f7274616c353104000800003300204d6f7274616c353204000800003400204d6f7274616c353304000800003500204d6f7274616c353404000800003600204d6f7274616c353504000800003700204d6f7274616c353604000800003800204d6f7274616c353704000800003900204d6f7274616c353804000800003a00204d6f7274616c353904000800003b00204d6f7274616c363004000800003c00204d6f7274616c363104000800003d00204d6f7274616c363204000800003e00204d6f7274616c363304000800003f00204d6f7274616c363404000800004000204d6f7274616c363504000800004100204d6f7274616c363604000800004200204d6f7274616c363704000800004300204d6f7274616c363804000800004400204d6f7274616c363904000800004500204d6f7274616c373004000800004600204d6f7274616c373104000800004700204d6f7274616c373204000800004800204d6f7274616c373304000800004900204d6f7274616c373404000800004a00204d6f7274616c373504000800004b00204d6f7274616c373604000800004c00204d6f7274616c373704000800004d00204d6f7274616c373804000800004e00204d6f7274616c373904000800004f00204d6f7274616c383004000800005000204d6f7274616c383104000800005100204d6f7274616c383204000800005200204d6f7274616c383304000800005300204d6f7274616c383404000800005400204d6f7274616c383504000800005500204d6f7274616c383604000800005600204d6f7274616c383704000800005700204d6f7274616c383804000800005800204d6f7274616c383904000800005900204d6f7274616c393004000800005a00204d6f7274616c393104000800005b00204d6f7274616c393204000800005c00204d6f7274616c393304000800005d00204d6f7274616c393404000800005e00204d6f7274616c393504000800005f00204d6f7274616c393604000800006000204d6f7274616c393704000800006100204d6f7274616c393804000800006200204d6f7274616c393904000800006300244d6f7274616c31303004000800006400244d6f7274616c31303104000800006500244d6f7274616c31303204000800006600244d6f7274616c31303304000800006700244d6f7274616c31303404000800006800244d6f7274616c31303504000800006900244d6f7274616c31303604000800006a00244d6f7274616c31303704000800006b00244d6f7274616c31303804000800006c00244d6f7274616c31303904000800006d00244d6f7274616c31313004000800006e00244d6f7274616c31313104000800006f00244d6f7274616c31313204000800007000244d6f7274616c31313304000800007100244d6f7274616c31313404000800007200244d6f7274616c31313504000800007300244d6f7274616c31313604000800007400244d6f7274616c31313704000800007500244d6f7274616c31313804000800007600244d6f7274616c31313904000800007700244d6f7274616c31323004000800007800244d6f7274616c31323104000800007900244d6f7274616c31323204000800007a00244d6f7274616c31323304000800007b00244d6f7274616c31323404000800007c00244d6f7274616c31323504000800007d00244d6f7274616c31323604000800007e00244d6f7274616c31323704000800007f00244d6f7274616c31323804000800008000244d6f7274616c31323904000800008100244d6f7274616c31333004000800008200244d6f7274616c31333104000800008300244d6f7274616c31333204000800008400244d6f7274616c31333304000800008500244d6f7274616c31333404000800008600244d6f7274616c31333504000800008700244d6f7274616c31333604000800008800244d6f7274616c31333704000800008900244d6f7274616c31333804000800008a00244d6f7274616c31333904000800008b00244d6f7274616c31343004000800008c00244d6f7274616c31343104000800008d00244d6f7274616c31343204000800008e00244d6f7274616c31343304000800008f00244d6f7274616c31343404000800009000244d6f7274616c31343504000800009100244d6f7274616c31343604000800009200244d6f7274616c31343704000800009300244d6f7274616c31343804000800009400244d6f7274616c31343904000800009500244d6f7274616c31353004000800009600244d6f7274616c31353104000800009700244d6f7274616c31353204000800009800244d6f7274616c31353304000800009900244d6f7274616c31353404000800009a00244d6f7274616c31353504000800009b00244d6f7274616c31353604000800009c00244d6f7274616c31353704000800009d00244d6f7274616c31353804000800009e00244d6f7274616c31353904000800009f00244d6f7274616c3136300400080000a000244d6f7274616c3136310400080000a100244d6f7274616c3136320400080000a200244d6f7274616c3136330400080000a300244d6f7274616c3136340400080000a400244d6f7274616c3136350400080000a500244d6f7274616c3136360400080000a600244d6f7274616c3136370400080000a700244d6f7274616c3136380400080000a800244d6f7274616c3136390400080000a900244d6f7274616c3137300400080000aa00244d6f7274616c3137310400080000ab00244d6f7274616c3137320400080000ac00244d6f7274616c3137330400080000ad00244d6f7274616c3137340400080000ae00244d6f7274616c3137350400080000af00244d6f7274616c3137360400080000b000244d6f7274616c3137370400080000b100244d6f7274616c3137380400080000b200244d6f7274616c3137390400080000b300244d6f7274616c3138300400080000b400244d6f7274616c3138310400080000b500244d6f7274616c3138320400080000b600244d6f7274616c3138330400080000b700244d6f7274616c3138340400080000b800244d6f7274616c3138350400080000b900244d6f7274616c3138360400080000ba00244d6f7274616c3138370400080000bb00244d6f7274616c3138380400080000bc00244d6f7274616c3138390400080000bd00244d6f7274616c3139300400080000be00244d6f7274616c3139310400080000bf00244d6f7274616c3139320400080000c000244d6f7274616c3139330400080000c100244d6f7274616c3139340400080000c200244d6f7274616c3139350400080000c300244d6f7274616c3139360400080000c400244d6f7274616c3139370400080000c500244d6f7274616c3139380400080000c600244d6f7274616c3139390400080000c700244d6f7274616c3230300400080000c800244d6f7274616c3230310400080000c900244d6f7274616c3230320400080000ca00244d6f7274616c3230330400080000cb00244d6f7274616c3230340400080000cc00244d6f7274616c3230350400080000cd00244d6f7274616c3230360400080000ce00244d6f7274616c3230370400080000cf00244d6f7274616c3230380400080000d000244d6f7274616c3230390400080000d100244d6f7274616c3231300400080000d200244d6f7274616c3231310400080000d300244d6f7274616c3231320400080000d400244d6f7274616c3231330400080000d500244d6f7274616c3231340400080000d600244d6f7274616c3231350400080000d700244d6f7274616c3231360400080000d800244d6f7274616c3231370400080000d900244d6f7274616c3231380400080000da00244d6f7274616c3231390400080000db00244d6f7274616c3232300400080000dc00244d6f7274616c3232310400080000dd00244d6f7274616c3232320400080000de00244d6f7274616c3232330400080000df00244d6f7274616c3232340400080000e000244d6f7274616c3232350400080000e100244d6f7274616c3232360400080000e200244d6f7274616c3232370400080000e300244d6f7274616c3232380400080000e400244d6f7274616c3232390400080000e500244d6f7274616c3233300400080000e600244d6f7274616c3233310400080000e700244d6f7274616c3233320400080000e800244d6f7274616c3233330400080000e900244d6f7274616c3233340400080000ea00244d6f7274616c3233350400080000eb00244d6f7274616c3233360400080000ec00244d6f7274616c3233370400080000ed00244d6f7274616c3233380400080000ee00244d6f7274616c3233390400080000ef00244d6f7274616c3234300400080000f000244d6f7274616c3234310400080000f100244d6f7274616c3234320400080000f200244d6f7274616c3234330400080000f300244d6f7274616c3234340400080000f400244d6f7274616c3234350400080000f500244d6f7274616c3234360400080000f600244d6f7274616c3234370400080000f700244d6f7274616c3234380400080000f800244d6f7274616c3234390400080000f900244d6f7274616c3235300400080000fa00244d6f7274616c3235310400080000fb00244d6f7274616c3235320400080000fc00244d6f7274616c3235330400080000fd00244d6f7274616c3235340400080000fe00244d6f7274616c3235350400080000ff00001d0810306672616d655f73797374656d28657874656e73696f6e732c636865636b5f6e6f6e636528436865636b4e6f6e636504045400000400cc0120543a3a4e6f6e63650000210810306672616d655f73797374656d28657874656e73696f6e7330636865636b5f7765696768742c436865636b576569676874040454000000002508086870616c6c65745f7472616e73616374696f6e5f7061796d656e74604368617267655472616e73616374696f6e5061796d656e7404045400000400dc013042616c616e63654f663c543e0000290808a463756d756c75735f7072696d6974697665735f73746f726167655f7765696768745f7265636c61696d5053746f726167655765696768745265636c61696d04045400000000801853797374656d011853797374656d481c4163636f756e7401010402000c4101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008004e8205468652066756c6c206163636f756e7420696e666f726d6174696f6e20666f72206120706172746963756c6172206163636f756e742049442e3845787472696e736963436f756e74000010040004b820546f74616c2065787472696e7369637320636f756e7420666f72207468652063757272656e7420626c6f636b2e40496e686572656e74734170706c696564010020040004a4205768657468657220616c6c20696e686572656e74732068617665206265656e206170706c6965642e2c426c6f636b576569676874010024180000000000000488205468652063757272656e742077656967687420666f722074686520626c6f636b2e40416c6c45787472696e736963734c656e000010040004410120546f74616c206c656e6774682028696e2062797465732920666f7220616c6c2065787472696e736963732070757420746f6765746865722c20666f72207468652063757272656e7420626c6f636b2e24426c6f636b486173680101040510348000000000000000000000000000000000000000000000000000000000000000000498204d6170206f6620626c6f636b206e756d6265727320746f20626c6f636b206861736865732e3445787472696e736963446174610101040510380400043d012045787472696e73696373206461746120666f72207468652063757272656e7420626c6f636b20286d61707320616e2065787472696e736963277320696e64657820746f206974732064617461292e184e756d6265720100101000000000040901205468652063757272656e7420626c6f636b206e756d626572206265696e672070726f6365737365642e205365742062792060657865637574655f626c6f636b602e28506172656e744861736801003480000000000000000000000000000000000000000000000000000000000000000004702048617368206f66207468652070726576696f757320626c6f636b2e1844696765737401003c040004f020446967657374206f66207468652063757272656e7420626c6f636b2c20616c736f2070617274206f662074686520626c6f636b206865616465722e184576656e747301004c04001ca0204576656e7473206465706f736974656420666f72207468652063757272656e7420626c6f636b2e001d01204e4f54453a20546865206974656d20697320756e626f756e6420616e642073686f756c64207468657265666f7265206e657665722062652072656164206f6e20636861696e2ed020497420636f756c64206f746865727769736520696e666c6174652074686520506f562073697a65206f66206120626c6f636b2e002d01204576656e747320686176652061206c6172676520696e2d6d656d6f72792073697a652e20426f7820746865206576656e747320746f206e6f7420676f206f75742d6f662d6d656d6f7279fc206a75737420696e206361736520736f6d656f6e65207374696c6c207265616473207468656d2066726f6d2077697468696e207468652072756e74696d652e284576656e74436f756e74010010100000000004b820546865206e756d626572206f66206576656e747320696e2074686520604576656e74733c543e60206c6973742e2c4576656e74546f70696373010104023455020400282501204d617070696e67206265747765656e206120746f7069632028726570726573656e74656420627920543a3a486173682920616e64206120766563746f72206f6620696e646578657394206f66206576656e747320696e2074686520603c4576656e74733c543e3e60206c6973742e00510120416c6c20746f70696320766563746f727320686176652064657465726d696e69737469632073746f72616765206c6f636174696f6e7320646570656e64696e67206f6e2074686520746f7069632e2054686973450120616c6c6f7773206c696768742d636c69656e747320746f206c6576657261676520746865206368616e67657320747269652073746f7261676520747261636b696e67206d656368616e69736d20616e64e420696e2063617365206f66206368616e67657320666574636820746865206c697374206f66206576656e7473206f6620696e7465726573742e005901205468652076616c756520686173207468652074797065206028426c6f636b4e756d626572466f723c543e2c204576656e74496e646578296020626563617573652069662077652075736564206f6e6c79206a7573744d012074686520604576656e74496e64657860207468656e20696e20636173652069662074686520746f70696320686173207468652073616d6520636f6e74656e7473206f6e20746865206e65787420626c6f636b0101206e6f206e6f74696669636174696f6e2077696c6c20626520747269676765726564207468757320746865206576656e74206d69676874206265206c6f73742e484c61737452756e74696d655570677261646500005d0204000455012053746f726573207468652060737065635f76657273696f6e6020616e642060737065635f6e616d6560206f66207768656e20746865206c6173742072756e74696d6520757067726164652068617070656e65642e545570677261646564546f553332526566436f756e740100200400044d012054727565206966207765206861766520757067726164656420736f207468617420607479706520526566436f756e74602069732060753332602e2046616c7365202864656661756c7429206966206e6f742e605570677261646564546f547269706c65526566436f756e740100200400085d012054727565206966207765206861766520757067726164656420736f2074686174204163636f756e74496e666f20636f6e7461696e73207468726565207479706573206f662060526566436f756e74602e2046616c736548202864656661756c7429206966206e6f742e38457865637574696f6e506861736500004d02040004882054686520657865637574696f6e207068617365206f662074686520626c6f636b2e44417574686f72697a65645570677261646500006502040004b82060536f6d6560206966206120636f6465207570677261646520686173206265656e20617574686f72697a65642e01690201581830426c6f636b57656967687473790275010700f2052a0100070088526a74020040010265cd1d000107c0d22c76510200e000010700e6bd4f570200f0000100000265cd1d000107c074c1906e0200300101070088526a7402004001010700a2941a1d020050000265cd1d0000000004d020426c6f636b20262065787472696e7369637320776569676874733a20626173652076616c75657320616e64206c696d6974732e2c426c6f636b4c656e67746889023000003c00000050000000500004a820546865206d6178696d756d206c656e677468206f66206120626c6f636b2028696e206279746573292e38426c6f636b48617368436f756e74101000100000045501204d6178696d756d206e756d626572206f6620626c6f636b206e756d62657220746f20626c6f636b2068617368206d617070696e677320746f206b65657020286f6c64657374207072756e6564206669727374292e20446257656967687491024040787d010000000000e1f505000000000409012054686520776569676874206f662072756e74696d65206461746162617365206f7065726174696f6e73207468652072756e74696d652063616e20696e766f6b652e1c56657273696f6e950291036870617261636861696e2d74656d706c6174652d72756e74696d656870617261636861696e2d74656d706c6174652d72756e74696d650100000001000000000000003468b66ba122c93fa702000000dd718d5cc53262d401000000df6acb689907609b0500000037e397fc7c91f5e40200000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000bc9d89904f5b923f0100000037c8bb1350a9a2a804000000f3ff14d5ab52705903000000ea93e3f16f3d696202000000fbc577b9d747efd60100000001000000010484204765742074686520636861696e277320696e2d636f64652076657273696f6e2e2853533538507265666978a502082a0014a8205468652064657369676e61746564205353353820707265666978206f66207468697320636861696e2e0039012054686973207265706c6163657320746865202273733538466f726d6174222070726f7065727479206465636c6172656420696e2074686520636861696e20737065632e20526561736f6e20697331012074686174207468652072756e74696d652073686f756c64206b6e6f772061626f7574207468652070726566697820696e206f7264657220746f206d616b6520757365206f662069742061737020616e206964656e746966696572206f662074686520636861696e2e01a902003c50617261636861696e53797374656d013c50617261636861696e53797374656d6044556e696e636c756465645365676d656e740100ad020400184901204c617465737420696e636c7564656420626c6f636b2064657363656e64616e7473207468652072756e74696d652061636365707465642e20496e206f7468657220776f7264732c20746865736520617265610120616e636573746f7273206f66207468652063757272656e746c7920657865637574696e6720626c6f636b2077686963682068617665206e6f74206265656e20696e636c7564656420696e20746865206f627365727665644c2072656c61792d636861696e2073746174652e00750120546865207365676d656e74206c656e677468206973206c696d69746564206279207468652063617061636974792072657475726e65642066726f6d20746865205b60436f6e73656e737573486f6f6b605d20636f6e666967757265643c20696e207468652070616c6c65742e6c41676772656761746564556e696e636c756465645365676d656e740000d50204000c69012053746f72616765206669656c642074686174206b6565707320747261636b206f662062616e64776964746820757365642062792074686520756e696e636c75646564207365676d656e7420616c6f6e672077697468207468652d01206c61746573742048524d502077617465726d61726b2e205573656420666f72206c696d6974696e672074686520616363657074616e6365206f66206e657720626c6f636b73207769746890207265737065637420746f2072656c617920636861696e20636f6e73747261696e74732e5450656e64696e6756616c69646174696f6e436f6465010038040018590120496e2063617365206f662061207363686564756c656420757067726164652c20746869732073746f72616765206669656c6420636f6e7461696e73207468652076616c69646174696f6e20636f646520746f20626524206170706c6965642e003d0120417320736f6f6e206173207468652072656c617920636861696e2067697665732075732074686520676f2d6168656164207369676e616c2c2077652077696c6c206f7665727772697465207468657101205b603a636f6465605d5b73705f636f72653a3a73746f726167653a3a77656c6c5f6b6e6f776e5f6b6579733a3a434f44455d2077686963682077696c6c20726573756c7420746865206e65787420626c6f636b2070726f636573730901207769746820746865206e65772076616c69646174696f6e20636f64652e205468697320636f6e636c756465732074686520757067726164652070726f636573732e444e657756616c69646174696f6e436f64650000380400145d012056616c69646174696f6e20636f6465207468617420697320736574206279207468652070617261636861696e20616e6420697320746f20626520636f6d6d756e69636174656420746f20636f6c6c61746f7220616e647820636f6e73657175656e746c79207468652072656c61792d636861696e2e00650120546869732077696c6c20626520636c656172656420696e20606f6e5f696e697469616c697a6560206f662065616368206e657720626c6f636b206966206e6f206f746865722070616c6c657420616c7265616479207365742c207468652076616c75652e3856616c69646174696f6e446174610000dd0204000cd020546865205b6050657273697374656456616c69646174696f6e44617461605d2073657420666f72207468697320626c6f636b2e2d0120546869732076616c756520697320657870656374656420746f20626520736574206f6e6c79206f6e63652070657220626c6f636b20616e642069742773206e657665722073746f7265643420696e2074686520747269652e5044696453657456616c69646174696f6e436f6465010020040004e02057657265207468652076616c69646174696f6e20646174612073657420746f206e6f74696679207468652072656c617920636861696e3f644c61737452656c6179436861696e426c6f636b4e756d62657201001010000000000c1d01205468652072656c617920636861696e20626c6f636b206e756d626572206173736f636961746564207769746820746865206c6173742070617261636861696e20626c6f636b2e00882054686973206973207570646174656420696e20606f6e5f66696e616c697a65602e60557067726164655265737472696374696f6e5369676e616c0100e50204001c750120416e206f7074696f6e20776869636820696e64696361746573206966207468652072656c61792d636861696e20726573747269637473207369676e616c6c696e6720612076616c69646174696f6e20636f646520757067726164652e610120496e206f7468657220776f7264732c20696620746869732069732060536f6d656020616e64205b604e657756616c69646174696f6e436f6465605d2069732060536f6d6560207468656e207468652070726f64756365646c2063616e6469646174652077696c6c20626520696e76616c69642e00710120546869732073746f72616765206974656d2069732061206d6972726f72206f662074686520636f72726573706f6e64696e672076616c756520666f72207468652063757272656e742070617261636861696e2066726f6d207468656d012072656c61792d636861696e2e20546869732076616c756520697320657068656d6572616c207768696368206d65616e7320697420646f65736e277420686974207468652073746f726167652e20546869732076616c756520697360207365742061667465722074686520696e686572656e742e3855706772616465476f41686561640100cd02040014dc204f7074696f6e616c207570677261646520676f2d6168656164207369676e616c2066726f6d207468652072656c61792d636861696e2e00710120546869732073746f72616765206974656d2069732061206d6972726f72206f662074686520636f72726573706f6e64696e672076616c756520666f72207468652063757272656e742070617261636861696e2066726f6d207468656d012072656c61792d636861696e2e20546869732076616c756520697320657068656d6572616c207768696368206d65616e7320697420646f65736e277420686974207468652073746f726167652e20546869732076616c756520697360207365742061667465722074686520696e686572656e742e3c52656c6179537461746550726f6f660000ed02040018c4205468652073746174652070726f6f6620666f7220746865206c6173742072656c617920706172656e7420626c6f636b2e006d012054686973206669656c64206973206d65616e7420746f2062652075706461746564206561636820626c6f636b2077697468207468652076616c69646174696f6e206461746120696e686572656e742e205468657265666f72652c4d01206265666f72652070726f63657373696e67206f662074686520696e686572656e742c20652e672e20696e20606f6e5f696e697469616c697a656020746869732064617461206d6179206265207374616c652e00ac2054686973206461746120697320616c736f20616273656e742066726f6d207468652067656e657369732e5852656c6576616e744d6573736167696e6753746174650000f50204001c65012054686520736e617073686f74206f6620736f6d652073746174652072656c6174656420746f206d6573736167696e672072656c6576616e7420746f207468652063757272656e742070617261636861696e2061732070657248207468652072656c617920706172656e742e006d012054686973206669656c64206973206d65616e7420746f2062652075706461746564206561636820626c6f636b2077697468207468652076616c69646174696f6e206461746120696e686572656e742e205468657265666f72652c4d01206265666f72652070726f63657373696e67206f662074686520696e686572656e742c20652e672e20696e20606f6e5f696e697469616c697a656020746869732064617461206d6179206265207374616c652e00ac2054686973206461746120697320616c736f20616273656e742066726f6d207468652067656e657369732e44486f7374436f6e66696775726174696f6e000009030400182901205468652070617261636861696e20686f737420636f6e66696775726174696f6e207468617420776173206f627461696e65642066726f6d207468652072656c617920706172656e742e006d012054686973206669656c64206973206d65616e7420746f2062652075706461746564206561636820626c6f636b2077697468207468652076616c69646174696f6e206461746120696e686572656e742e205468657265666f72652c4d01206265666f72652070726f63657373696e67206f662074686520696e686572656e742c20652e672e20696e20606f6e5f696e697469616c697a656020746869732064617461206d6179206265207374616c652e00ac2054686973206461746120697320616c736f20616273656e742066726f6d207468652067656e657369732e384c617374446d714d7163486561640100110380000000000000000000000000000000000000000000000000000000000000000010f420546865206c61737420646f776e77617264206d65737361676520717565756520636861696e20686561642077652068617665206f627365727665642e00650120546869732076616c7565206973206c6f61646564206265666f726520616e642073617665642061667465722070726f63657373696e6720696e626f756e6420646f776e77617264206d65737361676573206361727269656460206279207468652073797374656d20696e686572656e742e404c61737448726d704d7163486561647301001503040010490120546865206d65737361676520717565756520636861696e2068656164732077652068617665206f62736572766564207065722065616368206368616e6e656c20696e636f6d696e67206368616e6e656c2e00650120546869732076616c7565206973206c6f61646564206265666f726520616e642073617665642061667465722070726f63657373696e6720696e626f756e6420646f776e77617264206d65737361676573206361727269656460206279207468652073797374656d20696e686572656e742e6450726f636573736564446f776e776172644d6573736167657301001010000000000cc8204e756d626572206f6620646f776e77617264206d657373616765732070726f63657373656420696e206120626c6f636b2e00ec20546869732077696c6c20626520636c656172656420696e20606f6e5f696e697469616c697a6560206f662065616368206e657720626c6f636b2e3448726d7057617465726d61726b01001010000000000ca02048524d502077617465726d61726b2074686174207761732073657420696e206120626c6f636b2e00ec20546869732077696c6c20626520636c656172656420696e20606f6e5f696e697469616c697a6560206f662065616368206e657720626c6f636b2e5048726d704f7574626f756e644d657373616765730100210304000ca42048524d50206d65737361676573207468617420776572652073656e7420696e206120626c6f636b2e00ec20546869732077696c6c20626520636c656172656420696e20606f6e5f696e697469616c697a6560206f662065616368206e657720626c6f636b2e385570776172644d657373616765730100750204000cac20557077617264206d65737361676573207468617420776572652073656e7420696e206120626c6f636b2e00ec20546869732077696c6c20626520636c656172656420696e20606f6e5f696e697469616c697a6560206f662065616368206e657720626c6f636b2e5450656e64696e675570776172644d6573736167657301007502040004310120557077617264206d65737361676573207468617420617265207374696c6c2070656e64696e6720616e64206e6f74207965742073656e6420746f207468652072656c617920636861696e2e5c55707761726444656c6976657279466565466163746f720100290340000064a7b3b6e00d000000000000000004e42054686520666163746f7220746f206d756c7469706c792074686520626173652064656c69766572792066656520627920666f7220554d502e84416e6e6f756e63656448726d704d6573736167657350657243616e646964617465010010100000000008650120546865206e756d626572206f662048524d50206d65737361676573207765206f6273657276656420696e20606f6e5f696e697469616c697a656020616e64207468757320757365642074686174206e756d62657220666f72f020616e6e6f756e63696e672074686520776569676874206f6620606f6e5f696e697469616c697a656020616e6420606f6e5f66696e616c697a65602e68526573657276656458636d705765696768744f766572726964650000280400085d01205468652077656967687420776520726573657276652061742074686520626567696e6e696e67206f662074686520626c6f636b20666f722070726f63657373696e672058434d50206d657373616765732e2054686973b8206f76657272696465732074686520616d6f756e742073657420696e2074686520436f6e6669672074726169742e645265736572766564446d705765696768744f766572726964650000280400085901205468652077656967687420776520726573657276652061742074686520626567696e6e696e67206f662074686520626c6f636b20666f722070726f63657373696e6720444d50206d657373616765732e2054686973b8206f76657272696465732074686520616d6f756e742073657420696e2074686520436f6e6669672074726169742e60437573746f6d56616c69646174696f6e486561644461746100003804000c2901204120637573746f6d2068656164206461746120746861742073686f756c642062652072657475726e656420617320726573756c74206f66206076616c69646174655f626c6f636b602e00110120536565206050616c6c65743a3a7365745f637573746f6d5f76616c69646174696f6e5f686561645f646174616020666f72206d6f726520696e666f726d6174696f6e2e012d03017c042853656c66506172614964e901105f11000004b82052657475726e73207468652070617261636861696e204944207765206172652072756e6e696e6720776974682e015103012454696d657374616d70012454696d657374616d70080c4e6f7701003020000000000000000004a0205468652063757272656e742074696d6520666f72207468652063757272656e7420626c6f636b2e24446964557064617465010020040010d82057686574686572207468652074696d657374616d7020686173206265656e207570646174656420696e207468697320626c6f636b2e00550120546869732076616c7565206973207570646174656420746f206074727565602075706f6e207375636365737366756c207375626d697373696f6e206f6620612074696d657374616d702062792061206e6f64652e4501204974206973207468656e20636865636b65642061742074686520656e64206f66206561636820626c6f636b20657865637574696f6e20696e2074686520606f6e5f66696e616c697a656020686f6f6b2e0155030004344d696e696d756d506572696f6430207017000000000000188c20546865206d696e696d756d20706572696f64206265747765656e20626c6f636b732e004d012042652061776172652074686174207468697320697320646966666572656e7420746f20746865202a65787065637465642a20706572696f6420746861742074686520626c6f636b2070726f64756374696f6e4901206170706172617475732070726f76696465732e20596f75722063686f73656e20636f6e73656e7375732073797374656d2077696c6c2067656e6572616c6c7920776f726b2077697468207468697320746f61012064657465726d696e6520612073656e7369626c6520626c6f636b2074696d652e20466f72206578616d706c652c20696e2074686520417572612070616c6c65742069742077696c6c20626520646f75626c6520746869737020706572696f64206f6e2064656661756c742073657474696e67732e00023450617261636861696e496e666f013450617261636861696e496e666f042c50617261636861696e49640100e901106400000000015903000000032042616c616e636573012042616c616e6365731c34546f74616c49737375616e6365010018400000000000000000000000000000000004982054686520746f74616c20756e6974732069737375656420696e207468652073797374656d2e40496e61637469766549737375616e636501001840000000000000000000000000000000000409012054686520746f74616c20756e697473206f66206f75747374616e64696e672064656163746976617465642062616c616e636520696e207468652073797374656d2e1c4163636f756e74010104020014010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080600901205468652042616c616e6365732070616c6c6574206578616d706c65206f662073746f72696e67207468652062616c616e6365206f6620616e206163636f756e742e00282023204578616d706c650034206060606e6f636f6d70696c65b02020696d706c2070616c6c65745f62616c616e6365733a3a436f6e66696720666f722052756e74696d65207b19022020202074797065204163636f756e7453746f7265203d2053746f726167654d61705368696d3c53656c663a3a4163636f756e743c52756e74696d653e2c206672616d655f73797374656d3a3a50726f76696465723c52756e74696d653e2c204163636f756e7449642c2053656c663a3a4163636f756e74446174613c42616c616e63653e3e0c20207d102060606000150120596f752063616e20616c736f2073746f7265207468652062616c616e6365206f6620616e206163636f756e7420696e20746865206053797374656d602070616c6c65742e00282023204578616d706c650034206060606e6f636f6d70696c65b02020696d706c2070616c6c65745f62616c616e6365733a3a436f6e66696720666f722052756e74696d65207b7420202074797065204163636f756e7453746f7265203d2053797374656d0c20207d102060606000510120427574207468697320636f6d657320776974682074726164656f6666732c2073746f72696e67206163636f756e742062616c616e63657320696e207468652073797374656d2070616c6c65742073746f7265736d0120606672616d655f73797374656d60206461746120616c6f6e677369646520746865206163636f756e74206461746120636f6e747261727920746f2073746f72696e67206163636f756e742062616c616e63657320696e207468652901206042616c616e636573602070616c6c65742c20776869636820757365732061206053746f726167654d61706020746f2073746f72652062616c616e6365732064617461206f6e6c792e4101204e4f54453a2054686973206973206f6e6c79207573656420696e207468652063617365207468617420746869732070616c6c6574206973207573656420746f2073746f72652062616c616e6365732e144c6f636b7301010402005d03040010b820416e79206c6971756964697479206c6f636b73206f6e20736f6d65206163636f756e742062616c616e6365732e2501204e4f54453a2053686f756c64206f6e6c79206265206163636573736564207768656e2073657474696e672c206368616e67696e6720616e642066726565696e672061206c6f636b2e00ad0120557365206f66206c6f636b73206973206465707265636174656420696e206661766f7572206f6620667265657a65732e20536565206068747470733a2f2f6769746875622e636f6d2f706172697479746563682f7375627374726174652f70756c6c2f31323935312f6020526573657276657301010402006d0304000ca4204e616d6564207265736572766573206f6e20736f6d65206163636f756e742062616c616e6365732e00b10120557365206f66207265736572766573206973206465707265636174656420696e206661766f7572206f6620686f6c64732e20536565206068747470733a2f2f6769746875622e636f6d2f706172697479746563682f7375627374726174652f70756c6c2f31323935312f6014486f6c6473010104020079030400046c20486f6c6473206f6e206163636f756e742062616c616e6365732e1c467265657a657301010402008d030400048820467265657a65206c6f636b73206f6e206163636f756e742062616c616e6365732e019903018410484578697374656e7469616c4465706f736974184000ca9a3b00000000000000000000000020410120546865206d696e696d756d20616d6f756e7420726571756972656420746f206b65657020616e206163636f756e74206f70656e2e204d5553542042452047524541544552205448414e205a45524f2100590120496620796f75202a7265616c6c792a206e65656420697420746f206265207a65726f2c20796f752063616e20656e61626c652074686520666561747572652060696e7365637572655f7a65726f5f65646020666f72610120746869732070616c6c65742e20486f77657665722c20796f7520646f20736f20617420796f7572206f776e207269736b3a20746869732077696c6c206f70656e2075702061206d616a6f7220446f5320766563746f722e590120496e206361736520796f752068617665206d756c7469706c6520736f7572636573206f662070726f7669646572207265666572656e6365732c20796f75206d617920616c736f2067657420756e65787065637465648c206265686176696f757220696620796f7520736574207468697320746f207a65726f2e00f020426f74746f6d206c696e653a20446f20796f757273656c662061206661766f757220616e64206d616b65206974206174206c65617374206f6e6521204d61784c6f636b7310103200000010f420546865206d6178696d756d206e756d626572206f66206c6f636b7320746861742073686f756c64206578697374206f6e20616e206163636f756e742edc204e6f74207374726963746c7920656e666f726365642c20627574207573656420666f722077656967687420657374696d6174696f6e2e00ad0120557365206f66206c6f636b73206973206465707265636174656420696e206661766f7572206f6620667265657a65732e20536565206068747470733a2f2f6769746875622e636f6d2f706172697479746563682f7375627374726174652f70756c6c2f31323935312f602c4d617852657365727665731010320000000c0d0120546865206d6178696d756d206e756d626572206f66206e616d656420726573657276657320746861742063616e206578697374206f6e20616e206163636f756e742e00b10120557365206f66207265736572766573206973206465707265636174656420696e206661766f7572206f6620686f6c64732e20536565206068747470733a2f2f6769746875622e636f6d2f706172697479746563682f7375627374726174652f70756c6c2f31323935312f60284d6178467265657a657310100000000004610120546865206d6178696d756d206e756d626572206f6620696e646976696475616c20667265657a65206c6f636b7320746861742063616e206578697374206f6e20616e206163636f756e7420617420616e792074696d652e01a9030a485472616e73616374696f6e5061796d656e7401485472616e73616374696f6e5061796d656e7408444e6578744665654d756c7469706c6965720100290340000064a7b3b6e00d0000000000000000003853746f7261676556657273696f6e0100ad0304000000018c04604f7065726174696f6e616c4665654d756c7469706c696572080405545901204120666565206d756c7469706c69657220666f7220604f7065726174696f6e616c602065787472696e7369637320746f20636f6d7075746520227669727475616c207469702220746f20626f6f73742074686569722c20607072696f726974796000510120546869732076616c7565206973206d756c7469706c69656420627920746865206066696e616c5f6665656020746f206f627461696e206120227669727475616c20746970222074686174206973206c61746572f420616464656420746f20612074697020636f6d706f6e656e7420696e20726567756c617220607072696f72697479602063616c63756c6174696f6e732e4d01204974206d65616e732074686174206120604e6f726d616c60207472616e73616374696f6e2063616e2066726f6e742d72756e20612073696d696c61726c792d73697a656420604f7065726174696f6e616c6041012065787472696e736963202877697468206e6f20746970292c20627920696e636c7564696e672061207469702076616c75652067726561746572207468616e20746865207669727475616c207469702e003c20606060727573742c69676e6f726540202f2f20466f7220604e6f726d616c608c206c6574207072696f72697479203d207072696f726974795f63616c6328746970293b0054202f2f20466f7220604f7065726174696f6e616c601101206c6574207669727475616c5f746970203d2028696e636c7573696f6e5f666565202b2074697029202a204f7065726174696f6e616c4665654d756c7469706c6965723bc4206c6574207072696f72697479203d207072696f726974795f63616c6328746970202b207669727475616c5f746970293b1020606060005101204e6f746520746861742073696e636520776520757365206066696e616c5f6665656020746865206d756c7469706c696572206170706c69657320616c736f20746f2074686520726567756c61722060746970605d012073656e74207769746820746865207472616e73616374696f6e2e20536f2c206e6f74206f6e6c7920646f657320746865207472616e73616374696f6e206765742061207072696f726974792062756d702062617365646101206f6e207468652060696e636c7573696f6e5f666565602c2062757420776520616c736f20616d706c6966792074686520696d70616374206f662074697073206170706c69656420746f20604f7065726174696f6e616c6038207472616e73616374696f6e732e000b105375646f01105375646f040c4b6579000000040004842054686520604163636f756e74496460206f6620746865207375646f206b65792e01b103019000014d050f28417574686f72736869700128417574686f72736869700418417574686f720000000400046420417574686f72206f662063757272656e7420626c6f636b2e000000001444436f6c6c61746f7253656c656374696f6e0144436f6c6c61746f7253656c656374696f6e1434496e76756c6e657261626c65730100510504000411012054686520696e76756c6e657261626c652c207065726d697373696f6e656420636f6c6c61746f72732e2054686973206c697374206d75737420626520736f727465642e3443616e6469646174654c697374010055050400146901205468652028636f6d6d756e6974792c206c696d697465642920636f6c6c6174696f6e2063616e646964617465732e206043616e646964617465736020616e642060496e76756c6e657261626c6573602073686f756c6420626550206d757475616c6c79206578636c75736976652e0075012054686973206c69737420697320736f7274656420696e20617363656e64696e67206f72646572206279206465706f73697420616e64207768656e20746865206465706f736974732061726520657175616c2c20746865206c65617374a020726563656e746c79207570646174656420697320636f6e7369646572656420677265617465722e444c617374417574686f726564426c6f636b01010405001010000000000484204c61737420626c6f636b20617574686f72656420627920636f6c6c61746f722e444465736972656443616e6469646174657301001010000000000c782044657369726564206e756d626572206f662063616e646964617465732e00750120546869732073686f756c6420696465616c6c7920616c77617973206265206c657373207468616e205b60436f6e6669673a3a4d617843616e64696461746573605d20666f72207765696768747320746f20626520636f72726563742e3443616e646964616379426f6e6401001840000000000000000000000000000000000cb820466978656420616d6f756e7420746f206465706f73697420746f206265636f6d65206120636f6c6c61746f722e004101205768656e206120636f6c6c61746f722063616c6c7320606c656176655f696e74656e7460207468657920696d6d6564696174656c79207265636569766520746865206465706f736974206261636b2e01b90301a000016105151c53657373696f6e011c53657373696f6e1c2856616c696461746f72730100a40400047c205468652063757272656e7420736574206f662076616c696461746f72732e3043757272656e74496e646578010010100000000004782043757272656e7420696e646578206f66207468652073657373696f6e2e345175657565644368616e676564010020040008390120547275652069662074686520756e6465726c79696e672065636f6e6f6d6963206964656e746974696573206f7220776569676874696e6720626568696e64207468652076616c696461746f7273a420686173206368616e67656420696e20746865207175657565642076616c696461746f72207365742e285175657565644b657973010065050400083d012054686520717565756564206b65797320666f7220746865206e6578742073657373696f6e2e205768656e20746865206e6578742073657373696f6e20626567696e732c207468657365206b657973e02077696c6c206265207573656420746f2064657465726d696e65207468652076616c696461746f7227732073657373696f6e206b6579732e4844697361626c656456616c696461746f727301006d050400148020496e6469636573206f662064697361626c65642076616c696461746f72732e003d01205468652076656320697320616c77617973206b65707420736f7274656420736f20746861742077652063616e2066696e642077686574686572206120676976656e2076616c696461746f722069733d012064697361626c6564207573696e672062696e617279207365617263682e204974206765747320636c6561726564207768656e20606f6e5f73657373696f6e5f656e64696e67602072657475726e73642061206e657720736574206f66206964656e7469746965732e204e6578744b6579730001040500c1030400049c20546865206e6578742073657373696f6e206b65797320666f7220612076616c696461746f722e204b65794f776e657200010405710500040004090120546865206f776e6572206f662061206b65792e20546865206b65792069732074686520604b657954797065496460202b2074686520656e636f646564206b65792e01bd0301a800017905161041757261011041757261082c417574686f72697469657301007d050400046c205468652063757272656e7420617574686f72697479207365742e2c43757272656e74536c6f74010085052000000000000000000c80205468652063757272656e7420736c6f74206f66207468697320626c6f636b2e009420546869732077696c6c2062652073657420696e20606f6e5f696e697469616c697a65602e00000430536c6f744475726174696f6e3020e02e000000000000100d012054686520736c6f74206475726174696f6e20417572612073686f756c642072756e20776974682c2065787072657373656420696e206d696c6c697365636f6e64732e3d0120546865206566666563746976652076616c7565206f66207468697320747970652073686f756c64206e6f74206368616e6765207768696c652074686520636861696e2069732072756e6e696e672e00350120466f72206261636b776172647320636f6d7061746962696c6974792065697468657220757365205b604d696e696d756d506572696f6454696d657354776f605d206f72206120636f6e73742e00171c41757261457874011c41757261457874082c417574686f72697469657301007d05040014942053657276657320617320636163686520666f722074686520617574686f7269746965732e0071012054686520617574686f72697469657320696e204175526120617265206f7665727772697474656e20696e20606f6e5f696e697469616c697a6560207768656e2077652073776974636820746f2061206e65772073657373696f6e2c5d0120627574207765207265717569726520746865206f6c6420617574686f72697469657320746f2076657269667920746865207365616c207768656e2076616c69646174696e67206120506f562e20546869732077696c6c0d0120616c77617973206265207570646174656420746f20746865206c6174657374204175526120617574686f72697469657320696e20606f6e5f66696e616c697a65602e20536c6f74496e666f0000890504000cd82043757272656e7420736c6f742070616972656420776974682061206e756d626572206f6620617574686f72656420626c6f636b732e00982055706461746564206f6e206561636820626c6f636b20696e697469616c697a6174696f6e2e00000000182458636d705175657565012458636d7051756575651c50496e626f756e6458636d7053757370656e64656401008d050400200d01205468652073757370656e64656420696e626f756e642058434d50206368616e6e656c732e20416c6c206f746865727320617265206e6f742073757370656e6465642e00710120546869732069732061206053746f7261676556616c75656020696e7374656164206f662061206053746f726167654d6170602073696e636520776520657870656374206d756c7469706c652072656164732070657220626c6f636b690120746f20646966666572656e74206b65797320776974682061206f6e652062797465207061796c6f61642e205468652061636365737320746f2060426f756e6465644254726565536574602077696c6c2062652063616368656415012077697468696e2074686520626c6f636b20616e64207468657265666f7265206f6e6c7920696e636c75646564206f6e636520696e207468652070726f6f662073697a652e006501204e4f54453a2054686520506f562062656e63686d61726b696e672063616e6e6f74206b6e6f77207468697320616e642077696c6c206f7665722d657374696d6174652c20627574207468652061637475616c2070726f6f66442077696c6c20626520736d616c6c65722e484f7574626f756e6458636d70537461747573010099050400185d0120546865206e6f6e2d656d7074792058434d50206368616e6e656c7320696e206f72646572206f66206265636f6d696e67206e6f6e2d656d7074792c20616e642074686520696e646578206f6620746865206669727374510120616e64206c617374206f7574626f756e64206d6573736167652e204966207468652074776f20696e64696365732061726520657175616c2c207468656e20697420696e6469636174657320616e20656d707479590120717565756520616e64207468657265206d7573742062652061206e6f6e2d604f6b6020604f7574626f756e64537461747573602e20576520617373756d65207175657565732067726f77206e6f20677265617465725901207468616e203635353335206974656d732e20517565756520696e646963657320666f72206e6f726d616c206d6573736167657320626567696e206174206f6e653b207a65726f20697320726573657276656420696e11012063617365206f6620746865206e65656420746f2073656e64206120686967682d7072696f72697479207369676e616c206d657373616765207468697320626c6f636b2e09012054686520626f6f6c20697320747275652069662074686572652069732061207369676e616c206d6573736167652077616974696e6720746f2062652073656e742e504f7574626f756e6458636d704d657373616765730101080205a50538040004bc20546865206d65737361676573206f7574626f756e6420696e206120676976656e2058434d50206368616e6e656c2e385369676e616c4d6573736167657301010402e90138040004a020416e79207369676e616c206d657373616765732077616974696e6720746f2062652073656e742e2c5175657565436f6e6669670100a905302000000030000000080000000415012054686520636f6e66696775726174696f6e20776869636820636f6e74726f6c73207468652064796e616d696373206f6620746865206f7574626f756e642071756575652e38517565756553757370656e64656401002004000441012057686574686572206f72206e6f74207468652058434d502071756575652069732073757370656e6465642066726f6d20657865637574696e6720696e636f6d696e672058434d73206f72206e6f742e4444656c6976657279466565466163746f7201010405e901290340000064a7b3b6e00d000000000000000004c42054686520666163746f7220746f206d756c7469706c792074686520626173652064656c6976657279206665652062792e01c90301ac044c4d6178496e626f756e6453757370656e6465641010e803000014490120546865206d6178696d756d206e756d626572206f6620696e626f756e642058434d50206368616e6e656c7320746861742063616e2062652073757370656e6465642073696d756c74616e656f75736c792e005d0120416e792066757274686572206368616e6e656c2073757370656e73696f6e732077696c6c206661696c20616e64206d65737361676573206d6179206765742064726f7070656420776974686f757420667572746865724501206e6f746963652e2043686f6f73696e67206120686967682076616c756520283130303029206973206f6b61793b207468652074726164652d6f666620746861742069732064657363726962656420696ed8205b60496e626f756e6458636d7053757370656e646564605d207374696c6c206170706c6965732061742074686174207363616c652e01ad051e2c506f6c6b61646f7458636d012c506f6c6b61646f7458636d30305175657279436f756e746572010030200000000000000000048820546865206c617465737420617661696c61626c6520717565727920696e6465782e1c517565726965730001040230b1050400045420546865206f6e676f696e6720717565726965732e28417373657454726170730101040634101000000000106820546865206578697374696e672061737365742074726170732e006101204b65792069732074686520626c616b6532203235362068617368206f6620286f726967696e2c2076657273696f6e65642060417373657473602920706169722e2056616c756520697320746865206e756d626572206f661d012074696d65732074686973207061697220686173206265656e20747261707065642028757375616c6c79206a75737420312069662069742065786973747320617420616c6c292e385361666558636d56657273696f6e00001004000861012044656661756c742076657273696f6e20746f20656e636f64652058434d207768656e206c61746573742076657273696f6e206f662064657374696e6174696f6e20697320756e6b6e6f776e2e20496620604e6f6e65602c3d01207468656e207468652064657374696e6174696f6e732077686f73652058434d2076657273696f6e20697320756e6b6e6f776e2061726520636f6e7369646572656420756e726561636861626c652e40537570706f7274656456657273696f6e0001080502c50510040004f020546865204c61746573742076657273696f6e732074686174207765206b6e6f7720766172696f7573206c6f636174696f6e7320737570706f72742e4056657273696f6e4e6f746966696572730001080502c50530040004050120416c6c206c6f636174696f6e7320746861742077652068617665207265717565737465642076657273696f6e206e6f74696669636174696f6e732066726f6d2e5056657273696f6e4e6f74696679546172676574730001080502c505c90504000871012054686520746172676574206c6f636174696f6e73207468617420617265207375627363726962656420746f206f75722076657273696f6e206368616e6765732c2061732077656c6c20617320746865206d6f737420726563656e7494206f66206f75722076657273696f6e7320776520696e666f726d6564207468656d206f662e5456657273696f6e446973636f7665727951756575650100cd0504000c65012044657374696e6174696f6e732077686f7365206c61746573742058434d2076657273696f6e20776520776f756c64206c696b6520746f206b6e6f772e204475706c696361746573206e6f7420616c6c6f7765642c20616e6471012074686520607533326020636f756e74657220697320746865206e756d626572206f662074696d6573207468617420612073656e6420746f207468652064657374696e6174696f6e20686173206265656e20617474656d707465642c8c20776869636820697320757365642061732061207072696f726974697a6174696f6e2e4043757272656e744d6967726174696f6e0000d9050400049c205468652063757272656e74206d6967726174696f6e27732073746167652c20696620616e792e5452656d6f74654c6f636b656446756e6769626c657300010c050202dd05e505040004f02046756e6769626c6520617373657473207768696368207765206b6e6f7720617265206c6f636b6564206f6e20612072656d6f746520636861696e2e3c4c6f636b656446756e6769626c65730001040200f505040004e02046756e6769626c6520617373657473207768696368207765206b6e6f7720617265206c6f636b6564206f6e207468697320636861696e2e5458636d457865637574696f6e53757370656e646564010020040004b420476c6f62616c2073757370656e73696f6e207374617465206f66207468652058434d206578656375746f722e01cd0301b0000101061f2843756d756c757358636d0001650401dd01000020304d657373616765517565756501304d65737361676551756575650c30426f6f6b5374617465466f7201010405e501050674000000000000000000000000000000000000000000000000000000000004cc2054686520696e646578206f662074686520666972737420616e64206c61737420286e6f6e2d656d707479292070616765732e2c53657276696365486561640000e501040004bc20546865206f726967696e2061742077686963682077652073686f756c6420626567696e20736572766963696e672e1450616765730001080505110615060400048820546865206d6170206f66207061676520696e646963657320746f2070616765732e01690401e10110204865617053697a65101000000100143d01205468652073697a65206f662074686520706167653b207468697320696d706c69657320746865206d6178696d756d206d6573736167652073697a652077686963682063616e2062652073656e742e005901204120676f6f642076616c756520646570656e6473206f6e20746865206578706563746564206d6573736167652073697a65732c20746865697220776569676874732c207468652077656967687420746861742069735d0120617661696c61626c6520666f722070726f63657373696e67207468656d20616e6420746865206d6178696d616c206e6565646564206d6573736167652073697a652e20546865206d6178696d616c206d65737361676511012073697a6520697320736c696768746c79206c6f776572207468616e207468697320617320646566696e6564206279205b604d61784d6573736167654c656e4f66605d2e204d61785374616c651010080000000c5d0120546865206d6178696d756d206e756d626572206f66207374616c652070616765732028692e652e206f66206f766572776569676874206d657373616765732920616c6c6f776564206265666f72652063756c6c696e6751012063616e2068617070656e2e204f6e636520746865726520617265206d6f7265207374616c65207061676573207468616e20746869732c207468656e20686973746f726963616c207061676573206d6179206265fc2064726f707065642c206576656e206966207468657920636f6e7461696e20756e70726f636573736564206f766572776569676874206d657373616765732e345365727669636557656967687485022c01070016d0be28020070001841012054686520616d6f756e74206f66207765696768742028696620616e79292077686963682073686f756c642062652070726f766964656420746f20746865206d65737361676520717565756520666f72a820736572766963696e6720656e717565756564206974656d7320606f6e5f696e697469616c697a65602e00fc2054686973206d6179206265206c65676974696d6174656c7920604e6f6e656020696e207468652063617365207468617420796f752077696c6c2063616c6c5d012060536572766963655175657565733a3a736572766963655f71756575657360206d616e75616c6c79206f7220736574205b6053656c663a3a49646c654d617853657276696365576569676874605d20746f2068617665542069742072756e20696e20606f6e5f69646c65602e5049646c654d61785365727669636557656967687485020400145d0120546865206d6178696d756d20616d6f756e74206f66207765696768742028696620616e792920746f20626520757365642066726f6d2072656d61696e696e672077656967687420606f6e5f69646c656020776869636841012073686f756c642062652070726f766964656420746f20746865206d65737361676520717565756520666f7220736572766963696e6720656e717565756564206974656d7320606f6e5f69646c65602e3d012055736566756c20666f722070617261636861696e7320746f2070726f63657373206d65737361676573206174207468652073616d6520626c6f636b2074686579206172652072656365697665642e00290120496620604e6f6e65602c2069742077696c6c206e6f742063616c6c2060536572766963655175657565733a3a736572766963655f7175657565736020696e20606f6e5f69646c65602e011d062118546f6b656e730118546f6b656e731034546f74616c49737375616e6365010104053018400000000000000000000000000000000004902054686520746f74616c2069737375616e6365206f66206120746f6b656e20747970652e144c6f636b73010108020521062506040008d820416e79206c6971756964697479206c6f636b73206f66206120746f6b656e207479706520756e64657220616e206163636f756e742e2501204e4f54453a2053686f756c64206f6e6c79206265206163636573736564207768656e2073657474696e672c206368616e67696e6720616e642066726565696e672061206c6f636b2e204163636f756e7473010108020521063106c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018b8205468652062616c616e6365206f66206120746f6b656e207479706520756e64657220616e206163636f756e742e00fc204e4f54453a2049662074686520746f74616c2069732065766572207a65726f2c206465637265617365206163636f756e7420726566206163636f756e742e001901204e4f54453a2054686973206973206f6e6c79207573656420696e20746865206361736520746861742074686973206d6f64756c65206973207573656420746f2073746f7265282062616c616e6365732e205265736572766573010108020521063506040004a4204e616d6564207265736572766573206f6e20736f6d65206163636f756e742062616c616e6365732e016d0401f10108204d61784c6f636b73101032000000002c4d61785265736572766573101032000000040d0120546865206d6178696d756d206e756d626572206f66206e616d656420726573657276657320746861742063616e206578697374206f6e20616e206163636f756e742e0141066b6052616e646f6d6e657373436f6c6c656374697665466c6970016052616e646f6d6e657373436f6c6c656374697665466c6970043852616e646f6d4d6174657269616c0100450604000c610120536572696573206f6620626c6f636b20686561646572732066726f6d20746865206c61737420383120626c6f636b73207468617420616374732061732072616e646f6d2073656564206d6174657269616c2e2054686973610120697320617272616e67656420617320612072696e672062756666657220776974682060626c6f636b5f6e756d626572202520383160206265696e672074686520696e64657820696e746f20746865206056656360206f664420746865206f6c6465737420686173682e000000006c4457655445454d6573736167655175657565014457655445454d65737361676551756575650c30426f6f6b5374617465466f7201010405f901490674000000000000000000000000000000000000000000000000000000000004cc2054686520696e646578206f662074686520666972737420616e64206c61737420286e6f6e2d656d707479292070616765732e2c53657276696365486561640000f901040004bc20546865206f726967696e2061742077686963682077652073686f756c6420626567696e20736572766963696e672e1450616765730001080505550659060400048820546865206d6170206f66207061676520696e646963657320746f2070616765732e01710401f50110204865617053697a65101000000100143d01205468652073697a65206f662074686520706167653b207468697320696d706c69657320746865206d6178696d756d206d6573736167652073697a652077686963682063616e2062652073656e742e005901204120676f6f642076616c756520646570656e6473206f6e20746865206578706563746564206d6573736167652073697a65732c20746865697220776569676874732c207468652077656967687420746861742069735d0120617661696c61626c6520666f722070726f63657373696e67207468656d20616e6420746865206d6178696d616c206e6565646564206d6573736167652073697a652e20546865206d6178696d616c206d65737361676511012073697a6520697320736c696768746c79206c6f776572207468616e207468697320617320646566696e6564206279205b604d61784d6573736167654c656e4f66605d2e204d61785374616c651010800000000c5d0120546865206d6178696d756d206e756d626572206f66207374616c652070616765732028692e652e206f66206f766572776569676874206d657373616765732920616c6c6f776564206265666f72652063756c6c696e6751012063616e2068617070656e2e204f6e636520746865726520617265206d6f7265207374616c65207061676573207468616e20746869732c207468656e20686973746f726963616c207061676573206d6179206265fc2064726f707065642c206576656e206966207468657920636f6e7461696e20756e70726f636573736564206f766572776569676874206d657373616765732e345365727669636557656967687485022c01070016d0be28020070001841012054686520616d6f756e74206f66207765696768742028696620616e79292077686963682073686f756c642062652070726f766964656420746f20746865206d65737361676520717565756520666f72a820736572766963696e6720656e717565756564206974656d7320606f6e5f696e697469616c697a65602e00fc2054686973206d6179206265206c65676974696d6174656c7920604e6f6e656020696e207468652063617365207468617420796f752077696c6c2063616c6c5d012060536572766963655175657565733a3a736572766963655f71756575657360206d616e75616c6c79206f7220736574205b6053656c663a3a49646c654d617853657276696365576569676874605d20746f2068617665542069742072756e20696e20606f6e5f69646c65602e5049646c654d61785365727669636557656967687485020400145d0120546865206d6178696d756d20616d6f756e74206f66207765696768742028696620616e792920746f20626520757365642066726f6d2072656d61696e696e672077656967687420606f6e5f69646c656020776869636841012073686f756c642062652070726f766964656420746f20746865206d65737361676520717565756520666f7220736572766963696e6720656e717565756564206974656d7320606f6e5f69646c65602e3d012055736566756c20666f722070617261636861696e7320746f2070726f63657373206d65737361676573206174207468652073616d6520626c6f636b2074686579206172652072656365697665642e00290120496620604e6f6e65602c2069742077696c6c206e6f742063616c6c2060536572766963655175657565733a3a736572766963655f7175657565736020696e20606f6e5f69646c65602e0161066d1c5574696c6974790001750401fd01044c626174636865645f63616c6c735f6c696d69741010aa2a000004a820546865206c696d6974206f6e20746865206e756d626572206f6620626174636865642063616c6c732e0165066e2057655445454f7267012057655445454f7267301044616f73000104063069060400088420416c6c2044414f7320746861742068617665206265656e20637265617465642e3420e68980e69c89e7bb84e7bb87244e65787444616f4964010030208813000000000000089820546865206964206f6620746865206e6578742064616f20746f20626520637265617465642e6020e88eb7e58f96e4b88be4b880e4b8aae7bb84e7bb876964244e6578744170704964010030200000000000000000089820546865206964206f6620746865206e6578742064616f20746f20626520637265617465642e6020e88eb7e58f96e4b88be4b880e4b8aae7bb84e7bb876964184775696c647301010405306d06040008542074686520696e666f206f662067727574797065735820e7bb84e7bb87e58685e585ace4bc9ae4bfa1e681af20526f61644d617073010108050579067d06040008742074686520726f61646d617020696e666f206f662070726f6a656374735c20e7bb84e7bb87e58685526f61646d6170e4bfa1e681af284e6578745461736b4964010030200000000000000000089820546865206964206f6620746865206e6578742064616f20746f20626520637265617465642e6020e88eb7e58f96e4b88be4b880e4b8aae7bb84e7bb8769641c4d656d626572730101040530890604000834207465616d206d656d626572734020e59ba2e9989fe79a84e68890e59198304775696c644d656d6265727301010805058d06890604000838206775696c64206d656d626572733420e585ace4bc9ae68890e591983850726f6a6563744d656d6265727301010805058d068906040008402070726f6a656374206d656d626572733420e9a1b9e79baee68890e591981c417070487562730001040530910604000828206170707320687562733420e5ba94e794a8e4b8ade5bf831c4f7267417070730101040530950604000824206f726720617070733420e5ba94e794a8e4b8ade5bf832c4d656d626572506f696e740101080505a106101000000000081820706f696e744020e68890e59198e8b4a1e78caee782b9019104010102042050616c6c65744964a50620776574656564616f08282070616c6c65742069642420e6a8a1e59d97696401a9066f28576554454541737365740128576554454541737365740c3444616f417373657473496e666f0001040230ad060400002c55736572734e756d626572010104063010100000000000404578697374656e744465706f7369747301010406301840000000000000000000000000000000000001a1040105020001b106702457655445455375646f012457655445455375646f0c1c4163636f756e740001040630000400085c20574554454520526f6f74206163636f756e742069642e5820e7bb84e7bb87e69c80e9ab98e69d83e9999020696420436c6f736544616f0001040630200400085c20574554454520526f6f74206163636f756e742069642e5820e7bb84e7bb87e69c80e9ab98e69d83e99990206964245375646f5461736b730101040630b5060400045c207375646fe6a8a1e59d97e8b083e794a8e58e86e58fb201a5040111020001c106712857655445454775696c640001a9040115020001c5067230576554454550726f6a6563740130576554454550726f6a65637418344e65787450726f6a6563744964010030200100000000000000089820546865206964206f6620746865206e6578742064616f20746f20626520637265617465642e6020e88eb7e58f96e4b88be4b880e4b8aae7bb84e7bb8769642c44616f50726f6a656374730101040630c906040008382070726f6a65637420626f6172643420e9a1b9e79baee79c8be69dbf3450726f787950726f6a6563747300010806062106cd06040008382070726f6a65637420626f6172643420e9a1b9e79baee79c8be69dbf145461736b730101040630d906040008342070726f6a656374207461736b3420e4bbbbe58aa1e79c8be69dbf284e6578745461736b4964010030200100000000000000089820546865206964206f6620746865206e6578742064616f20746f20626520637265617465642e6020e88eb7e58f96e4b88be4b880e4b8aae7bb84e7bb8769642c5461736b526576696577730001040630f1060400103820544f444f207461736b446f6e654020e5b7b2e5ae8ce68890e9a1b9e79bae34207461736b20726576696577734c20e9a1b9e79baee5aea1e6a0b8e68aa5e5918a01ad040119020001010773205765544545476f7601205765544545476f762c3050726550726f70436f756e740101040630101000000000048c204e756d626572206f66207075626c69632070726f706f73616c7320736f20666f722e2c4d617850726550726f7073010104063010106400000004c0204d6178696d756d206e756d626572206f66207075626c69632070726f706f73616c73206174206f6e652074696d652e1c506572696f6473010104063005070400043420e68a95e7a5a8e8bda8e981933844656661756c74506572696f6473010005070400043420e68a95e7a5a8e8bda8e981932050726550726f70730101040630090704000c5820546865207075626c69632070726f706f73616c732e2820556e736f727465642ea020546865207365636f6e64206974656d206973207468652070726f706f73616c277320686173682e244465706f7369744f6600010806067906110704000c1c20e68f90e6a188842054686f73652077686f2068617665206c6f636b65642061206465706f7369742ed82054574f582d4e4f54453a20536166652c20617320696e6372656173696e6720696e7465676572206b6579732061726520736166652e1450726f70730001080606790615070400083420e585a8e6b091e68a95e7a5a86c2050726f7020737065636966696320696e666f726d6174696f6e2e24526573657276654f66010104060021070400046c20416d6f756e74206f662070726f706f73616c206c6f636b65642e2450726f70436f756e7401010406301010000000000460204e756d626572206f662070726f707320736f206661722e24566f74654d6f64656c010104063008040004ac20574554454520e68a95e7a5a8e6a8a1e5bc8fe9bb98e8aea42030efbc8c3120544f4b454e203120e7a5a81c566f7465734f66010104060029070400047c2045766572796f6e65277320766f74696e6720696e666f726d6174696f6e2e01bd04011d02000131077434576554454554726561737572790001d10401250200013507752057655445454170700120576554454541707018244e6578745465654964010030200000000000000000089820546865206964206f6620746865206e6578742061707020746f20626520637265617465642e5820e88eb7e58f96e4b88be4b880e4b8aa6170702069641c5445454170707300010806062106390704000810204170701c20e5ba94e794a81850726963657300010406083d0704000848205072696365206f66207265736f757263651c20e4bbb7e6a0bc3441707049644163636f756e7473000104063000040008502041707020e68ba5e69c89e88085e8b4a6e688b77820757365722773204b3873436c757374657220696e666f726d6174696f6e10456e767300010806064107450704000830204170702073657474696e672820417070e8aebee7bdae2841707056657273696f6e00010406301004000830204170702076657273696f6e2c2041707020e78988e69cac01d50401290200014907762457655445455461736b012457655445455461736b18244e6578745465654964010030200000000000000000089820546865206964206f6620746865206e6578742061707020746f20626520637265617465642e5820e88eb7e58f96e4b88be4b880e4b8aa617070206964205445455461736b73000108060621064d0704000814205461736b1c20e5ba94e794a8185072696365730001040608510704000848205072696365206f66207265736f757263651c20e4bbb7e6a0bc385461736b49644163636f756e747300010406300004000848205461736b20e5afb9e5ba94e8b4a6e688b77820757365722773204b3873436c757374657220696e666f726d6174696f6e10456e767300010806064107450704000834205461736b2073657474696e672c205461736be8aebee7bdae2c5461736b56657273696f6e00010406301004000834205461736b2076657273696f6e30205461736b20e78988e69cac01190501350200015507772057655445454770750120576554454547707518244e6578745465654964010030200000000000000000089820546865206964206f6620746865206e6578742061707020746f20626520637265617465642e5820e88eb7e58f96e4b88be4b880e4b8aa6170702069641c4750554170707300010806062106590704000810204170701c20e5ba94e794a81850726963657300010406085d0704000848205072696365206f66207265736f757263651c20e4bbb7e6a0bc3441707049644163636f756e7473000104063000040008502041707020e68ba5e69c89e88085e8b4a6e688b77820757365722773204b3873436c757374657220696e666f726d6174696f6e10456e767300010806064107450704000830204170702073657474696e672820417070e8aebee7bdae2841707056657273696f6e00010406301004000830204170702076657273696f6e2c2041707020e78988e69cac011d0501390200016107782c5765544545576f726b6572012c5765544545576f726b657240484b3873436c75737465724163636f756e74730001040600300400087020e794a8e688b7e5afb9e5ba94e99b86e7bea4e79a84e4bfa1e681af7820757365722773204b3873436c757374657220696e666f726d6174696f6e344e657874436c7573746572496401003020010000000000000008a820546865206964206f6620746865206e65787420636c757374657220746f20626520637265617465642e6020e88eb7e58f96e4b88be4b880e4b8aae99b86e7bea469642c4b3873436c757374657273000104063065070400043420e99b86e7bea4e4bfa1e681af3c50726f6f664f66436c757374657273000104063031050400085820e99b86e7bea4e5b7a5e4bd9ce9878fe8af81e6988e64204b3873436c75737465722070726f6f66206f6620776f726b0c437273000104063069070400086c20e8aea1e7ae97e8b584e6ba9020e68ab5e68abc2fe4bdbfe794a84c20636f6d707574696e67207265736f757263651853636f7265730001040630bd050400085820e88a82e782b928e8af84e7baa72ce8af84e58886294c20636f6d707574696e67207265736f75726365344465706f73697450726963657300010406086d070400083420e68ab5e68abce4bbb7e6a0bc78206465706f736974206f6620636f6d707574696e67207265736f75726365204465706f736974730001080606790671070400083420e68ab5e68abce4bfa1e681af78206465706f736974206f6620636f6d707574696e67207265736f7572636540436c7573746572436f6e7472616374730001080606750779070400087020e99b86e7bea4e58c85e590abe79a84e699bae883bde59088e5908c3c20736d61727420636f6e747261637434576f726b436f6e747261637473000104062d0230040008c820e7a88be5ba8fe4bdbfe794a8e79a84e699bae883bde59088e5908c20efbc88e88a82e782b96964efbc8ce8a7a3e99481293c20736d61727420636f6e747261637444576f726b436f6e7472616374537461746500010806067d078107040008e820e7a88be5ba8fe4bdbfe794a8e79a84e699bae883bde59088e5908ce697a5e5bf9720efbc88e88a82e782b96964efbc8ce697a5e5bf97efbc894c20736d61727420636f6e7472616374206c6f671453746167650100101058020000084820576f726b20e7bb93e7ae97e591a8e69c9f4c20576f726b20736574746c6520706572696f643050726f6f66734f66576f726b0001080606850739050400087020e5b7a5e4bd9ce4bbbbe58aa1e5b7a5e4bd9ce9878fe8af81e6988e582070726f6f66206f6620776f726b206f66207461736b305265706f72744f66576f726b000104062d02380400043020776f726b207265706f7274405265706f72744f66576f726b54696d65000104062d02100400043020776f726b207265706f72741c5265706f72747300010806067507380400083420e68a95e8af89e4bfa1e681af68207265706f727473206f6620776f726b202f20636c7573746572012105013d02000189077924436f6e7472616374730124436f6e7472616374731c305072697374696e65436f646500010406348d07040004cc2041206d617070696e672066726f6d206120636f6e7472616374277320636f6465206861736820746f2069747320636f64652e28436f6465496e666f4f6600010406349107040004e02041206d617070696e672066726f6d206120636f6e7472616374277320636f6465206861736820746f2069747320636f646520696e666f2e144e6f6e6365010030200000000000000000581d0120546869732069732061202a2a6d6f6e6f746f6e69632a2a20636f756e74657220696e6372656d656e746564206f6e20636f6e747261637420696e7374616e74696174696f6e2e0005012054686973206973207573656420696e206f7264657220746f2067656e657261746520756e6971756520747269652069647320666f7220636f6e7472616374732e2901205468652074726965206964206f662061206e657720636f6e74726163742069732063616c63756c617465642066726f6d2068617368286163636f756e745f69642c206e6f6e6365292e350120546865206e6f6e63652069732072657175697265642062656361757365206f74686572776973652074686520666f6c6c6f77696e672073657175656e636520776f756c64206c65616420746f84206120706f737369626c6520636f6c6c6973696f6e206f662073746f726167653a006820312e204372656174652061206e657720636f6e74726163742e6c20322e205465726d696e6174652074686520636f6e74726163742efc20332e20496d6d6564696174656c792072656372656174652074686520636f6e74726163742077697468207468652073616d65206163636f756e745f69642e00450120546869732069732062616420626563617573652074686520636f6e74656e7473206f6620612074726965206172652064656c65746564206c617a696c7920616e64207468657265206d6967687420626559012073746f72616765206f6620746865206f6c6420696e7374616e74696174696f6e207374696c6c20696e206974207768656e20746865206e657720636f6e747261637420697320637265617465642e20506c656173655901206e6f746520746861742077652063616e2774207265706c6163652074686520636f756e7465722062792074686520626c6f636b206e756d6265722062656361757365207468652073657175656e63652061626f766551012063616e2068617070656e20696e207468652073616d6520626c6f636b2e20576520616c736f2063616e2774206b65657020746865206163636f756e7420636f756e74657220696e206d656d6f7279206f6e6c79490120626563617573652073746f7261676520697320746865206f6e6c792077617920746f20636f6d6d756e6963617465206163726f737320646966666572656e742065787472696e7369637320696e20746865302073616d6520626c6f636b2e001c2023204e6f7465003d0120446f206e6f742075736520697420746f2064657465726d696e6520746865206e756d626572206f6620636f6e7472616374732e20497420776f6e27742062652064656372656d656e74656420696664206120636f6e74726163742069732064657374726f7965642e38436f6e7472616374496e666f4f660001040500950704000ca82054686520636f6465206173736f6369617465642077697468206120676976656e206163636f756e742e00d02054574f582d4e4f54453a20534146452073696e636520604163636f756e7449646020697320612073656375726520686173682e3444656c6574696f6e517565756500010405109907040010c8204576696374656420636f6e7472616374732074686174206177616974206368696c6420747269652064656c6574696f6e2e004901204368696c6420747269652064656c6574696f6e2069732061206865617679206f7065726174696f6e20646570656e64696e67206f6e2074686520616d6f756e74206f662073746f72616765206974656d7341012073746f72656420696e207361696420747269652e205468657265666f72652074686973206f7065726174696f6e20697320706572666f726d6564206c617a696c7920696e20606f6e5f69646c65602e5044656c6574696f6e5175657565436f756e7465720100ad07200000000000000000084d0120412070616972206f66206d6f6e6f746f6e696320636f756e74657273207573656420746f20747261636b20746865206c617465737420636f6e7472616374206d61726b656420666f722064656c6574696f6ea820616e6420746865206c61746573742064656c6574656420636f6e747261637420696e2071756575652e4c4d6967726174696f6e496e50726f67726573730000b10704000861012041206d6967726174696f6e2063616e207370616e206163726f7373206d756c7469706c6520626c6f636b732e20546869732073746f7261676520646566696e6573206120637572736f7220746f20747261636b207468654d012070726f6772657373206f6620746865206d6967726174696f6e2c20656e61626c696e6720757320746f20726573756d652066726f6d20746865206c61737420636f6d706c6574656420706f736974696f6e2e01410501410230205363686564756c65b50719050400000010000000200000000040000000000040b109000042bc140018d2e3d706f1296eed0e07012a1eae1a0018bab30a000c7ac509000c5af5140018928116001872eb640018c65214001846bb1300182ed1130018ee21140018d64e3200388654100018c10f001afb9200b405050007e913de3801a6f604006ea64e00284e057c0028b2167f1e31274d08005ecb0d001c211000f25c571f9504490800210b048e23514849308ae5531f8504d50404b28c23078504000456fe3007a5041d0904a6c25b1fa504e1080492ede1256127ae2d4c77852a0aa1a1653529cad8d694ad51f90f003eb763f5ad2a0265cd1dd527810d0011110072fa160020511100021b3000205d3400ead21a0020c91200ca561b0020d112004ea1f60a3501e63cdf02a8dea0ea09c1014d5d048a310a000c360f1300a02a7e09000cd605691fbd28c6883d1f2128046820436f7374207363686564756c6520616e64206c696d6974732e384465706f736974506572427974651840404b4c000000000000000000000000001411012054686520616d6f756e74206f662062616c616e636520612063616c6c65722068617320746f2070617920666f7220656163682062797465206f662073746f726167652e001c2023204e6f7465002901204368616e67696e6720746869732076616c756520666f7220616e206578697374696e6720636861696e206d69676874206e65656420612073746f72616765206d6967726174696f6e2e4c44656661756c744465706f7369744c696d697418400000a08fe661000000000000000000000445012046616c6c6261636b2076616c756520746f206c696d6974207468652073746f72616765206465706f7369742069662069742773206e6f74206265696e6720736574206279207468652063616c6c65722e384465706f7369745065724974656d184000e876481700000000000000000000001405012054686520616d6f756e74206f662062616c616e636520612063616c6c65722068617320746f2070617920666f7220656163682073746f72616765206974656d2e001c2023204e6f7465002901204368616e67696e6720746869732076616c756520666f7220616e206578697374696e6720636861696e206d69676874206e65656420612073746f72616765206d6967726174696f6e2e70436f6465486173684c6f636b75704465706f73697450657263656e74c5071000000000104501205468652070657263656e74616765206f66207468652073746f72616765206465706f73697420746861742073686f756c642062652068656c6420666f72207573696e67206120636f646520686173682e610120496e7374616e74696174696e67206120636f6e74726163742c206f722063616c6c696e67205b60636861696e5f657874656e73696f6e3a3a4578743a3a6c6f636b5f64656c65676174655f646570656e64656e6379605d49012070726f74656374732074686520636f64652066726f6d206265696e672072656d6f7665642e20496e206f7264657220746f2070726576656e7420616275736520746865736520616374696f6e7320617265c42070726f746563746564207769746820612070657263656e74616765206f662074686520636f6465206465706f7369742e284d6178436f64654c656e10100000040014c020546865206d6178696d756d206c656e677468206f66206120636f6e747261637420636f646520696e2062797465732e005901205468652076616c75652073686f756c642062652063686f73656e206361726566756c6c792074616b696e6720696e746f20746865206163636f756e7420746865206f766572616c6c206d656d6f7279206c696d6974f020796f75722072756e74696d65206861732c2061732077656c6c20617320746865205b6d6178696d756d20616c6c6f7765642063616c6c737461636b5d012064657074685d28236173736f636961746564747970652e43616c6c537461636b292e204c6f6f6b20696e746f207468652060696e746567726974795f7465737428296020666f7220736f6d6520696e7369676874732e404d617853746f726167654b65794c656e10108000000004e020546865206d6178696d756d20616c6c6f7761626c65206c656e67746820696e20627974657320666f722073746f72616765206b6579732e5c4d617844656c6567617465446570656e64656e6369657310102000000008290120546865206d6178696d756d206e756d626572206f662064656c65676174655f646570656e64656e636965732074686174206120636f6e74726163742063616e206c6f636b2077697468d0205b60636861696e5f657874656e73696f6e3a3a4578743a3a6c6f636b5f64656c65676174655f646570656e64656e6379605d2e5c556e73616665556e737461626c65496e74657266616365200401241101204d616b6520636f6e74726163742063616c6c61626c652066756e6374696f6e73206d61726b65642061732060235b756e737461626c655d6020617661696c61626c652e003d0120436f6e7472616374732074686174207573652060235b756e737461626c655d602066756e6374696f6e7320776f6e27742062652061626c6520746f2062652075706c6f6164656420756e6c657373450120746869732069732073657420746f206074727565602e2054686973206973206f6e6c79206d65616e7420666f7220746573746e65747320616e6420646576206e6f64657320696e206f7264657220746f78206578706572696d656e742077697468206e65772066656174757265732e00282023205761726e696e6700c020446f202a2a6e6f742a2a2073657420746f20607472756560206f6e2070726f64756374696f6e7320636861696e732e444d617844656275674275666665724c656e10100000200004c420546865206d6178696d756d206c656e677468206f66207468652064656275672062756666657220696e2062797465732e2c456e7669726f6e6d656e74c90700102501205479706520746861742062756e646c657320746f67657468657220616c6c207468652072756e74696d6520636f6e666967757261626c6520696e746572666163652074797065732e0035012054686973206973206e6f742061207265616c20636f6e6669672e205765206a757374206d656e74696f6e207468652074797065206865726520617320636f6e7374616e7420736f2074686174f0206974732074797065206170706561727320696e20746865206d657461646174612e204f6e6c792076616c69642076616c756520697320602829602e2841706956657273696f6ee9070802000c0901205468652076657273696f6e206f662074686520486f7374466e204150497320746861742061726520617661696c61626c6520696e207468652072756e74696d652e0068204f6e6c792076616c69642076616c756520697320602829602e01ed077af107042448436865636b4e6f6e5a65726f53656e64657205089840436865636b5370656356657273696f6e09081038436865636b547856657273696f6e0d081030436865636b47656e6573697311083438436865636b4d6f7274616c69747915083428436865636b4e6f6e63651d08982c436865636b576569676874210898604368617267655472616e73616374696f6e5061796d656e742508985053746f726167655765696768745265636c61696d2908984902"

var Meta types.Metadata
var _ = codec.DecodeFromHex(encMeta, &Meta)

// Generated pallet_balances_types_AccountData with id={{false [5]}}
type AccountData struct {
	// Field 0 with TypeId=6
	Free types.U128
	// Field 1 with TypeId=6
	Reserved types.U128
	// Field 2 with TypeId=6
	Frozen types.U128
	// Field 3 with TypeId=7
	Flags types.U128
}

// Generated frame_system_AccountInfo with id={{false [3]}}
type AccountInfo struct {
	// Field 0 with TypeId=4
	Nonce uint32
	// Field 1 with TypeId=4
	Consumers uint32
	// Field 2 with TypeId=4
	Providers uint32
	// Field 3 with TypeId=4
	Sufficients uint32
	// Field 4 with TypeId=5
	Data AccountData
}

// Generated sp_weights_weight_v2_Weight with id={{false [10]}}
type Weight struct {
	// Field 0 with TypeId=11
	RefTime types.UCompact
	// Field 1 with TypeId=11
	ProofSize types.UCompact
}

// Generated frame_support_dispatch_PerDispatchClass with id={{false [9]}}
type PerDispatchClass struct {
	// Field 0 with TypeId=10
	Normal Weight
	// Field 1 with TypeId=10
	Operational Weight
	// Field 2 with TypeId=10
	Mandatory Weight
}

// Generated SpRuntimeGenericDigestDigestItem with id=17
type DigestItem struct {
	IsPreRuntime                   bool
	AsPreRuntimeConsensusEngineId0 [4]byte
	AsPreRuntimeVecu81             []byte
	IsConsensus                    bool
	AsConsensusConsensusEngineId0  [4]byte
	AsConsensusVecu81              []byte
	IsSeal                         bool
	AsSealConsensusEngineId0       [4]byte
	AsSealVecu81                   []byte
	IsOther                        bool
	AsOtherField0                  []byte
	IsRuntimeEnvironmentUpdated    bool
}

func (ty DigestItem) Encode(encoder scale.Encoder) (err error) {
	if ty.IsPreRuntime {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPreRuntimeConsensusEngineId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPreRuntimeVecu81)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsConsensus {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsConsensusConsensusEngineId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsConsensusVecu81)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSeal {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSealConsensusEngineId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSealVecu81)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsOther {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsOtherField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsRuntimeEnvironmentUpdated {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *DigestItem) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 6:
		ty.IsPreRuntime = true
		err = decoder.Decode(&ty.AsPreRuntimeConsensusEngineId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsPreRuntimeVecu81)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsConsensus = true
		err = decoder.Decode(&ty.AsConsensusConsensusEngineId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsConsensusVecu81)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsSeal = true
		err = decoder.Decode(&ty.AsSealConsensusEngineId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSealVecu81)
		if err != nil {
			return err
		}
		return
	case 0:
		ty.IsOther = true
		err = decoder.Decode(&ty.AsOtherField0)
		if err != nil {
			return err
		}
		return
	case 8:
		ty.IsRuntimeEnvironmentUpdated = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *DigestItem) Variant() (uint8, error) {
	if ty.IsPreRuntime {
		return 6, nil
	}
	if ty.IsConsensus {
		return 4, nil
	}
	if ty.IsSeal {
		return 5, nil
	}
	if ty.IsOther {
		return 0, nil
	}
	if ty.IsRuntimeEnvironmentUpdated {
		return 8, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty DigestItem) MarshalJSON() ([]byte, error) {
	if ty.IsPreRuntime {
		m := map[string]interface{}{"DigestItem::PreRuntime": map[string]interface{}{
			"AsPreRuntimeConsensusEngineId0": ty.AsPreRuntimeConsensusEngineId0,
			"AsPreRuntimeVecu81":             ty.AsPreRuntimeVecu81,
		}}
		return json.Marshal(m)
	}
	if ty.IsConsensus {
		m := map[string]interface{}{"DigestItem::Consensus": map[string]interface{}{
			"AsConsensusConsensusEngineId0": ty.AsConsensusConsensusEngineId0,
			"AsConsensusVecu81":             ty.AsConsensusVecu81,
		}}
		return json.Marshal(m)
	}
	if ty.IsSeal {
		m := map[string]interface{}{"DigestItem::Seal": map[string]interface{}{
			"AsSealConsensusEngineId0": ty.AsSealConsensusEngineId0,
			"AsSealVecu81":             ty.AsSealVecu81,
		}}
		return json.Marshal(m)
	}
	if ty.IsOther {
		m := map[string]interface{}{"DigestItem::Other": ty.AsOtherField0}
		return json.Marshal(m)
	}
	if ty.IsRuntimeEnvironmentUpdated {
		return json.Marshal("DigestItem::RuntimeEnvironmentUpdated")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated FrameSystemPhase with id=147
type Phase struct {
	IsApplyExtrinsic       bool
	AsApplyExtrinsicField0 uint32
	IsFinalization         bool
	IsInitialization       bool
}

func (ty Phase) Encode(encoder scale.Encoder) (err error) {
	if ty.IsApplyExtrinsic {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsApplyExtrinsicField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsFinalization {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsInitialization {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Phase) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsApplyExtrinsic = true
		err = decoder.Decode(&ty.AsApplyExtrinsicField0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsFinalization = true
		return
	case 2:
		ty.IsInitialization = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Phase) Variant() (uint8, error) {
	if ty.IsApplyExtrinsic {
		return 0, nil
	}
	if ty.IsFinalization {
		return 1, nil
	}
	if ty.IsInitialization {
		return 2, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Phase) MarshalJSON() ([]byte, error) {
	if ty.IsApplyExtrinsic {
		m := map[string]interface{}{"Phase::ApplyExtrinsic": ty.AsApplyExtrinsicField0}
		return json.Marshal(m)
	}
	if ty.IsFinalization {
		return json.Marshal("Phase::Finalization")
	}
	if ty.IsInitialization {
		return json.Marshal("Phase::Initialization")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated FrameSupportDispatchDispatchClass with id=24
type DispatchClass struct {
	IsNormal      bool
	IsOperational bool
	IsMandatory   bool
}

func (ty DispatchClass) Encode(encoder scale.Encoder) (err error) {
	if ty.IsNormal {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsOperational {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsMandatory {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *DispatchClass) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsNormal = true
		return
	case 1:
		ty.IsOperational = true
		return
	case 2:
		ty.IsMandatory = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *DispatchClass) Variant() (uint8, error) {
	if ty.IsNormal {
		return 0, nil
	}
	if ty.IsOperational {
		return 1, nil
	}
	if ty.IsMandatory {
		return 2, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty DispatchClass) MarshalJSON() ([]byte, error) {
	if ty.IsNormal {
		return json.Marshal("DispatchClass::Normal")
	}
	if ty.IsOperational {
		return json.Marshal("DispatchClass::Operational")
	}
	if ty.IsMandatory {
		return json.Marshal("DispatchClass::Mandatory")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated FrameSupportDispatchPays with id=25
type Pays struct {
	IsYes bool
	IsNo  bool
}

func (ty Pays) Encode(encoder scale.Encoder) (err error) {
	if ty.IsYes {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNo {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Pays) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsYes = true
		return
	case 1:
		ty.IsNo = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Pays) Variant() (uint8, error) {
	if ty.IsYes {
		return 0, nil
	}
	if ty.IsNo {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Pays) MarshalJSON() ([]byte, error) {
	if ty.IsYes {
		return json.Marshal("Pays::Yes")
	}
	if ty.IsNo {
		return json.Marshal("Pays::No")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated frame_support_dispatch_DispatchInfo with id={{false [23]}}
type DispatchInfo struct {
	// Field 0 with TypeId=10
	Weight Weight
	// Field 1 with TypeId=24
	Class DispatchClass
	// Field 2 with TypeId=25
	PaysFee Pays
}

// Generated sp_runtime_ModuleError with id={{false [27]}}
type ModuleError struct {
	// Field 0 with TypeId=2
	Index byte
	// Field 1 with TypeId=18
	Error [4]byte
}

// Generated SpRuntimeTokenError with id=28
type TokenError struct {
	IsFundsUnavailable bool
	IsOnlyProvider     bool
	IsBelowMinimum     bool
	IsCannotCreate     bool
	IsUnknownAsset     bool
	IsFrozen           bool
	IsUnsupported      bool
	IsCannotCreateHold bool
	IsNotExpendable    bool
	IsBlocked          bool
}

func (ty TokenError) Encode(encoder scale.Encoder) (err error) {
	if ty.IsFundsUnavailable {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsOnlyProvider {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBelowMinimum {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCannotCreate {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnknownAsset {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsFrozen {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnsupported {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCannotCreateHold {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNotExpendable {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBlocked {
		err = encoder.PushByte(9)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *TokenError) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsFundsUnavailable = true
		return
	case 1:
		ty.IsOnlyProvider = true
		return
	case 2:
		ty.IsBelowMinimum = true
		return
	case 3:
		ty.IsCannotCreate = true
		return
	case 4:
		ty.IsUnknownAsset = true
		return
	case 5:
		ty.IsFrozen = true
		return
	case 6:
		ty.IsUnsupported = true
		return
	case 7:
		ty.IsCannotCreateHold = true
		return
	case 8:
		ty.IsNotExpendable = true
		return
	case 9:
		ty.IsBlocked = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *TokenError) Variant() (uint8, error) {
	if ty.IsFundsUnavailable {
		return 0, nil
	}
	if ty.IsOnlyProvider {
		return 1, nil
	}
	if ty.IsBelowMinimum {
		return 2, nil
	}
	if ty.IsCannotCreate {
		return 3, nil
	}
	if ty.IsUnknownAsset {
		return 4, nil
	}
	if ty.IsFrozen {
		return 5, nil
	}
	if ty.IsUnsupported {
		return 6, nil
	}
	if ty.IsCannotCreateHold {
		return 7, nil
	}
	if ty.IsNotExpendable {
		return 8, nil
	}
	if ty.IsBlocked {
		return 9, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty TokenError) MarshalJSON() ([]byte, error) {
	if ty.IsFundsUnavailable {
		return json.Marshal("TokenError::FundsUnavailable")
	}
	if ty.IsOnlyProvider {
		return json.Marshal("TokenError::OnlyProvider")
	}
	if ty.IsBelowMinimum {
		return json.Marshal("TokenError::BelowMinimum")
	}
	if ty.IsCannotCreate {
		return json.Marshal("TokenError::CannotCreate")
	}
	if ty.IsUnknownAsset {
		return json.Marshal("TokenError::UnknownAsset")
	}
	if ty.IsFrozen {
		return json.Marshal("TokenError::Frozen")
	}
	if ty.IsUnsupported {
		return json.Marshal("TokenError::Unsupported")
	}
	if ty.IsCannotCreateHold {
		return json.Marshal("TokenError::CannotCreateHold")
	}
	if ty.IsNotExpendable {
		return json.Marshal("TokenError::NotExpendable")
	}
	if ty.IsBlocked {
		return json.Marshal("TokenError::Blocked")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated SpArithmeticArithmeticError with id=29
type ArithmeticError struct {
	IsUnderflow      bool
	IsOverflow       bool
	IsDivisionByZero bool
}

func (ty ArithmeticError) Encode(encoder scale.Encoder) (err error) {
	if ty.IsUnderflow {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsOverflow {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDivisionByZero {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *ArithmeticError) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsUnderflow = true
		return
	case 1:
		ty.IsOverflow = true
		return
	case 2:
		ty.IsDivisionByZero = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *ArithmeticError) Variant() (uint8, error) {
	if ty.IsUnderflow {
		return 0, nil
	}
	if ty.IsOverflow {
		return 1, nil
	}
	if ty.IsDivisionByZero {
		return 2, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty ArithmeticError) MarshalJSON() ([]byte, error) {
	if ty.IsUnderflow {
		return json.Marshal("ArithmeticError::Underflow")
	}
	if ty.IsOverflow {
		return json.Marshal("ArithmeticError::Overflow")
	}
	if ty.IsDivisionByZero {
		return json.Marshal("ArithmeticError::DivisionByZero")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated SpRuntimeTransactionalError with id=30
type TransactionalError struct {
	IsLimitReached bool
	IsNoLayer      bool
}

func (ty TransactionalError) Encode(encoder scale.Encoder) (err error) {
	if ty.IsLimitReached {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNoLayer {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *TransactionalError) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsLimitReached = true
		return
	case 1:
		ty.IsNoLayer = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *TransactionalError) Variant() (uint8, error) {
	if ty.IsLimitReached {
		return 0, nil
	}
	if ty.IsNoLayer {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty TransactionalError) MarshalJSON() ([]byte, error) {
	if ty.IsLimitReached {
		return json.Marshal("TransactionalError::LimitReached")
	}
	if ty.IsNoLayer {
		return json.Marshal("TransactionalError::NoLayer")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated SpRuntimeDispatchError with id=26
type DispatchError struct {
	IsOther               bool
	IsCannotLookup        bool
	IsBadOrigin           bool
	IsModule              bool
	AsModuleField0        ModuleError
	IsConsumerRemaining   bool
	IsNoProviders         bool
	IsTooManyConsumers    bool
	IsToken               bool
	AsTokenField0         *TokenError
	IsArithmetic          bool
	AsArithmeticField0    *ArithmeticError
	IsTransactional       bool
	AsTransactionalField0 *TransactionalError
	IsExhausted           bool
	IsCorruption          bool
	IsUnavailable         bool
	IsRootNotAllowed      bool
}

func (ty DispatchError) Encode(encoder scale.Encoder) (err error) {
	if ty.IsOther {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCannotLookup {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBadOrigin {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsModule {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsModuleField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsConsumerRemaining {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNoProviders {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTooManyConsumers {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsToken {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTokenField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsArithmetic {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsArithmeticField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTransactional {
		err = encoder.PushByte(9)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransactionalField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExhausted {
		err = encoder.PushByte(10)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCorruption {
		err = encoder.PushByte(11)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnavailable {
		err = encoder.PushByte(12)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsRootNotAllowed {
		err = encoder.PushByte(13)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *DispatchError) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsOther = true
		return
	case 1:
		ty.IsCannotLookup = true
		return
	case 2:
		ty.IsBadOrigin = true
		return
	case 3:
		ty.IsModule = true
		err = decoder.Decode(&ty.AsModuleField0)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsConsumerRemaining = true
		return
	case 5:
		ty.IsNoProviders = true
		return
	case 6:
		ty.IsTooManyConsumers = true
		return
	case 7:
		ty.IsToken = true
		var tmp TokenError
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsTokenField0 = &tmp
		return
	case 8:
		ty.IsArithmetic = true
		var tmp ArithmeticError
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsArithmeticField0 = &tmp
		return
	case 9:
		ty.IsTransactional = true
		var tmp TransactionalError
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsTransactionalField0 = &tmp
		return
	case 10:
		ty.IsExhausted = true
		return
	case 11:
		ty.IsCorruption = true
		return
	case 12:
		ty.IsUnavailable = true
		return
	case 13:
		ty.IsRootNotAllowed = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *DispatchError) Variant() (uint8, error) {
	if ty.IsOther {
		return 0, nil
	}
	if ty.IsCannotLookup {
		return 1, nil
	}
	if ty.IsBadOrigin {
		return 2, nil
	}
	if ty.IsModule {
		return 3, nil
	}
	if ty.IsConsumerRemaining {
		return 4, nil
	}
	if ty.IsNoProviders {
		return 5, nil
	}
	if ty.IsTooManyConsumers {
		return 6, nil
	}
	if ty.IsToken {
		return 7, nil
	}
	if ty.IsArithmetic {
		return 8, nil
	}
	if ty.IsTransactional {
		return 9, nil
	}
	if ty.IsExhausted {
		return 10, nil
	}
	if ty.IsCorruption {
		return 11, nil
	}
	if ty.IsUnavailable {
		return 12, nil
	}
	if ty.IsRootNotAllowed {
		return 13, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty DispatchError) MarshalJSON() ([]byte, error) {
	if ty.IsOther {
		return json.Marshal("DispatchError::Other")
	}
	if ty.IsCannotLookup {
		return json.Marshal("DispatchError::CannotLookup")
	}
	if ty.IsBadOrigin {
		return json.Marshal("DispatchError::BadOrigin")
	}
	if ty.IsModule {
		m := map[string]interface{}{"DispatchError::Module": ty.AsModuleField0}
		return json.Marshal(m)
	}
	if ty.IsConsumerRemaining {
		return json.Marshal("DispatchError::ConsumerRemaining")
	}
	if ty.IsNoProviders {
		return json.Marshal("DispatchError::NoProviders")
	}
	if ty.IsTooManyConsumers {
		return json.Marshal("DispatchError::TooManyConsumers")
	}
	if ty.IsToken {
		m := map[string]interface{}{"DispatchError::Token": ty.AsTokenField0}
		return json.Marshal(m)
	}
	if ty.IsArithmetic {
		m := map[string]interface{}{"DispatchError::Arithmetic": ty.AsArithmeticField0}
		return json.Marshal(m)
	}
	if ty.IsTransactional {
		m := map[string]interface{}{"DispatchError::Transactional": ty.AsTransactionalField0}
		return json.Marshal(m)
	}
	if ty.IsExhausted {
		return json.Marshal("DispatchError::Exhausted")
	}
	if ty.IsCorruption {
		return json.Marshal("DispatchError::Corruption")
	}
	if ty.IsUnavailable {
		return json.Marshal("DispatchError::Unavailable")
	}
	if ty.IsRootNotAllowed {
		return json.Marshal("DispatchError::RootNotAllowed")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated FrameSystemPalletEvent with id=22
type FrameSystemPalletEvent struct {
	IsExtrinsicSuccess               bool
	AsExtrinsicSuccessDispatchInfo0  DispatchInfo
	IsExtrinsicFailed                bool
	AsExtrinsicFailedDispatchError0  DispatchError
	AsExtrinsicFailedDispatchInfo1   DispatchInfo
	IsCodeUpdated                    bool
	IsNewAccount                     bool
	AsNewAccountAccount0             [32]byte
	IsKilledAccount                  bool
	AsKilledAccountAccount0          [32]byte
	IsRemarked                       bool
	AsRemarkedSender0                [32]byte
	AsRemarkedHash1                  [32]byte
	IsUpgradeAuthorized              bool
	AsUpgradeAuthorizedCodeHash0     [32]byte
	AsUpgradeAuthorizedCheckVersion1 bool
}

func (ty FrameSystemPalletEvent) Encode(encoder scale.Encoder) (err error) {
	if ty.IsExtrinsicSuccess {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExtrinsicSuccessDispatchInfo0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExtrinsicFailed {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExtrinsicFailedDispatchError0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExtrinsicFailedDispatchInfo1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCodeUpdated {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNewAccount {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNewAccountAccount0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsKilledAccount {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsKilledAccountAccount0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsRemarked {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsRemarkedSender0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsRemarkedHash1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUpgradeAuthorized {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpgradeAuthorizedCodeHash0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpgradeAuthorizedCheckVersion1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *FrameSystemPalletEvent) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsExtrinsicSuccess = true
		err = decoder.Decode(&ty.AsExtrinsicSuccessDispatchInfo0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsExtrinsicFailed = true
		err = decoder.Decode(&ty.AsExtrinsicFailedDispatchError0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExtrinsicFailedDispatchInfo1)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsCodeUpdated = true
		return
	case 3:
		ty.IsNewAccount = true
		err = decoder.Decode(&ty.AsNewAccountAccount0)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsKilledAccount = true
		err = decoder.Decode(&ty.AsKilledAccountAccount0)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsRemarked = true
		err = decoder.Decode(&ty.AsRemarkedSender0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsRemarkedHash1)
		if err != nil {
			return err
		}
		return
	case 6:
		ty.IsUpgradeAuthorized = true
		err = decoder.Decode(&ty.AsUpgradeAuthorizedCodeHash0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpgradeAuthorizedCheckVersion1)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *FrameSystemPalletEvent) Variant() (uint8, error) {
	if ty.IsExtrinsicSuccess {
		return 0, nil
	}
	if ty.IsExtrinsicFailed {
		return 1, nil
	}
	if ty.IsCodeUpdated {
		return 2, nil
	}
	if ty.IsNewAccount {
		return 3, nil
	}
	if ty.IsKilledAccount {
		return 4, nil
	}
	if ty.IsRemarked {
		return 5, nil
	}
	if ty.IsUpgradeAuthorized {
		return 6, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty FrameSystemPalletEvent) MarshalJSON() ([]byte, error) {
	if ty.IsExtrinsicSuccess {
		m := map[string]interface{}{"FrameSystemPalletEvent::ExtrinsicSuccess": ty.AsExtrinsicSuccessDispatchInfo0}
		return json.Marshal(m)
	}
	if ty.IsExtrinsicFailed {
		m := map[string]interface{}{"FrameSystemPalletEvent::ExtrinsicFailed": map[string]interface{}{
			"AsExtrinsicFailedDispatchError0": ty.AsExtrinsicFailedDispatchError0,
			"AsExtrinsicFailedDispatchInfo1":  ty.AsExtrinsicFailedDispatchInfo1,
		}}
		return json.Marshal(m)
	}
	if ty.IsCodeUpdated {
		return json.Marshal("FrameSystemPalletEvent::CodeUpdated")
	}
	if ty.IsNewAccount {
		m := map[string]interface{}{"FrameSystemPalletEvent::NewAccount": ty.AsNewAccountAccount0}
		return json.Marshal(m)
	}
	if ty.IsKilledAccount {
		m := map[string]interface{}{"FrameSystemPalletEvent::KilledAccount": ty.AsKilledAccountAccount0}
		return json.Marshal(m)
	}
	if ty.IsRemarked {
		m := map[string]interface{}{"FrameSystemPalletEvent::Remarked": map[string]interface{}{
			"AsRemarkedHash1":   ty.AsRemarkedHash1,
			"AsRemarkedSender0": ty.AsRemarkedSender0,
		}}
		return json.Marshal(m)
	}
	if ty.IsUpgradeAuthorized {
		m := map[string]interface{}{"FrameSystemPalletEvent::UpgradeAuthorized": map[string]interface{}{
			"AsUpgradeAuthorizedCheckVersion1": ty.AsUpgradeAuthorizedCheckVersion1,
			"AsUpgradeAuthorizedCodeHash0":     ty.AsUpgradeAuthorizedCodeHash0,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated Option with id=32
type OptionTByteArray32 struct {
	IsNone       bool
	IsSome       bool
	AsSomeField0 [32]byte
}

func (ty OptionTByteArray32) Encode(encoder scale.Encoder) (err error) {
	if ty.IsNone {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSome {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSomeField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *OptionTByteArray32) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsNone = true
		return
	case 1:
		ty.IsSome = true
		err = decoder.Decode(&ty.AsSomeField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *OptionTByteArray32) Variant() (uint8, error) {
	if ty.IsNone {
		return 0, nil
	}
	if ty.IsSome {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty OptionTByteArray32) MarshalJSON() ([]byte, error) {
	if ty.IsNone {
		return json.Marshal("OptionTByteArray32::None")
	}
	if ty.IsSome {
		m := map[string]interface{}{"OptionTByteArray32::Some": ty.AsSomeField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated CumulusPalletParachainSystemPalletEvent with id=31
type CumulusPalletParachainSystemPalletEvent struct {
	IsValidationFunctionStored                     bool
	IsValidationFunctionApplied                    bool
	AsValidationFunctionAppliedRelayChainBlockNum0 uint32
	IsValidationFunctionDiscarded                  bool
	IsDownwardMessagesReceived                     bool
	AsDownwardMessagesReceivedCount0               uint32
	IsDownwardMessagesProcessed                    bool
	AsDownwardMessagesProcessedWeightUsed0         Weight
	AsDownwardMessagesProcessedDmqHead1            [32]byte
	IsUpwardMessageSent                            bool
	AsUpwardMessageSentMessageHash0                *OptionTByteArray32
}

func (ty CumulusPalletParachainSystemPalletEvent) Encode(encoder scale.Encoder) (err error) {
	if ty.IsValidationFunctionStored {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsValidationFunctionApplied {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsValidationFunctionAppliedRelayChainBlockNum0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsValidationFunctionDiscarded {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDownwardMessagesReceived {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDownwardMessagesReceivedCount0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDownwardMessagesProcessed {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDownwardMessagesProcessedWeightUsed0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDownwardMessagesProcessedDmqHead1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUpwardMessageSent {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpwardMessageSentMessageHash0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *CumulusPalletParachainSystemPalletEvent) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsValidationFunctionStored = true
		return
	case 1:
		ty.IsValidationFunctionApplied = true
		err = decoder.Decode(&ty.AsValidationFunctionAppliedRelayChainBlockNum0)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsValidationFunctionDiscarded = true
		return
	case 3:
		ty.IsDownwardMessagesReceived = true
		err = decoder.Decode(&ty.AsDownwardMessagesReceivedCount0)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsDownwardMessagesProcessed = true
		err = decoder.Decode(&ty.AsDownwardMessagesProcessedWeightUsed0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDownwardMessagesProcessedDmqHead1)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsUpwardMessageSent = true
		var tmp OptionTByteArray32
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsUpwardMessageSentMessageHash0 = &tmp
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *CumulusPalletParachainSystemPalletEvent) Variant() (uint8, error) {
	if ty.IsValidationFunctionStored {
		return 0, nil
	}
	if ty.IsValidationFunctionApplied {
		return 1, nil
	}
	if ty.IsValidationFunctionDiscarded {
		return 2, nil
	}
	if ty.IsDownwardMessagesReceived {
		return 3, nil
	}
	if ty.IsDownwardMessagesProcessed {
		return 4, nil
	}
	if ty.IsUpwardMessageSent {
		return 5, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty CumulusPalletParachainSystemPalletEvent) MarshalJSON() ([]byte, error) {
	if ty.IsValidationFunctionStored {
		return json.Marshal("CumulusPalletParachainSystemPalletEvent::ValidationFunctionStored")
	}
	if ty.IsValidationFunctionApplied {
		m := map[string]interface{}{"CumulusPalletParachainSystemPalletEvent::ValidationFunctionApplied": ty.AsValidationFunctionAppliedRelayChainBlockNum0}
		return json.Marshal(m)
	}
	if ty.IsValidationFunctionDiscarded {
		return json.Marshal("CumulusPalletParachainSystemPalletEvent::ValidationFunctionDiscarded")
	}
	if ty.IsDownwardMessagesReceived {
		m := map[string]interface{}{"CumulusPalletParachainSystemPalletEvent::DownwardMessagesReceived": ty.AsDownwardMessagesReceivedCount0}
		return json.Marshal(m)
	}
	if ty.IsDownwardMessagesProcessed {
		m := map[string]interface{}{"CumulusPalletParachainSystemPalletEvent::DownwardMessagesProcessed": map[string]interface{}{
			"AsDownwardMessagesProcessedDmqHead1":    ty.AsDownwardMessagesProcessedDmqHead1,
			"AsDownwardMessagesProcessedWeightUsed0": ty.AsDownwardMessagesProcessedWeightUsed0,
		}}
		return json.Marshal(m)
	}
	if ty.IsUpwardMessageSent {
		m := map[string]interface{}{"CumulusPalletParachainSystemPalletEvent::UpwardMessageSent": ty.AsUpwardMessageSentMessageHash0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated FrameSupportTraitsTokensMiscBalanceStatus with id=34
type BalanceStatus struct {
	IsFree     bool
	IsReserved bool
}

func (ty BalanceStatus) Encode(encoder scale.Encoder) (err error) {
	if ty.IsFree {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReserved {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *BalanceStatus) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsFree = true
		return
	case 1:
		ty.IsReserved = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *BalanceStatus) Variant() (uint8, error) {
	if ty.IsFree {
		return 0, nil
	}
	if ty.IsReserved {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty BalanceStatus) MarshalJSON() ([]byte, error) {
	if ty.IsFree {
		return json.Marshal("BalanceStatus::Free")
	}
	if ty.IsReserved {
		return json.Marshal("BalanceStatus::Reserved")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated PalletBalancesPalletEvent with id=33
type PalletBalancesPalletEvent struct {
	IsEndowed                              bool
	AsEndowedAccount0                      [32]byte
	AsEndowedFreeBalance1                  types.U128
	IsDustLost                             bool
	AsDustLostAccount0                     [32]byte
	AsDustLostAmount1                      types.U128
	IsTransfer                             bool
	AsTransferFrom0                        [32]byte
	AsTransferTo1                          [32]byte
	AsTransferAmount2                      types.U128
	IsBalanceSet                           bool
	AsBalanceSetWho0                       [32]byte
	AsBalanceSetFree1                      types.U128
	IsReserved                             bool
	AsReservedWho0                         [32]byte
	AsReservedAmount1                      types.U128
	IsUnreserved                           bool
	AsUnreservedWho0                       [32]byte
	AsUnreservedAmount1                    types.U128
	IsReserveRepatriated                   bool
	AsReserveRepatriatedFrom0              [32]byte
	AsReserveRepatriatedTo1                [32]byte
	AsReserveRepatriatedAmount2            types.U128
	AsReserveRepatriatedDestinationStatus3 BalanceStatus
	IsDeposit                              bool
	AsDepositWho0                          [32]byte
	AsDepositAmount1                       types.U128
	IsWithdraw                             bool
	AsWithdrawWho0                         [32]byte
	AsWithdrawAmount1                      types.U128
	IsSlashed                              bool
	AsSlashedWho0                          [32]byte
	AsSlashedAmount1                       types.U128
	IsMinted                               bool
	AsMintedWho0                           [32]byte
	AsMintedAmount1                        types.U128
	IsBurned                               bool
	AsBurnedWho0                           [32]byte
	AsBurnedAmount1                        types.U128
	IsSuspended                            bool
	AsSuspendedWho0                        [32]byte
	AsSuspendedAmount1                     types.U128
	IsRestored                             bool
	AsRestoredWho0                         [32]byte
	AsRestoredAmount1                      types.U128
	IsUpgraded                             bool
	AsUpgradedWho0                         [32]byte
	IsIssued                               bool
	AsIssuedAmount0                        types.U128
	IsRescinded                            bool
	AsRescindedAmount0                     types.U128
	IsLocked                               bool
	AsLockedWho0                           [32]byte
	AsLockedAmount1                        types.U128
	IsUnlocked                             bool
	AsUnlockedWho0                         [32]byte
	AsUnlockedAmount1                      types.U128
	IsFrozen                               bool
	AsFrozenWho0                           [32]byte
	AsFrozenAmount1                        types.U128
	IsThawed                               bool
	AsThawedWho0                           [32]byte
	AsThawedAmount1                        types.U128
	IsTotalIssuanceForced                  bool
	AsTotalIssuanceForcedOld0              types.U128
	AsTotalIssuanceForcedNew1              types.U128
}

func (ty PalletBalancesPalletEvent) Encode(encoder scale.Encoder) (err error) {
	if ty.IsEndowed {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsEndowedAccount0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsEndowedFreeBalance1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDustLost {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDustLostAccount0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDustLostAmount1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTransfer {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferFrom0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferTo1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferAmount2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBalanceSet {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBalanceSetWho0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBalanceSetFree1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReserved {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReservedWho0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReservedAmount1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnreserved {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnreservedWho0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnreservedAmount1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReserveRepatriated {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReserveRepatriatedFrom0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReserveRepatriatedTo1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReserveRepatriatedAmount2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReserveRepatriatedDestinationStatus3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDeposit {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositWho0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositAmount1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWithdraw {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWithdrawWho0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWithdrawAmount1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSlashed {
		err = encoder.PushByte(9)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSlashedWho0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSlashedAmount1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsMinted {
		err = encoder.PushByte(10)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsMintedWho0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsMintedAmount1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBurned {
		err = encoder.PushByte(11)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBurnedWho0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBurnedAmount1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSuspended {
		err = encoder.PushByte(12)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSuspendedWho0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSuspendedAmount1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsRestored {
		err = encoder.PushByte(13)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsRestoredWho0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsRestoredAmount1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUpgraded {
		err = encoder.PushByte(14)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpgradedWho0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsIssued {
		err = encoder.PushByte(15)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsIssuedAmount0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsRescinded {
		err = encoder.PushByte(16)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsRescindedAmount0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsLocked {
		err = encoder.PushByte(17)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLockedWho0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLockedAmount1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnlocked {
		err = encoder.PushByte(18)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnlockedWho0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnlockedAmount1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsFrozen {
		err = encoder.PushByte(19)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsFrozenWho0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsFrozenAmount1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsThawed {
		err = encoder.PushByte(20)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsThawedWho0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsThawedAmount1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTotalIssuanceForced {
		err = encoder.PushByte(21)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTotalIssuanceForcedOld0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTotalIssuanceForcedNew1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *PalletBalancesPalletEvent) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsEndowed = true
		err = decoder.Decode(&ty.AsEndowedAccount0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsEndowedFreeBalance1)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsDustLost = true
		err = decoder.Decode(&ty.AsDustLostAccount0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDustLostAmount1)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsTransfer = true
		err = decoder.Decode(&ty.AsTransferFrom0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferTo1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferAmount2)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsBalanceSet = true
		err = decoder.Decode(&ty.AsBalanceSetWho0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsBalanceSetFree1)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsReserved = true
		err = decoder.Decode(&ty.AsReservedWho0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsReservedAmount1)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsUnreserved = true
		err = decoder.Decode(&ty.AsUnreservedWho0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUnreservedAmount1)
		if err != nil {
			return err
		}
		return
	case 6:
		ty.IsReserveRepatriated = true
		err = decoder.Decode(&ty.AsReserveRepatriatedFrom0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsReserveRepatriatedTo1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsReserveRepatriatedAmount2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsReserveRepatriatedDestinationStatus3)
		if err != nil {
			return err
		}
		return
	case 7:
		ty.IsDeposit = true
		err = decoder.Decode(&ty.AsDepositWho0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDepositAmount1)
		if err != nil {
			return err
		}
		return
	case 8:
		ty.IsWithdraw = true
		err = decoder.Decode(&ty.AsWithdrawWho0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsWithdrawAmount1)
		if err != nil {
			return err
		}
		return
	case 9:
		ty.IsSlashed = true
		err = decoder.Decode(&ty.AsSlashedWho0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSlashedAmount1)
		if err != nil {
			return err
		}
		return
	case 10:
		ty.IsMinted = true
		err = decoder.Decode(&ty.AsMintedWho0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsMintedAmount1)
		if err != nil {
			return err
		}
		return
	case 11:
		ty.IsBurned = true
		err = decoder.Decode(&ty.AsBurnedWho0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsBurnedAmount1)
		if err != nil {
			return err
		}
		return
	case 12:
		ty.IsSuspended = true
		err = decoder.Decode(&ty.AsSuspendedWho0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSuspendedAmount1)
		if err != nil {
			return err
		}
		return
	case 13:
		ty.IsRestored = true
		err = decoder.Decode(&ty.AsRestoredWho0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsRestoredAmount1)
		if err != nil {
			return err
		}
		return
	case 14:
		ty.IsUpgraded = true
		err = decoder.Decode(&ty.AsUpgradedWho0)
		if err != nil {
			return err
		}
		return
	case 15:
		ty.IsIssued = true
		err = decoder.Decode(&ty.AsIssuedAmount0)
		if err != nil {
			return err
		}
		return
	case 16:
		ty.IsRescinded = true
		err = decoder.Decode(&ty.AsRescindedAmount0)
		if err != nil {
			return err
		}
		return
	case 17:
		ty.IsLocked = true
		err = decoder.Decode(&ty.AsLockedWho0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsLockedAmount1)
		if err != nil {
			return err
		}
		return
	case 18:
		ty.IsUnlocked = true
		err = decoder.Decode(&ty.AsUnlockedWho0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUnlockedAmount1)
		if err != nil {
			return err
		}
		return
	case 19:
		ty.IsFrozen = true
		err = decoder.Decode(&ty.AsFrozenWho0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsFrozenAmount1)
		if err != nil {
			return err
		}
		return
	case 20:
		ty.IsThawed = true
		err = decoder.Decode(&ty.AsThawedWho0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsThawedAmount1)
		if err != nil {
			return err
		}
		return
	case 21:
		ty.IsTotalIssuanceForced = true
		err = decoder.Decode(&ty.AsTotalIssuanceForcedOld0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTotalIssuanceForcedNew1)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *PalletBalancesPalletEvent) Variant() (uint8, error) {
	if ty.IsEndowed {
		return 0, nil
	}
	if ty.IsDustLost {
		return 1, nil
	}
	if ty.IsTransfer {
		return 2, nil
	}
	if ty.IsBalanceSet {
		return 3, nil
	}
	if ty.IsReserved {
		return 4, nil
	}
	if ty.IsUnreserved {
		return 5, nil
	}
	if ty.IsReserveRepatriated {
		return 6, nil
	}
	if ty.IsDeposit {
		return 7, nil
	}
	if ty.IsWithdraw {
		return 8, nil
	}
	if ty.IsSlashed {
		return 9, nil
	}
	if ty.IsMinted {
		return 10, nil
	}
	if ty.IsBurned {
		return 11, nil
	}
	if ty.IsSuspended {
		return 12, nil
	}
	if ty.IsRestored {
		return 13, nil
	}
	if ty.IsUpgraded {
		return 14, nil
	}
	if ty.IsIssued {
		return 15, nil
	}
	if ty.IsRescinded {
		return 16, nil
	}
	if ty.IsLocked {
		return 17, nil
	}
	if ty.IsUnlocked {
		return 18, nil
	}
	if ty.IsFrozen {
		return 19, nil
	}
	if ty.IsThawed {
		return 20, nil
	}
	if ty.IsTotalIssuanceForced {
		return 21, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty PalletBalancesPalletEvent) MarshalJSON() ([]byte, error) {
	if ty.IsEndowed {
		m := map[string]interface{}{"PalletBalancesPalletEvent::Endowed": map[string]interface{}{
			"AsEndowedAccount0":     ty.AsEndowedAccount0,
			"AsEndowedFreeBalance1": ty.AsEndowedFreeBalance1,
		}}
		return json.Marshal(m)
	}
	if ty.IsDustLost {
		m := map[string]interface{}{"PalletBalancesPalletEvent::DustLost": map[string]interface{}{
			"AsDustLostAccount0": ty.AsDustLostAccount0,
			"AsDustLostAmount1":  ty.AsDustLostAmount1,
		}}
		return json.Marshal(m)
	}
	if ty.IsTransfer {
		m := map[string]interface{}{"PalletBalancesPalletEvent::Transfer": map[string]interface{}{
			"AsTransferAmount2": ty.AsTransferAmount2,
			"AsTransferFrom0":   ty.AsTransferFrom0,
			"AsTransferTo1":     ty.AsTransferTo1,
		}}
		return json.Marshal(m)
	}
	if ty.IsBalanceSet {
		m := map[string]interface{}{"PalletBalancesPalletEvent::BalanceSet": map[string]interface{}{
			"AsBalanceSetFree1": ty.AsBalanceSetFree1,
			"AsBalanceSetWho0":  ty.AsBalanceSetWho0,
		}}
		return json.Marshal(m)
	}
	if ty.IsReserved {
		m := map[string]interface{}{"PalletBalancesPalletEvent::Reserved": map[string]interface{}{
			"AsReservedAmount1": ty.AsReservedAmount1,
			"AsReservedWho0":    ty.AsReservedWho0,
		}}
		return json.Marshal(m)
	}
	if ty.IsUnreserved {
		m := map[string]interface{}{"PalletBalancesPalletEvent::Unreserved": map[string]interface{}{
			"AsUnreservedAmount1": ty.AsUnreservedAmount1,
			"AsUnreservedWho0":    ty.AsUnreservedWho0,
		}}
		return json.Marshal(m)
	}
	if ty.IsReserveRepatriated {
		m := map[string]interface{}{"PalletBalancesPalletEvent::ReserveRepatriated": map[string]interface{}{
			"AsReserveRepatriatedAmount2":            ty.AsReserveRepatriatedAmount2,
			"AsReserveRepatriatedDestinationStatus3": ty.AsReserveRepatriatedDestinationStatus3,
			"AsReserveRepatriatedFrom0":              ty.AsReserveRepatriatedFrom0,
			"AsReserveRepatriatedTo1":                ty.AsReserveRepatriatedTo1,
		}}
		return json.Marshal(m)
	}
	if ty.IsDeposit {
		m := map[string]interface{}{"PalletBalancesPalletEvent::Deposit": map[string]interface{}{
			"AsDepositAmount1": ty.AsDepositAmount1,
			"AsDepositWho0":    ty.AsDepositWho0,
		}}
		return json.Marshal(m)
	}
	if ty.IsWithdraw {
		m := map[string]interface{}{"PalletBalancesPalletEvent::Withdraw": map[string]interface{}{
			"AsWithdrawAmount1": ty.AsWithdrawAmount1,
			"AsWithdrawWho0":    ty.AsWithdrawWho0,
		}}
		return json.Marshal(m)
	}
	if ty.IsSlashed {
		m := map[string]interface{}{"PalletBalancesPalletEvent::Slashed": map[string]interface{}{
			"AsSlashedAmount1": ty.AsSlashedAmount1,
			"AsSlashedWho0":    ty.AsSlashedWho0,
		}}
		return json.Marshal(m)
	}
	if ty.IsMinted {
		m := map[string]interface{}{"PalletBalancesPalletEvent::Minted": map[string]interface{}{
			"AsMintedAmount1": ty.AsMintedAmount1,
			"AsMintedWho0":    ty.AsMintedWho0,
		}}
		return json.Marshal(m)
	}
	if ty.IsBurned {
		m := map[string]interface{}{"PalletBalancesPalletEvent::Burned": map[string]interface{}{
			"AsBurnedAmount1": ty.AsBurnedAmount1,
			"AsBurnedWho0":    ty.AsBurnedWho0,
		}}
		return json.Marshal(m)
	}
	if ty.IsSuspended {
		m := map[string]interface{}{"PalletBalancesPalletEvent::Suspended": map[string]interface{}{
			"AsSuspendedAmount1": ty.AsSuspendedAmount1,
			"AsSuspendedWho0":    ty.AsSuspendedWho0,
		}}
		return json.Marshal(m)
	}
	if ty.IsRestored {
		m := map[string]interface{}{"PalletBalancesPalletEvent::Restored": map[string]interface{}{
			"AsRestoredAmount1": ty.AsRestoredAmount1,
			"AsRestoredWho0":    ty.AsRestoredWho0,
		}}
		return json.Marshal(m)
	}
	if ty.IsUpgraded {
		m := map[string]interface{}{"PalletBalancesPalletEvent::Upgraded": ty.AsUpgradedWho0}
		return json.Marshal(m)
	}
	if ty.IsIssued {
		m := map[string]interface{}{"PalletBalancesPalletEvent::Issued": ty.AsIssuedAmount0}
		return json.Marshal(m)
	}
	if ty.IsRescinded {
		m := map[string]interface{}{"PalletBalancesPalletEvent::Rescinded": ty.AsRescindedAmount0}
		return json.Marshal(m)
	}
	if ty.IsLocked {
		m := map[string]interface{}{"PalletBalancesPalletEvent::Locked": map[string]interface{}{
			"AsLockedAmount1": ty.AsLockedAmount1,
			"AsLockedWho0":    ty.AsLockedWho0,
		}}
		return json.Marshal(m)
	}
	if ty.IsUnlocked {
		m := map[string]interface{}{"PalletBalancesPalletEvent::Unlocked": map[string]interface{}{
			"AsUnlockedAmount1": ty.AsUnlockedAmount1,
			"AsUnlockedWho0":    ty.AsUnlockedWho0,
		}}
		return json.Marshal(m)
	}
	if ty.IsFrozen {
		m := map[string]interface{}{"PalletBalancesPalletEvent::Frozen": map[string]interface{}{
			"AsFrozenAmount1": ty.AsFrozenAmount1,
			"AsFrozenWho0":    ty.AsFrozenWho0,
		}}
		return json.Marshal(m)
	}
	if ty.IsThawed {
		m := map[string]interface{}{"PalletBalancesPalletEvent::Thawed": map[string]interface{}{
			"AsThawedAmount1": ty.AsThawedAmount1,
			"AsThawedWho0":    ty.AsThawedWho0,
		}}
		return json.Marshal(m)
	}
	if ty.IsTotalIssuanceForced {
		m := map[string]interface{}{"PalletBalancesPalletEvent::TotalIssuanceForced": map[string]interface{}{
			"AsTotalIssuanceForcedNew1": ty.AsTotalIssuanceForcedNew1,
			"AsTotalIssuanceForcedOld0": ty.AsTotalIssuanceForcedOld0,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated PalletTransactionPaymentPalletEvent with id=35
type PalletTransactionPaymentPalletEvent struct {
	IsTransactionFeePaid           bool
	AsTransactionFeePaidWho0       [32]byte
	AsTransactionFeePaidActualFee1 types.U128
	AsTransactionFeePaidTip2       types.U128
}

func (ty PalletTransactionPaymentPalletEvent) Encode(encoder scale.Encoder) (err error) {
	if ty.IsTransactionFeePaid {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransactionFeePaidWho0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransactionFeePaidActualFee1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransactionFeePaidTip2)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *PalletTransactionPaymentPalletEvent) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsTransactionFeePaid = true
		err = decoder.Decode(&ty.AsTransactionFeePaidWho0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransactionFeePaidActualFee1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransactionFeePaidTip2)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *PalletTransactionPaymentPalletEvent) Variant() (uint8, error) {
	if ty.IsTransactionFeePaid {
		return 0, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty PalletTransactionPaymentPalletEvent) MarshalJSON() ([]byte, error) {
	if ty.IsTransactionFeePaid {
		m := map[string]interface{}{"PalletTransactionPaymentPalletEvent::TransactionFeePaid": map[string]interface{}{
			"AsTransactionFeePaidActualFee1": ty.AsTransactionFeePaidActualFee1,
			"AsTransactionFeePaidTip2":       ty.AsTransactionFeePaidTip2,
			"AsTransactionFeePaidWho0":       ty.AsTransactionFeePaidWho0,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated Result with id=37
type Result struct {
	IsOk        bool
	AsOkField0  struct{}
	IsErr       bool
	AsErrField0 *DispatchError
}

func (ty Result) Encode(encoder scale.Encoder) (err error) {
	if ty.IsOk {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsOkField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsErr {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsErrField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Result) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsOk = true
		err = decoder.Decode(&ty.AsOkField0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsErr = true
		var tmp DispatchError
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsErrField0 = &tmp
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Result) Variant() (uint8, error) {
	if ty.IsOk {
		return 0, nil
	}
	if ty.IsErr {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Result) MarshalJSON() ([]byte, error) {
	if ty.IsOk {
		m := map[string]interface{}{"Result::Ok": ty.AsOkField0}
		return json.Marshal(m)
	}
	if ty.IsErr {
		m := map[string]interface{}{"Result::Err": ty.AsErrField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated Option with id=39
type OptionTByteArray321 struct {
	IsNone       bool
	IsSome       bool
	AsSomeField0 [32]byte
}

func (ty OptionTByteArray321) Encode(encoder scale.Encoder) (err error) {
	if ty.IsNone {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSome {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSomeField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *OptionTByteArray321) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsNone = true
		return
	case 1:
		ty.IsSome = true
		err = decoder.Decode(&ty.AsSomeField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *OptionTByteArray321) Variant() (uint8, error) {
	if ty.IsNone {
		return 0, nil
	}
	if ty.IsSome {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty OptionTByteArray321) MarshalJSON() ([]byte, error) {
	if ty.IsNone {
		return json.Marshal("OptionTByteArray321::None")
	}
	if ty.IsSome {
		m := map[string]interface{}{"OptionTByteArray321::Some": ty.AsSomeField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated PalletSudoPalletEvent with id=36
type PalletSudoPalletEvent struct {
	IsSudid bool
	// The result of the call made by the sudo user.
	AsSudidSudoResult0 *Result
	IsKeyChanged       bool
	// The old sudo key (if one was previously set).
	AsKeyChangedOld0 OptionTByteArray321
	// The new sudo key (if one was set).
	AsKeyChangedNew1 [32]byte
	IsKeyRemoved     bool
	IsSudoAsDone     bool
	// The result of the call made by the sudo user.
	AsSudoAsDoneSudoResult0 *Result
}

func (ty PalletSudoPalletEvent) Encode(encoder scale.Encoder) (err error) {
	if ty.IsSudid {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSudidSudoResult0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsKeyChanged {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsKeyChangedOld0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsKeyChangedNew1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsKeyRemoved {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSudoAsDone {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSudoAsDoneSudoResult0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *PalletSudoPalletEvent) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsSudid = true
		var tmp Result
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsSudidSudoResult0 = &tmp
		return
	case 1:
		ty.IsKeyChanged = true
		err = decoder.Decode(&ty.AsKeyChangedOld0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsKeyChangedNew1)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsKeyRemoved = true
		return
	case 3:
		ty.IsSudoAsDone = true
		var tmp Result
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsSudoAsDoneSudoResult0 = &tmp
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *PalletSudoPalletEvent) Variant() (uint8, error) {
	if ty.IsSudid {
		return 0, nil
	}
	if ty.IsKeyChanged {
		return 1, nil
	}
	if ty.IsKeyRemoved {
		return 2, nil
	}
	if ty.IsSudoAsDone {
		return 3, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty PalletSudoPalletEvent) MarshalJSON() ([]byte, error) {
	if ty.IsSudid {
		m := map[string]interface{}{"PalletSudoPalletEvent::Sudid": ty.AsSudidSudoResult0}
		return json.Marshal(m)
	}
	if ty.IsKeyChanged {
		m := map[string]interface{}{"PalletSudoPalletEvent::KeyChanged": map[string]interface{}{
			"AsKeyChangedNew1": ty.AsKeyChangedNew1,
			"AsKeyChangedOld0": ty.AsKeyChangedOld0,
		}}
		return json.Marshal(m)
	}
	if ty.IsKeyRemoved {
		return json.Marshal("PalletSudoPalletEvent::KeyRemoved")
	}
	if ty.IsSudoAsDone {
		m := map[string]interface{}{"PalletSudoPalletEvent::SudoAsDone": ty.AsSudoAsDoneSudoResult0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated PalletCollatorSelectionPalletEvent with id=40
type PalletCollatorSelectionPalletEvent struct {
	IsNewInvulnerables                       bool
	AsNewInvulnerablesInvulnerables0         [][32]byte
	IsInvulnerableAdded                      bool
	AsInvulnerableAddedAccountId0            [32]byte
	IsInvulnerableRemoved                    bool
	AsInvulnerableRemovedAccountId0          [32]byte
	IsNewDesiredCandidates                   bool
	AsNewDesiredCandidatesDesiredCandidates0 uint32
	IsNewCandidacyBond                       bool
	AsNewCandidacyBondBondAmount0            types.U128
	IsCandidateAdded                         bool
	AsCandidateAddedAccountId0               [32]byte
	AsCandidateAddedDeposit1                 types.U128
	IsCandidateBondUpdated                   bool
	AsCandidateBondUpdatedAccountId0         [32]byte
	AsCandidateBondUpdatedDeposit1           types.U128
	IsCandidateRemoved                       bool
	AsCandidateRemovedAccountId0             [32]byte
	IsCandidateReplaced                      bool
	AsCandidateReplacedOld0                  [32]byte
	AsCandidateReplacedNew1                  [32]byte
	AsCandidateReplacedDeposit2              types.U128
	IsInvalidInvulnerableSkipped             bool
	AsInvalidInvulnerableSkippedAccountId0   [32]byte
}

func (ty PalletCollatorSelectionPalletEvent) Encode(encoder scale.Encoder) (err error) {
	if ty.IsNewInvulnerables {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNewInvulnerablesInvulnerables0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsInvulnerableAdded {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInvulnerableAddedAccountId0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsInvulnerableRemoved {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInvulnerableRemovedAccountId0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNewDesiredCandidates {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNewDesiredCandidatesDesiredCandidates0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNewCandidacyBond {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNewCandidacyBondBondAmount0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCandidateAdded {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCandidateAddedAccountId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCandidateAddedDeposit1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCandidateBondUpdated {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCandidateBondUpdatedAccountId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCandidateBondUpdatedDeposit1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCandidateRemoved {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCandidateRemovedAccountId0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCandidateReplaced {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCandidateReplacedOld0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCandidateReplacedNew1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCandidateReplacedDeposit2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsInvalidInvulnerableSkipped {
		err = encoder.PushByte(9)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInvalidInvulnerableSkippedAccountId0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *PalletCollatorSelectionPalletEvent) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsNewInvulnerables = true
		err = decoder.Decode(&ty.AsNewInvulnerablesInvulnerables0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsInvulnerableAdded = true
		err = decoder.Decode(&ty.AsInvulnerableAddedAccountId0)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsInvulnerableRemoved = true
		err = decoder.Decode(&ty.AsInvulnerableRemovedAccountId0)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsNewDesiredCandidates = true
		err = decoder.Decode(&ty.AsNewDesiredCandidatesDesiredCandidates0)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsNewCandidacyBond = true
		err = decoder.Decode(&ty.AsNewCandidacyBondBondAmount0)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsCandidateAdded = true
		err = decoder.Decode(&ty.AsCandidateAddedAccountId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCandidateAddedDeposit1)
		if err != nil {
			return err
		}
		return
	case 6:
		ty.IsCandidateBondUpdated = true
		err = decoder.Decode(&ty.AsCandidateBondUpdatedAccountId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCandidateBondUpdatedDeposit1)
		if err != nil {
			return err
		}
		return
	case 7:
		ty.IsCandidateRemoved = true
		err = decoder.Decode(&ty.AsCandidateRemovedAccountId0)
		if err != nil {
			return err
		}
		return
	case 8:
		ty.IsCandidateReplaced = true
		err = decoder.Decode(&ty.AsCandidateReplacedOld0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCandidateReplacedNew1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCandidateReplacedDeposit2)
		if err != nil {
			return err
		}
		return
	case 9:
		ty.IsInvalidInvulnerableSkipped = true
		err = decoder.Decode(&ty.AsInvalidInvulnerableSkippedAccountId0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *PalletCollatorSelectionPalletEvent) Variant() (uint8, error) {
	if ty.IsNewInvulnerables {
		return 0, nil
	}
	if ty.IsInvulnerableAdded {
		return 1, nil
	}
	if ty.IsInvulnerableRemoved {
		return 2, nil
	}
	if ty.IsNewDesiredCandidates {
		return 3, nil
	}
	if ty.IsNewCandidacyBond {
		return 4, nil
	}
	if ty.IsCandidateAdded {
		return 5, nil
	}
	if ty.IsCandidateBondUpdated {
		return 6, nil
	}
	if ty.IsCandidateRemoved {
		return 7, nil
	}
	if ty.IsCandidateReplaced {
		return 8, nil
	}
	if ty.IsInvalidInvulnerableSkipped {
		return 9, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty PalletCollatorSelectionPalletEvent) MarshalJSON() ([]byte, error) {
	if ty.IsNewInvulnerables {
		m := map[string]interface{}{"PalletCollatorSelectionPalletEvent::NewInvulnerables": ty.AsNewInvulnerablesInvulnerables0}
		return json.Marshal(m)
	}
	if ty.IsInvulnerableAdded {
		m := map[string]interface{}{"PalletCollatorSelectionPalletEvent::InvulnerableAdded": ty.AsInvulnerableAddedAccountId0}
		return json.Marshal(m)
	}
	if ty.IsInvulnerableRemoved {
		m := map[string]interface{}{"PalletCollatorSelectionPalletEvent::InvulnerableRemoved": ty.AsInvulnerableRemovedAccountId0}
		return json.Marshal(m)
	}
	if ty.IsNewDesiredCandidates {
		m := map[string]interface{}{"PalletCollatorSelectionPalletEvent::NewDesiredCandidates": ty.AsNewDesiredCandidatesDesiredCandidates0}
		return json.Marshal(m)
	}
	if ty.IsNewCandidacyBond {
		m := map[string]interface{}{"PalletCollatorSelectionPalletEvent::NewCandidacyBond": ty.AsNewCandidacyBondBondAmount0}
		return json.Marshal(m)
	}
	if ty.IsCandidateAdded {
		m := map[string]interface{}{"PalletCollatorSelectionPalletEvent::CandidateAdded": map[string]interface{}{
			"AsCandidateAddedAccountId0": ty.AsCandidateAddedAccountId0,
			"AsCandidateAddedDeposit1":   ty.AsCandidateAddedDeposit1,
		}}
		return json.Marshal(m)
	}
	if ty.IsCandidateBondUpdated {
		m := map[string]interface{}{"PalletCollatorSelectionPalletEvent::CandidateBondUpdated": map[string]interface{}{
			"AsCandidateBondUpdatedAccountId0": ty.AsCandidateBondUpdatedAccountId0,
			"AsCandidateBondUpdatedDeposit1":   ty.AsCandidateBondUpdatedDeposit1,
		}}
		return json.Marshal(m)
	}
	if ty.IsCandidateRemoved {
		m := map[string]interface{}{"PalletCollatorSelectionPalletEvent::CandidateRemoved": ty.AsCandidateRemovedAccountId0}
		return json.Marshal(m)
	}
	if ty.IsCandidateReplaced {
		m := map[string]interface{}{"PalletCollatorSelectionPalletEvent::CandidateReplaced": map[string]interface{}{
			"AsCandidateReplacedDeposit2": ty.AsCandidateReplacedDeposit2,
			"AsCandidateReplacedNew1":     ty.AsCandidateReplacedNew1,
			"AsCandidateReplacedOld0":     ty.AsCandidateReplacedOld0,
		}}
		return json.Marshal(m)
	}
	if ty.IsInvalidInvulnerableSkipped {
		m := map[string]interface{}{"PalletCollatorSelectionPalletEvent::InvalidInvulnerableSkipped": ty.AsInvalidInvulnerableSkippedAccountId0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated PalletSessionPalletEvent with id=42
type PalletSessionPalletEvent struct {
	IsNewSession              bool
	AsNewSessionSessionIndex0 uint32
}

func (ty PalletSessionPalletEvent) Encode(encoder scale.Encoder) (err error) {
	if ty.IsNewSession {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNewSessionSessionIndex0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *PalletSessionPalletEvent) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsNewSession = true
		err = decoder.Decode(&ty.AsNewSessionSessionIndex0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *PalletSessionPalletEvent) Variant() (uint8, error) {
	if ty.IsNewSession {
		return 0, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty PalletSessionPalletEvent) MarshalJSON() ([]byte, error) {
	if ty.IsNewSession {
		m := map[string]interface{}{"PalletSessionPalletEvent::NewSession": ty.AsNewSessionSessionIndex0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated CumulusPalletXcmpQueuePalletEvent with id=43
type CumulusPalletXcmpQueuePalletEvent struct {
	IsXcmpMessageSent             bool
	AsXcmpMessageSentMessageHash0 [32]byte
}

func (ty CumulusPalletXcmpQueuePalletEvent) Encode(encoder scale.Encoder) (err error) {
	if ty.IsXcmpMessageSent {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsXcmpMessageSentMessageHash0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *CumulusPalletXcmpQueuePalletEvent) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsXcmpMessageSent = true
		err = decoder.Decode(&ty.AsXcmpMessageSentMessageHash0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *CumulusPalletXcmpQueuePalletEvent) Variant() (uint8, error) {
	if ty.IsXcmpMessageSent {
		return 0, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty CumulusPalletXcmpQueuePalletEvent) MarshalJSON() ([]byte, error) {
	if ty.IsXcmpMessageSent {
		m := map[string]interface{}{"CumulusPalletXcmpQueuePalletEvent::XcmpMessageSent": ty.AsXcmpMessageSentMessageHash0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated XcmV3TraitsError with id=46
type XcmV3TraitsError struct {
	IsOverflow                  bool
	IsUnimplemented             bool
	IsUntrustedReserveLocation  bool
	IsUntrustedTeleportLocation bool
	IsLocationFull              bool
	IsLocationNotInvertible     bool
	IsBadOrigin                 bool
	IsInvalidLocation           bool
	IsAssetNotFound             bool
	IsFailedToTransactAsset     bool
	IsNotWithdrawable           bool
	IsLocationCannotHold        bool
	IsExceedsMaxMessageSize     bool
	IsDestinationUnsupported    bool
	IsTransport                 bool
	IsUnroutable                bool
	IsUnknownClaim              bool
	IsFailedToDecode            bool
	IsMaxWeightInvalid          bool
	IsNotHoldingFees            bool
	IsTooExpensive              bool
	IsTrap                      bool
	AsTrapField0                uint64
	IsExpectationFalse          bool
	IsPalletNotFound            bool
	IsNameMismatch              bool
	IsVersionIncompatible       bool
	IsHoldingWouldOverflow      bool
	IsExportError               bool
	IsReanchorFailed            bool
	IsNoDeal                    bool
	IsFeesNotMet                bool
	IsLockError                 bool
	IsNoPermission              bool
	IsUnanchored                bool
	IsNotDepositable            bool
	IsUnhandledXcmVersion       bool
	IsWeightLimitReached        bool
	AsWeightLimitReachedField0  Weight
	IsBarrier                   bool
	IsWeightNotComputable       bool
	IsExceedsStackLimit         bool
}

func (ty XcmV3TraitsError) Encode(encoder scale.Encoder) (err error) {
	if ty.IsOverflow {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnimplemented {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUntrustedReserveLocation {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUntrustedTeleportLocation {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsLocationFull {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsLocationNotInvertible {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBadOrigin {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsInvalidLocation {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAssetNotFound {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsFailedToTransactAsset {
		err = encoder.PushByte(9)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNotWithdrawable {
		err = encoder.PushByte(10)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsLocationCannotHold {
		err = encoder.PushByte(11)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExceedsMaxMessageSize {
		err = encoder.PushByte(12)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDestinationUnsupported {
		err = encoder.PushByte(13)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTransport {
		err = encoder.PushByte(14)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnroutable {
		err = encoder.PushByte(15)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnknownClaim {
		err = encoder.PushByte(16)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsFailedToDecode {
		err = encoder.PushByte(17)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsMaxWeightInvalid {
		err = encoder.PushByte(18)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNotHoldingFees {
		err = encoder.PushByte(19)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTooExpensive {
		err = encoder.PushByte(20)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTrap {
		err = encoder.PushByte(21)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTrapField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExpectationFalse {
		err = encoder.PushByte(22)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsPalletNotFound {
		err = encoder.PushByte(23)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNameMismatch {
		err = encoder.PushByte(24)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsVersionIncompatible {
		err = encoder.PushByte(25)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsHoldingWouldOverflow {
		err = encoder.PushByte(26)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExportError {
		err = encoder.PushByte(27)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReanchorFailed {
		err = encoder.PushByte(28)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNoDeal {
		err = encoder.PushByte(29)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsFeesNotMet {
		err = encoder.PushByte(30)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsLockError {
		err = encoder.PushByte(31)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNoPermission {
		err = encoder.PushByte(32)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnanchored {
		err = encoder.PushByte(33)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNotDepositable {
		err = encoder.PushByte(34)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnhandledXcmVersion {
		err = encoder.PushByte(35)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWeightLimitReached {
		err = encoder.PushByte(36)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWeightLimitReachedField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBarrier {
		err = encoder.PushByte(37)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWeightNotComputable {
		err = encoder.PushByte(38)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExceedsStackLimit {
		err = encoder.PushByte(39)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *XcmV3TraitsError) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsOverflow = true
		return
	case 1:
		ty.IsUnimplemented = true
		return
	case 2:
		ty.IsUntrustedReserveLocation = true
		return
	case 3:
		ty.IsUntrustedTeleportLocation = true
		return
	case 4:
		ty.IsLocationFull = true
		return
	case 5:
		ty.IsLocationNotInvertible = true
		return
	case 6:
		ty.IsBadOrigin = true
		return
	case 7:
		ty.IsInvalidLocation = true
		return
	case 8:
		ty.IsAssetNotFound = true
		return
	case 9:
		ty.IsFailedToTransactAsset = true
		return
	case 10:
		ty.IsNotWithdrawable = true
		return
	case 11:
		ty.IsLocationCannotHold = true
		return
	case 12:
		ty.IsExceedsMaxMessageSize = true
		return
	case 13:
		ty.IsDestinationUnsupported = true
		return
	case 14:
		ty.IsTransport = true
		return
	case 15:
		ty.IsUnroutable = true
		return
	case 16:
		ty.IsUnknownClaim = true
		return
	case 17:
		ty.IsFailedToDecode = true
		return
	case 18:
		ty.IsMaxWeightInvalid = true
		return
	case 19:
		ty.IsNotHoldingFees = true
		return
	case 20:
		ty.IsTooExpensive = true
		return
	case 21:
		ty.IsTrap = true
		err = decoder.Decode(&ty.AsTrapField0)
		if err != nil {
			return err
		}
		return
	case 22:
		ty.IsExpectationFalse = true
		return
	case 23:
		ty.IsPalletNotFound = true
		return
	case 24:
		ty.IsNameMismatch = true
		return
	case 25:
		ty.IsVersionIncompatible = true
		return
	case 26:
		ty.IsHoldingWouldOverflow = true
		return
	case 27:
		ty.IsExportError = true
		return
	case 28:
		ty.IsReanchorFailed = true
		return
	case 29:
		ty.IsNoDeal = true
		return
	case 30:
		ty.IsFeesNotMet = true
		return
	case 31:
		ty.IsLockError = true
		return
	case 32:
		ty.IsNoPermission = true
		return
	case 33:
		ty.IsUnanchored = true
		return
	case 34:
		ty.IsNotDepositable = true
		return
	case 35:
		ty.IsUnhandledXcmVersion = true
		return
	case 36:
		ty.IsWeightLimitReached = true
		err = decoder.Decode(&ty.AsWeightLimitReachedField0)
		if err != nil {
			return err
		}
		return
	case 37:
		ty.IsBarrier = true
		return
	case 38:
		ty.IsWeightNotComputable = true
		return
	case 39:
		ty.IsExceedsStackLimit = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *XcmV3TraitsError) Variant() (uint8, error) {
	if ty.IsOverflow {
		return 0, nil
	}
	if ty.IsUnimplemented {
		return 1, nil
	}
	if ty.IsUntrustedReserveLocation {
		return 2, nil
	}
	if ty.IsUntrustedTeleportLocation {
		return 3, nil
	}
	if ty.IsLocationFull {
		return 4, nil
	}
	if ty.IsLocationNotInvertible {
		return 5, nil
	}
	if ty.IsBadOrigin {
		return 6, nil
	}
	if ty.IsInvalidLocation {
		return 7, nil
	}
	if ty.IsAssetNotFound {
		return 8, nil
	}
	if ty.IsFailedToTransactAsset {
		return 9, nil
	}
	if ty.IsNotWithdrawable {
		return 10, nil
	}
	if ty.IsLocationCannotHold {
		return 11, nil
	}
	if ty.IsExceedsMaxMessageSize {
		return 12, nil
	}
	if ty.IsDestinationUnsupported {
		return 13, nil
	}
	if ty.IsTransport {
		return 14, nil
	}
	if ty.IsUnroutable {
		return 15, nil
	}
	if ty.IsUnknownClaim {
		return 16, nil
	}
	if ty.IsFailedToDecode {
		return 17, nil
	}
	if ty.IsMaxWeightInvalid {
		return 18, nil
	}
	if ty.IsNotHoldingFees {
		return 19, nil
	}
	if ty.IsTooExpensive {
		return 20, nil
	}
	if ty.IsTrap {
		return 21, nil
	}
	if ty.IsExpectationFalse {
		return 22, nil
	}
	if ty.IsPalletNotFound {
		return 23, nil
	}
	if ty.IsNameMismatch {
		return 24, nil
	}
	if ty.IsVersionIncompatible {
		return 25, nil
	}
	if ty.IsHoldingWouldOverflow {
		return 26, nil
	}
	if ty.IsExportError {
		return 27, nil
	}
	if ty.IsReanchorFailed {
		return 28, nil
	}
	if ty.IsNoDeal {
		return 29, nil
	}
	if ty.IsFeesNotMet {
		return 30, nil
	}
	if ty.IsLockError {
		return 31, nil
	}
	if ty.IsNoPermission {
		return 32, nil
	}
	if ty.IsUnanchored {
		return 33, nil
	}
	if ty.IsNotDepositable {
		return 34, nil
	}
	if ty.IsUnhandledXcmVersion {
		return 35, nil
	}
	if ty.IsWeightLimitReached {
		return 36, nil
	}
	if ty.IsBarrier {
		return 37, nil
	}
	if ty.IsWeightNotComputable {
		return 38, nil
	}
	if ty.IsExceedsStackLimit {
		return 39, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty XcmV3TraitsError) MarshalJSON() ([]byte, error) {
	if ty.IsOverflow {
		return json.Marshal("XcmV3TraitsError::Overflow")
	}
	if ty.IsUnimplemented {
		return json.Marshal("XcmV3TraitsError::Unimplemented")
	}
	if ty.IsUntrustedReserveLocation {
		return json.Marshal("XcmV3TraitsError::UntrustedReserveLocation")
	}
	if ty.IsUntrustedTeleportLocation {
		return json.Marshal("XcmV3TraitsError::UntrustedTeleportLocation")
	}
	if ty.IsLocationFull {
		return json.Marshal("XcmV3TraitsError::LocationFull")
	}
	if ty.IsLocationNotInvertible {
		return json.Marshal("XcmV3TraitsError::LocationNotInvertible")
	}
	if ty.IsBadOrigin {
		return json.Marshal("XcmV3TraitsError::BadOrigin")
	}
	if ty.IsInvalidLocation {
		return json.Marshal("XcmV3TraitsError::InvalidLocation")
	}
	if ty.IsAssetNotFound {
		return json.Marshal("XcmV3TraitsError::AssetNotFound")
	}
	if ty.IsFailedToTransactAsset {
		return json.Marshal("XcmV3TraitsError::FailedToTransactAsset")
	}
	if ty.IsNotWithdrawable {
		return json.Marshal("XcmV3TraitsError::NotWithdrawable")
	}
	if ty.IsLocationCannotHold {
		return json.Marshal("XcmV3TraitsError::LocationCannotHold")
	}
	if ty.IsExceedsMaxMessageSize {
		return json.Marshal("XcmV3TraitsError::ExceedsMaxMessageSize")
	}
	if ty.IsDestinationUnsupported {
		return json.Marshal("XcmV3TraitsError::DestinationUnsupported")
	}
	if ty.IsTransport {
		return json.Marshal("XcmV3TraitsError::Transport")
	}
	if ty.IsUnroutable {
		return json.Marshal("XcmV3TraitsError::Unroutable")
	}
	if ty.IsUnknownClaim {
		return json.Marshal("XcmV3TraitsError::UnknownClaim")
	}
	if ty.IsFailedToDecode {
		return json.Marshal("XcmV3TraitsError::FailedToDecode")
	}
	if ty.IsMaxWeightInvalid {
		return json.Marshal("XcmV3TraitsError::MaxWeightInvalid")
	}
	if ty.IsNotHoldingFees {
		return json.Marshal("XcmV3TraitsError::NotHoldingFees")
	}
	if ty.IsTooExpensive {
		return json.Marshal("XcmV3TraitsError::TooExpensive")
	}
	if ty.IsTrap {
		m := map[string]interface{}{"XcmV3TraitsError::Trap": ty.AsTrapField0}
		return json.Marshal(m)
	}
	if ty.IsExpectationFalse {
		return json.Marshal("XcmV3TraitsError::ExpectationFalse")
	}
	if ty.IsPalletNotFound {
		return json.Marshal("XcmV3TraitsError::PalletNotFound")
	}
	if ty.IsNameMismatch {
		return json.Marshal("XcmV3TraitsError::NameMismatch")
	}
	if ty.IsVersionIncompatible {
		return json.Marshal("XcmV3TraitsError::VersionIncompatible")
	}
	if ty.IsHoldingWouldOverflow {
		return json.Marshal("XcmV3TraitsError::HoldingWouldOverflow")
	}
	if ty.IsExportError {
		return json.Marshal("XcmV3TraitsError::ExportError")
	}
	if ty.IsReanchorFailed {
		return json.Marshal("XcmV3TraitsError::ReanchorFailed")
	}
	if ty.IsNoDeal {
		return json.Marshal("XcmV3TraitsError::NoDeal")
	}
	if ty.IsFeesNotMet {
		return json.Marshal("XcmV3TraitsError::FeesNotMet")
	}
	if ty.IsLockError {
		return json.Marshal("XcmV3TraitsError::LockError")
	}
	if ty.IsNoPermission {
		return json.Marshal("XcmV3TraitsError::NoPermission")
	}
	if ty.IsUnanchored {
		return json.Marshal("XcmV3TraitsError::Unanchored")
	}
	if ty.IsNotDepositable {
		return json.Marshal("XcmV3TraitsError::NotDepositable")
	}
	if ty.IsUnhandledXcmVersion {
		return json.Marshal("XcmV3TraitsError::UnhandledXcmVersion")
	}
	if ty.IsWeightLimitReached {
		m := map[string]interface{}{"XcmV3TraitsError::WeightLimitReached": ty.AsWeightLimitReachedField0}
		return json.Marshal(m)
	}
	if ty.IsBarrier {
		return json.Marshal("XcmV3TraitsError::Barrier")
	}
	if ty.IsWeightNotComputable {
		return json.Marshal("XcmV3TraitsError::WeightNotComputable")
	}
	if ty.IsExceedsStackLimit {
		return json.Marshal("XcmV3TraitsError::ExceedsStackLimit")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated StagingXcmV4TraitsOutcome with id=45
type Outcome struct {
	IsComplete         bool
	AsCompleteUsed0    Weight
	IsIncomplete       bool
	AsIncompleteUsed0  Weight
	AsIncompleteError1 XcmV3TraitsError
	IsError            bool
	AsErrorError0      *XcmV3TraitsError
}

func (ty Outcome) Encode(encoder scale.Encoder) (err error) {
	if ty.IsComplete {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCompleteUsed0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsIncomplete {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsIncompleteUsed0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsIncompleteError1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsError {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsErrorError0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Outcome) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsComplete = true
		err = decoder.Decode(&ty.AsCompleteUsed0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsIncomplete = true
		err = decoder.Decode(&ty.AsIncompleteUsed0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsIncompleteError1)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsError = true
		var tmp XcmV3TraitsError
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsErrorError0 = &tmp
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Outcome) Variant() (uint8, error) {
	if ty.IsComplete {
		return 0, nil
	}
	if ty.IsIncomplete {
		return 1, nil
	}
	if ty.IsError {
		return 2, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Outcome) MarshalJSON() ([]byte, error) {
	if ty.IsComplete {
		m := map[string]interface{}{"Outcome::Complete": ty.AsCompleteUsed0}
		return json.Marshal(m)
	}
	if ty.IsIncomplete {
		m := map[string]interface{}{"Outcome::Incomplete": map[string]interface{}{
			"AsIncompleteError1": ty.AsIncompleteError1,
			"AsIncompleteUsed0":  ty.AsIncompleteUsed0,
		}}
		return json.Marshal(m)
	}
	if ty.IsError {
		m := map[string]interface{}{"Outcome::Error": ty.AsErrorError0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated StagingXcmV4JunctionNetworkId with id=53
type NetworkId struct {
	IsByGenesis          bool
	AsByGenesisField0    [32]byte
	IsByFork             bool
	AsByForkBlockNumber0 uint64
	AsByForkBlockHash1   [32]byte
	IsPolkadot           bool
	IsKusama             bool
	IsWestend            bool
	IsRococo             bool
	IsWococo             bool
	IsEthereum           bool
	AsEthereumChainId0   types.UCompact
	IsBitcoinCore        bool
	IsBitcoinCash        bool
	IsPolkadotBulletin   bool
}

func (ty NetworkId) Encode(encoder scale.Encoder) (err error) {
	if ty.IsByGenesis {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsByGenesisField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsByFork {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsByForkBlockNumber0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsByForkBlockHash1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsPolkadot {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsKusama {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWestend {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsRococo {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWococo {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsEthereum {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsEthereumChainId0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBitcoinCore {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBitcoinCash {
		err = encoder.PushByte(9)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsPolkadotBulletin {
		err = encoder.PushByte(10)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *NetworkId) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsByGenesis = true
		err = decoder.Decode(&ty.AsByGenesisField0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsByFork = true
		err = decoder.Decode(&ty.AsByForkBlockNumber0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsByForkBlockHash1)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsPolkadot = true
		return
	case 3:
		ty.IsKusama = true
		return
	case 4:
		ty.IsWestend = true
		return
	case 5:
		ty.IsRococo = true
		return
	case 6:
		ty.IsWococo = true
		return
	case 7:
		ty.IsEthereum = true
		err = decoder.Decode(&ty.AsEthereumChainId0)
		if err != nil {
			return err
		}
		return
	case 8:
		ty.IsBitcoinCore = true
		return
	case 9:
		ty.IsBitcoinCash = true
		return
	case 10:
		ty.IsPolkadotBulletin = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *NetworkId) Variant() (uint8, error) {
	if ty.IsByGenesis {
		return 0, nil
	}
	if ty.IsByFork {
		return 1, nil
	}
	if ty.IsPolkadot {
		return 2, nil
	}
	if ty.IsKusama {
		return 3, nil
	}
	if ty.IsWestend {
		return 4, nil
	}
	if ty.IsRococo {
		return 5, nil
	}
	if ty.IsWococo {
		return 6, nil
	}
	if ty.IsEthereum {
		return 7, nil
	}
	if ty.IsBitcoinCore {
		return 8, nil
	}
	if ty.IsBitcoinCash {
		return 9, nil
	}
	if ty.IsPolkadotBulletin {
		return 10, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty NetworkId) MarshalJSON() ([]byte, error) {
	if ty.IsByGenesis {
		m := map[string]interface{}{"NetworkId::ByGenesis": ty.AsByGenesisField0}
		return json.Marshal(m)
	}
	if ty.IsByFork {
		m := map[string]interface{}{"NetworkId::ByFork": map[string]interface{}{
			"AsByForkBlockHash1":   ty.AsByForkBlockHash1,
			"AsByForkBlockNumber0": ty.AsByForkBlockNumber0,
		}}
		return json.Marshal(m)
	}
	if ty.IsPolkadot {
		return json.Marshal("NetworkId::Polkadot")
	}
	if ty.IsKusama {
		return json.Marshal("NetworkId::Kusama")
	}
	if ty.IsWestend {
		return json.Marshal("NetworkId::Westend")
	}
	if ty.IsRococo {
		return json.Marshal("NetworkId::Rococo")
	}
	if ty.IsWococo {
		return json.Marshal("NetworkId::Wococo")
	}
	if ty.IsEthereum {
		m := map[string]interface{}{"NetworkId::Ethereum": ty.AsEthereumChainId0}
		return json.Marshal(m)
	}
	if ty.IsBitcoinCore {
		return json.Marshal("NetworkId::BitcoinCore")
	}
	if ty.IsBitcoinCash {
		return json.Marshal("NetworkId::BitcoinCash")
	}
	if ty.IsPolkadotBulletin {
		return json.Marshal("NetworkId::PolkadotBulletin")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated Option with id=52
type OptionTNetworkId struct {
	IsNone       bool
	IsSome       bool
	AsSomeField0 *NetworkId
}

func (ty OptionTNetworkId) Encode(encoder scale.Encoder) (err error) {
	if ty.IsNone {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSome {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSomeField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *OptionTNetworkId) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsNone = true
		return
	case 1:
		ty.IsSome = true
		var tmp NetworkId
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsSomeField0 = &tmp
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *OptionTNetworkId) Variant() (uint8, error) {
	if ty.IsNone {
		return 0, nil
	}
	if ty.IsSome {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty OptionTNetworkId) MarshalJSON() ([]byte, error) {
	if ty.IsNone {
		return json.Marshal("OptionTNetworkId::None")
	}
	if ty.IsSome {
		m := map[string]interface{}{"OptionTNetworkId::Some": ty.AsSomeField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated XcmV3JunctionBodyId with id=56
type BodyId struct {
	IsUnit           bool
	IsMoniker        bool
	AsMonikerField0  [4]byte
	IsIndex          bool
	AsIndexField0    types.UCompact
	IsExecutive      bool
	IsTechnical      bool
	IsLegislative    bool
	IsJudicial       bool
	IsDefense        bool
	IsAdministration bool
	IsTreasury       bool
}

func (ty BodyId) Encode(encoder scale.Encoder) (err error) {
	if ty.IsUnit {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsMoniker {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsMonikerField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsIndex {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsIndexField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExecutive {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTechnical {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsLegislative {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsJudicial {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDefense {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAdministration {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTreasury {
		err = encoder.PushByte(9)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *BodyId) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsUnit = true
		return
	case 1:
		ty.IsMoniker = true
		err = decoder.Decode(&ty.AsMonikerField0)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsIndex = true
		err = decoder.Decode(&ty.AsIndexField0)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsExecutive = true
		return
	case 4:
		ty.IsTechnical = true
		return
	case 5:
		ty.IsLegislative = true
		return
	case 6:
		ty.IsJudicial = true
		return
	case 7:
		ty.IsDefense = true
		return
	case 8:
		ty.IsAdministration = true
		return
	case 9:
		ty.IsTreasury = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *BodyId) Variant() (uint8, error) {
	if ty.IsUnit {
		return 0, nil
	}
	if ty.IsMoniker {
		return 1, nil
	}
	if ty.IsIndex {
		return 2, nil
	}
	if ty.IsExecutive {
		return 3, nil
	}
	if ty.IsTechnical {
		return 4, nil
	}
	if ty.IsLegislative {
		return 5, nil
	}
	if ty.IsJudicial {
		return 6, nil
	}
	if ty.IsDefense {
		return 7, nil
	}
	if ty.IsAdministration {
		return 8, nil
	}
	if ty.IsTreasury {
		return 9, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty BodyId) MarshalJSON() ([]byte, error) {
	if ty.IsUnit {
		return json.Marshal("BodyId::Unit")
	}
	if ty.IsMoniker {
		m := map[string]interface{}{"BodyId::Moniker": ty.AsMonikerField0}
		return json.Marshal(m)
	}
	if ty.IsIndex {
		m := map[string]interface{}{"BodyId::Index": ty.AsIndexField0}
		return json.Marshal(m)
	}
	if ty.IsExecutive {
		return json.Marshal("BodyId::Executive")
	}
	if ty.IsTechnical {
		return json.Marshal("BodyId::Technical")
	}
	if ty.IsLegislative {
		return json.Marshal("BodyId::Legislative")
	}
	if ty.IsJudicial {
		return json.Marshal("BodyId::Judicial")
	}
	if ty.IsDefense {
		return json.Marshal("BodyId::Defense")
	}
	if ty.IsAdministration {
		return json.Marshal("BodyId::Administration")
	}
	if ty.IsTreasury {
		return json.Marshal("BodyId::Treasury")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated XcmV3JunctionBodyPart with id=57
type BodyPart struct {
	IsVoice                    bool
	IsMembers                  bool
	AsMembersCount0            types.UCompact
	IsFraction                 bool
	AsFractionNom0             types.UCompact
	AsFractionDenom1           types.UCompact
	IsAtLeastProportion        bool
	AsAtLeastProportionNom0    types.UCompact
	AsAtLeastProportionDenom1  types.UCompact
	IsMoreThanProportion       bool
	AsMoreThanProportionNom0   types.UCompact
	AsMoreThanProportionDenom1 types.UCompact
}

func (ty BodyPart) Encode(encoder scale.Encoder) (err error) {
	if ty.IsVoice {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsMembers {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsMembersCount0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsFraction {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsFractionNom0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsFractionDenom1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAtLeastProportion {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAtLeastProportionNom0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAtLeastProportionDenom1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsMoreThanProportion {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsMoreThanProportionNom0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsMoreThanProportionDenom1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *BodyPart) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsVoice = true
		return
	case 1:
		ty.IsMembers = true
		err = decoder.Decode(&ty.AsMembersCount0)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsFraction = true
		err = decoder.Decode(&ty.AsFractionNom0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsFractionDenom1)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsAtLeastProportion = true
		err = decoder.Decode(&ty.AsAtLeastProportionNom0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsAtLeastProportionDenom1)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsMoreThanProportion = true
		err = decoder.Decode(&ty.AsMoreThanProportionNom0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsMoreThanProportionDenom1)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *BodyPart) Variant() (uint8, error) {
	if ty.IsVoice {
		return 0, nil
	}
	if ty.IsMembers {
		return 1, nil
	}
	if ty.IsFraction {
		return 2, nil
	}
	if ty.IsAtLeastProportion {
		return 3, nil
	}
	if ty.IsMoreThanProportion {
		return 4, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty BodyPart) MarshalJSON() ([]byte, error) {
	if ty.IsVoice {
		return json.Marshal("BodyPart::Voice")
	}
	if ty.IsMembers {
		m := map[string]interface{}{"BodyPart::Members": ty.AsMembersCount0}
		return json.Marshal(m)
	}
	if ty.IsFraction {
		m := map[string]interface{}{"BodyPart::Fraction": map[string]interface{}{
			"AsFractionDenom1": ty.AsFractionDenom1,
			"AsFractionNom0":   ty.AsFractionNom0,
		}}
		return json.Marshal(m)
	}
	if ty.IsAtLeastProportion {
		m := map[string]interface{}{"BodyPart::AtLeastProportion": map[string]interface{}{
			"AsAtLeastProportionDenom1": ty.AsAtLeastProportionDenom1,
			"AsAtLeastProportionNom0":   ty.AsAtLeastProportionNom0,
		}}
		return json.Marshal(m)
	}
	if ty.IsMoreThanProportion {
		m := map[string]interface{}{"BodyPart::MoreThanProportion": map[string]interface{}{
			"AsMoreThanProportionDenom1": ty.AsMoreThanProportionDenom1,
			"AsMoreThanProportionNom0":   ty.AsMoreThanProportionNom0,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated StagingXcmV4JunctionJunction with id=50
type Junction struct {
	IsParachain              bool
	AsParachainField0        types.UCompact
	IsAccountId32            bool
	AsAccountId32Network0    OptionTNetworkId
	AsAccountId32Id1         [32]byte
	IsAccountIndex64         bool
	AsAccountIndex64Network0 OptionTNetworkId
	AsAccountIndex64Index1   types.UCompact
	IsAccountKey20           bool
	AsAccountKey20Network0   OptionTNetworkId
	AsAccountKey20Key1       [20]byte
	IsPalletInstance         bool
	AsPalletInstanceField0   byte
	IsGeneralIndex           bool
	AsGeneralIndexField0     types.UCompact
	IsGeneralKey             bool
	AsGeneralKeyLength0      byte
	AsGeneralKeyData1        [32]byte
	IsOnlyChild              bool
	IsPlurality              bool
	AsPluralityId0           BodyId
	AsPluralityPart1         BodyPart
	IsGlobalConsensus        bool
	AsGlobalConsensusField0  *NetworkId
}

func (ty Junction) Encode(encoder scale.Encoder) (err error) {
	if ty.IsParachain {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsParachainField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAccountId32 {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAccountId32Network0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAccountId32Id1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAccountIndex64 {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAccountIndex64Network0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAccountIndex64Index1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAccountKey20 {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAccountKey20Network0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAccountKey20Key1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsPalletInstance {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPalletInstanceField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsGeneralIndex {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsGeneralIndexField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsGeneralKey {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsGeneralKeyLength0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsGeneralKeyData1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsOnlyChild {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsPlurality {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPluralityId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPluralityPart1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsGlobalConsensus {
		err = encoder.PushByte(9)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsGlobalConsensusField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Junction) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsParachain = true
		err = decoder.Decode(&ty.AsParachainField0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsAccountId32 = true
		err = decoder.Decode(&ty.AsAccountId32Network0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsAccountId32Id1)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsAccountIndex64 = true
		err = decoder.Decode(&ty.AsAccountIndex64Network0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsAccountIndex64Index1)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsAccountKey20 = true
		err = decoder.Decode(&ty.AsAccountKey20Network0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsAccountKey20Key1)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsPalletInstance = true
		err = decoder.Decode(&ty.AsPalletInstanceField0)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsGeneralIndex = true
		err = decoder.Decode(&ty.AsGeneralIndexField0)
		if err != nil {
			return err
		}
		return
	case 6:
		ty.IsGeneralKey = true
		err = decoder.Decode(&ty.AsGeneralKeyLength0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsGeneralKeyData1)
		if err != nil {
			return err
		}
		return
	case 7:
		ty.IsOnlyChild = true
		return
	case 8:
		ty.IsPlurality = true
		err = decoder.Decode(&ty.AsPluralityId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsPluralityPart1)
		if err != nil {
			return err
		}
		return
	case 9:
		ty.IsGlobalConsensus = true
		var tmp NetworkId
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsGlobalConsensusField0 = &tmp
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Junction) Variant() (uint8, error) {
	if ty.IsParachain {
		return 0, nil
	}
	if ty.IsAccountId32 {
		return 1, nil
	}
	if ty.IsAccountIndex64 {
		return 2, nil
	}
	if ty.IsAccountKey20 {
		return 3, nil
	}
	if ty.IsPalletInstance {
		return 4, nil
	}
	if ty.IsGeneralIndex {
		return 5, nil
	}
	if ty.IsGeneralKey {
		return 6, nil
	}
	if ty.IsOnlyChild {
		return 7, nil
	}
	if ty.IsPlurality {
		return 8, nil
	}
	if ty.IsGlobalConsensus {
		return 9, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Junction) MarshalJSON() ([]byte, error) {
	if ty.IsParachain {
		m := map[string]interface{}{"Junction::Parachain": ty.AsParachainField0}
		return json.Marshal(m)
	}
	if ty.IsAccountId32 {
		m := map[string]interface{}{"Junction::AccountId32": map[string]interface{}{
			"AsAccountId32Id1":      ty.AsAccountId32Id1,
			"AsAccountId32Network0": ty.AsAccountId32Network0,
		}}
		return json.Marshal(m)
	}
	if ty.IsAccountIndex64 {
		m := map[string]interface{}{"Junction::AccountIndex64": map[string]interface{}{
			"AsAccountIndex64Index1":   ty.AsAccountIndex64Index1,
			"AsAccountIndex64Network0": ty.AsAccountIndex64Network0,
		}}
		return json.Marshal(m)
	}
	if ty.IsAccountKey20 {
		m := map[string]interface{}{"Junction::AccountKey20": map[string]interface{}{
			"AsAccountKey20Key1":     ty.AsAccountKey20Key1,
			"AsAccountKey20Network0": ty.AsAccountKey20Network0,
		}}
		return json.Marshal(m)
	}
	if ty.IsPalletInstance {
		m := map[string]interface{}{"Junction::PalletInstance": ty.AsPalletInstanceField0}
		return json.Marshal(m)
	}
	if ty.IsGeneralIndex {
		m := map[string]interface{}{"Junction::GeneralIndex": ty.AsGeneralIndexField0}
		return json.Marshal(m)
	}
	if ty.IsGeneralKey {
		m := map[string]interface{}{"Junction::GeneralKey": map[string]interface{}{
			"AsGeneralKeyData1":   ty.AsGeneralKeyData1,
			"AsGeneralKeyLength0": ty.AsGeneralKeyLength0,
		}}
		return json.Marshal(m)
	}
	if ty.IsOnlyChild {
		return json.Marshal("Junction::OnlyChild")
	}
	if ty.IsPlurality {
		m := map[string]interface{}{"Junction::Plurality": map[string]interface{}{
			"AsPluralityId0":   ty.AsPluralityId0,
			"AsPluralityPart1": ty.AsPluralityPart1,
		}}
		return json.Marshal(m)
	}
	if ty.IsGlobalConsensus {
		m := map[string]interface{}{"Junction::GlobalConsensus": ty.AsGlobalConsensusField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated StagingXcmV4JunctionsJunctions with id=48
type Junctions struct {
	IsHere     bool
	IsX1       bool
	AsX1Field0 [1]Junction
	IsX2       bool
	AsX2Field0 [2]Junction
	IsX3       bool
	AsX3Field0 [3]Junction
	IsX4       bool
	AsX4Field0 [4]Junction
	IsX5       bool
	AsX5Field0 [5]Junction
	IsX6       bool
	AsX6Field0 [6]Junction
	IsX7       bool
	AsX7Field0 [7]Junction
	IsX8       bool
	AsX8Field0 [8]Junction
}

func (ty Junctions) Encode(encoder scale.Encoder) (err error) {
	if ty.IsHere {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsX1 {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX1Field0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsX2 {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX2Field0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsX3 {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX3Field0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsX4 {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX4Field0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsX5 {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX5Field0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsX6 {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX6Field0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsX7 {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX7Field0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsX8 {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX8Field0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Junctions) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsHere = true
		return
	case 1:
		ty.IsX1 = true
		err = decoder.Decode(&ty.AsX1Field0)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsX2 = true
		err = decoder.Decode(&ty.AsX2Field0)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsX3 = true
		err = decoder.Decode(&ty.AsX3Field0)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsX4 = true
		err = decoder.Decode(&ty.AsX4Field0)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsX5 = true
		err = decoder.Decode(&ty.AsX5Field0)
		if err != nil {
			return err
		}
		return
	case 6:
		ty.IsX6 = true
		err = decoder.Decode(&ty.AsX6Field0)
		if err != nil {
			return err
		}
		return
	case 7:
		ty.IsX7 = true
		err = decoder.Decode(&ty.AsX7Field0)
		if err != nil {
			return err
		}
		return
	case 8:
		ty.IsX8 = true
		err = decoder.Decode(&ty.AsX8Field0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Junctions) Variant() (uint8, error) {
	if ty.IsHere {
		return 0, nil
	}
	if ty.IsX1 {
		return 1, nil
	}
	if ty.IsX2 {
		return 2, nil
	}
	if ty.IsX3 {
		return 3, nil
	}
	if ty.IsX4 {
		return 4, nil
	}
	if ty.IsX5 {
		return 5, nil
	}
	if ty.IsX6 {
		return 6, nil
	}
	if ty.IsX7 {
		return 7, nil
	}
	if ty.IsX8 {
		return 8, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Junctions) MarshalJSON() ([]byte, error) {
	if ty.IsHere {
		return json.Marshal("Junctions::Here")
	}
	if ty.IsX1 {
		m := map[string]interface{}{"Junctions::X1": ty.AsX1Field0}
		return json.Marshal(m)
	}
	if ty.IsX2 {
		m := map[string]interface{}{"Junctions::X2": ty.AsX2Field0}
		return json.Marshal(m)
	}
	if ty.IsX3 {
		m := map[string]interface{}{"Junctions::X3": ty.AsX3Field0}
		return json.Marshal(m)
	}
	if ty.IsX4 {
		m := map[string]interface{}{"Junctions::X4": ty.AsX4Field0}
		return json.Marshal(m)
	}
	if ty.IsX5 {
		m := map[string]interface{}{"Junctions::X5": ty.AsX5Field0}
		return json.Marshal(m)
	}
	if ty.IsX6 {
		m := map[string]interface{}{"Junctions::X6": ty.AsX6Field0}
		return json.Marshal(m)
	}
	if ty.IsX7 {
		m := map[string]interface{}{"Junctions::X7": ty.AsX7Field0}
		return json.Marshal(m)
	}
	if ty.IsX8 {
		m := map[string]interface{}{"Junctions::X8": ty.AsX8Field0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated staging_xcm_v4_location_Location with id={{false [47]}}
type Location struct {
	// Field 0 with TypeId=2
	Parents byte
	// Field 1 with TypeId=48
	Interior Junctions
}

// Generated StagingXcmV4AssetAssetInstance with id=73
type AssetInstance struct {
	IsUndefined     bool
	IsIndex         bool
	AsIndexField0   types.UCompact
	IsArray4        bool
	AsArray4Field0  [4]byte
	IsArray8        bool
	AsArray8Field0  [8]byte
	IsArray16       bool
	AsArray16Field0 [16]byte
	IsArray32       bool
	AsArray32Field0 [32]byte
}

func (ty AssetInstance) Encode(encoder scale.Encoder) (err error) {
	if ty.IsUndefined {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsIndex {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsIndexField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsArray4 {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsArray4Field0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsArray8 {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsArray8Field0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsArray16 {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsArray16Field0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsArray32 {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsArray32Field0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *AssetInstance) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsUndefined = true
		return
	case 1:
		ty.IsIndex = true
		err = decoder.Decode(&ty.AsIndexField0)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsArray4 = true
		err = decoder.Decode(&ty.AsArray4Field0)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsArray8 = true
		err = decoder.Decode(&ty.AsArray8Field0)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsArray16 = true
		err = decoder.Decode(&ty.AsArray16Field0)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsArray32 = true
		err = decoder.Decode(&ty.AsArray32Field0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *AssetInstance) Variant() (uint8, error) {
	if ty.IsUndefined {
		return 0, nil
	}
	if ty.IsIndex {
		return 1, nil
	}
	if ty.IsArray4 {
		return 2, nil
	}
	if ty.IsArray8 {
		return 3, nil
	}
	if ty.IsArray16 {
		return 4, nil
	}
	if ty.IsArray32 {
		return 5, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty AssetInstance) MarshalJSON() ([]byte, error) {
	if ty.IsUndefined {
		return json.Marshal("AssetInstance::Undefined")
	}
	if ty.IsIndex {
		m := map[string]interface{}{"AssetInstance::Index": ty.AsIndexField0}
		return json.Marshal(m)
	}
	if ty.IsArray4 {
		m := map[string]interface{}{"AssetInstance::Array4": ty.AsArray4Field0}
		return json.Marshal(m)
	}
	if ty.IsArray8 {
		m := map[string]interface{}{"AssetInstance::Array8": ty.AsArray8Field0}
		return json.Marshal(m)
	}
	if ty.IsArray16 {
		m := map[string]interface{}{"AssetInstance::Array16": ty.AsArray16Field0}
		return json.Marshal(m)
	}
	if ty.IsArray32 {
		m := map[string]interface{}{"AssetInstance::Array32": ty.AsArray32Field0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated StagingXcmV4AssetFungibility with id=72
type Fungibility struct {
	IsFungible          bool
	AsFungibleField0    types.UCompact
	IsNonFungible       bool
	AsNonFungibleField0 *AssetInstance
}

func (ty Fungibility) Encode(encoder scale.Encoder) (err error) {
	if ty.IsFungible {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsFungibleField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNonFungible {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNonFungibleField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Fungibility) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsFungible = true
		err = decoder.Decode(&ty.AsFungibleField0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsNonFungible = true
		var tmp AssetInstance
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsNonFungibleField0 = &tmp
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Fungibility) Variant() (uint8, error) {
	if ty.IsFungible {
		return 0, nil
	}
	if ty.IsNonFungible {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Fungibility) MarshalJSON() ([]byte, error) {
	if ty.IsFungible {
		m := map[string]interface{}{"Fungibility::Fungible": ty.AsFungibleField0}
		return json.Marshal(m)
	}
	if ty.IsNonFungible {
		m := map[string]interface{}{"Fungibility::NonFungible": ty.AsNonFungibleField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated staging_xcm_v4_asset_Asset with id={{false [70]}}
type Asset struct {
	// Field 0 with TypeId=71
	Id Location
	// Field 1 with TypeId=72
	Fun Fungibility
}

// Tuple type generated from metadata id 78
type TupleOfUint32XcmV3TraitsError struct {
	Elem0 uint32
	Elem1 XcmV3TraitsError
}

// Generated Option with id=77
type OptionTTupleOfUint32XcmV3TraitsError struct {
	IsNone       bool
	IsSome       bool
	AsSomeField0 TupleOfUint32XcmV3TraitsError
}

func (ty OptionTTupleOfUint32XcmV3TraitsError) Encode(encoder scale.Encoder) (err error) {
	if ty.IsNone {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSome {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSomeField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *OptionTTupleOfUint32XcmV3TraitsError) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsNone = true
		return
	case 1:
		ty.IsSome = true
		err = decoder.Decode(&ty.AsSomeField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *OptionTTupleOfUint32XcmV3TraitsError) Variant() (uint8, error) {
	if ty.IsNone {
		return 0, nil
	}
	if ty.IsSome {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty OptionTTupleOfUint32XcmV3TraitsError) MarshalJSON() ([]byte, error) {
	if ty.IsNone {
		return json.Marshal("OptionTTupleOfUint32XcmV3TraitsError::None")
	}
	if ty.IsSome {
		m := map[string]interface{}{"OptionTTupleOfUint32XcmV3TraitsError::Some": ty.AsSomeField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated staging_xcm_v4_PalletInfo with id={{false [80]}}
type PalletInfo struct {
	// Field 0 with TypeId=51
	Index types.UCompact
	// Field 1 with TypeId=81
	Name []byte
	// Field 2 with TypeId=81
	ModuleName []byte
	// Field 3 with TypeId=51
	Major types.UCompact
	// Field 4 with TypeId=51
	Minor types.UCompact
	// Field 5 with TypeId=51
	Patch types.UCompact
}

// Generated XcmV3MaybeErrorCode with id=83
type MaybeErrorCode struct {
	IsSuccess              bool
	IsError                bool
	AsErrorField0          []byte
	IsTruncatedError       bool
	AsTruncatedErrorField0 []byte
}

func (ty MaybeErrorCode) Encode(encoder scale.Encoder) (err error) {
	if ty.IsSuccess {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsError {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsErrorField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTruncatedError {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTruncatedErrorField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *MaybeErrorCode) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsSuccess = true
		return
	case 1:
		ty.IsError = true
		err = decoder.Decode(&ty.AsErrorField0)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsTruncatedError = true
		err = decoder.Decode(&ty.AsTruncatedErrorField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *MaybeErrorCode) Variant() (uint8, error) {
	if ty.IsSuccess {
		return 0, nil
	}
	if ty.IsError {
		return 1, nil
	}
	if ty.IsTruncatedError {
		return 2, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty MaybeErrorCode) MarshalJSON() ([]byte, error) {
	if ty.IsSuccess {
		return json.Marshal("MaybeErrorCode::Success")
	}
	if ty.IsError {
		m := map[string]interface{}{"MaybeErrorCode::Error": ty.AsErrorField0}
		return json.Marshal(m)
	}
	if ty.IsTruncatedError {
		m := map[string]interface{}{"MaybeErrorCode::TruncatedError": ty.AsTruncatedErrorField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated StagingXcmV4Response with id=76
type Response struct {
	IsNull                  bool
	IsAssets                bool
	AsAssetsField0          []Asset
	IsExecutionResult       bool
	AsExecutionResultField0 *OptionTTupleOfUint32XcmV3TraitsError
	IsVersion               bool
	AsVersionField0         uint32
	IsPalletsInfo           bool
	AsPalletsInfoField0     []PalletInfo
	IsDispatchResult        bool
	AsDispatchResultField0  *MaybeErrorCode
}

func (ty Response) Encode(encoder scale.Encoder) (err error) {
	if ty.IsNull {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAssets {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAssetsField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExecutionResult {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExecutionResultField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsVersion {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsVersionField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsPalletsInfo {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPalletsInfoField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDispatchResult {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDispatchResultField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Response) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsNull = true
		return
	case 1:
		ty.IsAssets = true
		err = decoder.Decode(&ty.AsAssetsField0)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsExecutionResult = true
		var tmp OptionTTupleOfUint32XcmV3TraitsError
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsExecutionResultField0 = &tmp
		return
	case 3:
		ty.IsVersion = true
		err = decoder.Decode(&ty.AsVersionField0)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsPalletsInfo = true
		err = decoder.Decode(&ty.AsPalletsInfoField0)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsDispatchResult = true
		var tmp MaybeErrorCode
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsDispatchResultField0 = &tmp
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Response) Variant() (uint8, error) {
	if ty.IsNull {
		return 0, nil
	}
	if ty.IsAssets {
		return 1, nil
	}
	if ty.IsExecutionResult {
		return 2, nil
	}
	if ty.IsVersion {
		return 3, nil
	}
	if ty.IsPalletsInfo {
		return 4, nil
	}
	if ty.IsDispatchResult {
		return 5, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Response) MarshalJSON() ([]byte, error) {
	if ty.IsNull {
		return json.Marshal("Response::Null")
	}
	if ty.IsAssets {
		m := map[string]interface{}{"Response::Assets": ty.AsAssetsField0}
		return json.Marshal(m)
	}
	if ty.IsExecutionResult {
		m := map[string]interface{}{"Response::ExecutionResult": ty.AsExecutionResultField0}
		return json.Marshal(m)
	}
	if ty.IsVersion {
		m := map[string]interface{}{"Response::Version": ty.AsVersionField0}
		return json.Marshal(m)
	}
	if ty.IsPalletsInfo {
		m := map[string]interface{}{"Response::PalletsInfo": ty.AsPalletsInfoField0}
		return json.Marshal(m)
	}
	if ty.IsDispatchResult {
		m := map[string]interface{}{"Response::DispatchResult": ty.AsDispatchResultField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated Option with id=85
type OptionTLocation struct {
	IsNone       bool
	IsSome       bool
	AsSomeField0 Location
}

func (ty OptionTLocation) Encode(encoder scale.Encoder) (err error) {
	if ty.IsNone {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSome {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSomeField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *OptionTLocation) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsNone = true
		return
	case 1:
		ty.IsSome = true
		err = decoder.Decode(&ty.AsSomeField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *OptionTLocation) Variant() (uint8, error) {
	if ty.IsNone {
		return 0, nil
	}
	if ty.IsSome {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty OptionTLocation) MarshalJSON() ([]byte, error) {
	if ty.IsNone {
		return json.Marshal("OptionTLocation::None")
	}
	if ty.IsSome {
		m := map[string]interface{}{"OptionTLocation::Some": ty.AsSomeField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated XcmV2OriginKind with id=86
type OriginKind struct {
	IsNative           bool
	IsSovereignAccount bool
	IsSuperuser        bool
	IsXcm              bool
}

func (ty OriginKind) Encode(encoder scale.Encoder) (err error) {
	if ty.IsNative {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSovereignAccount {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSuperuser {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsXcm {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *OriginKind) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsNative = true
		return
	case 1:
		ty.IsSovereignAccount = true
		return
	case 2:
		ty.IsSuperuser = true
		return
	case 3:
		ty.IsXcm = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *OriginKind) Variant() (uint8, error) {
	if ty.IsNative {
		return 0, nil
	}
	if ty.IsSovereignAccount {
		return 1, nil
	}
	if ty.IsSuperuser {
		return 2, nil
	}
	if ty.IsXcm {
		return 3, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty OriginKind) MarshalJSON() ([]byte, error) {
	if ty.IsNative {
		return json.Marshal("OriginKind::Native")
	}
	if ty.IsSovereignAccount {
		return json.Marshal("OriginKind::SovereignAccount")
	}
	if ty.IsSuperuser {
		return json.Marshal("OriginKind::Superuser")
	}
	if ty.IsXcm {
		return json.Marshal("OriginKind::Xcm")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated staging_xcm_v4_QueryResponseInfo with id={{false [88]}}
type QueryResponseInfo struct {
	// Field 0 with TypeId=47
	Destination Location
	// Field 1 with TypeId=11
	QueryId types.UCompact
	// Field 2 with TypeId=10
	MaxWeight Weight
}

// Generated StagingXcmV4AssetWildFungibility with id=91
type WildFungibility struct {
	IsFungible    bool
	IsNonFungible bool
}

func (ty WildFungibility) Encode(encoder scale.Encoder) (err error) {
	if ty.IsFungible {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNonFungible {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *WildFungibility) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsFungible = true
		return
	case 1:
		ty.IsNonFungible = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *WildFungibility) Variant() (uint8, error) {
	if ty.IsFungible {
		return 0, nil
	}
	if ty.IsNonFungible {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty WildFungibility) MarshalJSON() ([]byte, error) {
	if ty.IsFungible {
		return json.Marshal("WildFungibility::Fungible")
	}
	if ty.IsNonFungible {
		return json.Marshal("WildFungibility::NonFungible")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated StagingXcmV4AssetWildAsset with id=90
type WildAsset struct {
	IsAll                bool
	IsAllOf              bool
	AsAllOfId0           Location
	AsAllOfFun1          WildFungibility
	IsAllCounted         bool
	AsAllCountedField0   types.UCompact
	IsAllOfCounted       bool
	AsAllOfCountedId0    Location
	AsAllOfCountedFun1   WildFungibility
	AsAllOfCountedCount2 types.UCompact
}

func (ty WildAsset) Encode(encoder scale.Encoder) (err error) {
	if ty.IsAll {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAllOf {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAllOfId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAllOfFun1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAllCounted {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAllCountedField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAllOfCounted {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAllOfCountedId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAllOfCountedFun1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAllOfCountedCount2)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *WildAsset) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsAll = true
		return
	case 1:
		ty.IsAllOf = true
		err = decoder.Decode(&ty.AsAllOfId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsAllOfFun1)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsAllCounted = true
		err = decoder.Decode(&ty.AsAllCountedField0)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsAllOfCounted = true
		err = decoder.Decode(&ty.AsAllOfCountedId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsAllOfCountedFun1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsAllOfCountedCount2)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *WildAsset) Variant() (uint8, error) {
	if ty.IsAll {
		return 0, nil
	}
	if ty.IsAllOf {
		return 1, nil
	}
	if ty.IsAllCounted {
		return 2, nil
	}
	if ty.IsAllOfCounted {
		return 3, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty WildAsset) MarshalJSON() ([]byte, error) {
	if ty.IsAll {
		return json.Marshal("WildAsset::All")
	}
	if ty.IsAllOf {
		m := map[string]interface{}{"WildAsset::AllOf": map[string]interface{}{
			"AsAllOfFun1": ty.AsAllOfFun1,
			"AsAllOfId0":  ty.AsAllOfId0,
		}}
		return json.Marshal(m)
	}
	if ty.IsAllCounted {
		m := map[string]interface{}{"WildAsset::AllCounted": ty.AsAllCountedField0}
		return json.Marshal(m)
	}
	if ty.IsAllOfCounted {
		m := map[string]interface{}{"WildAsset::AllOfCounted": map[string]interface{}{
			"AsAllOfCountedCount2": ty.AsAllOfCountedCount2,
			"AsAllOfCountedFun1":   ty.AsAllOfCountedFun1,
			"AsAllOfCountedId0":    ty.AsAllOfCountedId0,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated StagingXcmV4AssetAssetFilter with id=89
type AssetFilter struct {
	IsDefinite       bool
	AsDefiniteField0 []Asset
	IsWild           bool
	AsWildField0     *WildAsset
}

func (ty AssetFilter) Encode(encoder scale.Encoder) (err error) {
	if ty.IsDefinite {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDefiniteField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWild {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWildField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *AssetFilter) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsDefinite = true
		err = decoder.Decode(&ty.AsDefiniteField0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsWild = true
		var tmp WildAsset
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsWildField0 = &tmp
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *AssetFilter) Variant() (uint8, error) {
	if ty.IsDefinite {
		return 0, nil
	}
	if ty.IsWild {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty AssetFilter) MarshalJSON() ([]byte, error) {
	if ty.IsDefinite {
		m := map[string]interface{}{"AssetFilter::Definite": ty.AsDefiniteField0}
		return json.Marshal(m)
	}
	if ty.IsWild {
		m := map[string]interface{}{"AssetFilter::Wild": ty.AsWildField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated XcmV3WeightLimit with id=92
type WeightLimit struct {
	IsUnlimited     bool
	IsLimited       bool
	AsLimitedField0 Weight
}

func (ty WeightLimit) Encode(encoder scale.Encoder) (err error) {
	if ty.IsUnlimited {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsLimited {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLimitedField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *WeightLimit) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsUnlimited = true
		return
	case 1:
		ty.IsLimited = true
		err = decoder.Decode(&ty.AsLimitedField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *WeightLimit) Variant() (uint8, error) {
	if ty.IsUnlimited {
		return 0, nil
	}
	if ty.IsLimited {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty WeightLimit) MarshalJSON() ([]byte, error) {
	if ty.IsUnlimited {
		return json.Marshal("WeightLimit::Unlimited")
	}
	if ty.IsLimited {
		m := map[string]interface{}{"WeightLimit::Limited": ty.AsLimitedField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated StagingXcmV4Instruction with id=67
type Instruction struct {
	IsWithdrawAsset                            bool
	AsWithdrawAssetField0                      []Asset
	IsReserveAssetDeposited                    bool
	AsReserveAssetDepositedField0              []Asset
	IsReceiveTeleportedAsset                   bool
	AsReceiveTeleportedAssetField0             []Asset
	IsQueryResponse                            bool
	AsQueryResponseQueryId0                    types.UCompact
	AsQueryResponseResponse1                   Response
	AsQueryResponseMaxWeight2                  Weight
	AsQueryResponseQuerier3                    OptionTLocation
	IsTransferAsset                            bool
	AsTransferAssetAssets0                     []Asset
	AsTransferAssetBeneficiary1                Location
	IsTransferReserveAsset                     bool
	AsTransferReserveAssetAssets0              []Asset
	AsTransferReserveAssetDest1                Location
	AsTransferReserveAssetXcm2                 []Instruction
	IsTransact                                 bool
	AsTransactOriginKind0                      OriginKind
	AsTransactRequireWeightAtMost1             Weight
	AsTransactCall2                            []byte
	IsHrmpNewChannelOpenRequest                bool
	AsHrmpNewChannelOpenRequestSender0         types.UCompact
	AsHrmpNewChannelOpenRequestMaxMessageSize1 types.UCompact
	AsHrmpNewChannelOpenRequestMaxCapacity2    types.UCompact
	IsHrmpChannelAccepted                      bool
	AsHrmpChannelAcceptedRecipient0            types.UCompact
	IsHrmpChannelClosing                       bool
	AsHrmpChannelClosingInitiator0             types.UCompact
	AsHrmpChannelClosingSender1                types.UCompact
	AsHrmpChannelClosingRecipient2             types.UCompact
	IsClearOrigin                              bool
	IsDescendOrigin                            bool
	AsDescendOriginField0                      *Junctions
	IsReportError                              bool
	AsReportErrorField0                        QueryResponseInfo
	IsDepositAsset                             bool
	AsDepositAssetAssets0                      AssetFilter
	AsDepositAssetBeneficiary1                 Location
	IsDepositReserveAsset                      bool
	AsDepositReserveAssetAssets0               AssetFilter
	AsDepositReserveAssetDest1                 Location
	AsDepositReserveAssetXcm2                  []Instruction
	IsExchangeAsset                            bool
	AsExchangeAssetGive0                       AssetFilter
	AsExchangeAssetWant1                       []Asset
	AsExchangeAssetMaximal2                    bool
	IsInitiateReserveWithdraw                  bool
	AsInitiateReserveWithdrawAssets0           AssetFilter
	AsInitiateReserveWithdrawReserve1          Location
	AsInitiateReserveWithdrawXcm2              []Instruction
	IsInitiateTeleport                         bool
	AsInitiateTeleportAssets0                  AssetFilter
	AsInitiateTeleportDest1                    Location
	AsInitiateTeleportXcm2                     []Instruction
	IsReportHolding                            bool
	AsReportHoldingResponseInfo0               QueryResponseInfo
	AsReportHoldingAssets1                     AssetFilter
	IsBuyExecution                             bool
	AsBuyExecutionFees0                        Asset
	AsBuyExecutionWeightLimit1                 WeightLimit
	IsRefundSurplus                            bool
	IsSetErrorHandler                          bool
	AsSetErrorHandlerField0                    []Instruction
	IsSetAppendix                              bool
	AsSetAppendixField0                        []Instruction
	IsClearError                               bool
	IsClaimAsset                               bool
	AsClaimAssetAssets0                        []Asset
	AsClaimAssetTicket1                        Location
	IsTrap                                     bool
	AsTrapField0                               types.UCompact
	IsSubscribeVersion                         bool
	AsSubscribeVersionQueryId0                 types.UCompact
	AsSubscribeVersionMaxResponseWeight1       Weight
	IsUnsubscribeVersion                       bool
	IsBurnAsset                                bool
	AsBurnAssetField0                          []Asset
	IsExpectAsset                              bool
	AsExpectAssetField0                        []Asset
	IsExpectOrigin                             bool
	AsExpectOriginField0                       *OptionTLocation
	IsExpectError                              bool
	AsExpectErrorField0                        *OptionTTupleOfUint32XcmV3TraitsError
	IsExpectTransactStatus                     bool
	AsExpectTransactStatusField0               *MaybeErrorCode
	IsQueryPallet                              bool
	AsQueryPalletModuleName0                   []byte
	AsQueryPalletResponseInfo1                 QueryResponseInfo
	IsExpectPallet                             bool
	AsExpectPalletIndex0                       types.UCompact
	AsExpectPalletName1                        []byte
	AsExpectPalletModuleName2                  []byte
	AsExpectPalletCrateMajor3                  types.UCompact
	AsExpectPalletMinCrateMinor4               types.UCompact
	IsReportTransactStatus                     bool
	AsReportTransactStatusField0               QueryResponseInfo
	IsClearTransactStatus                      bool
	IsUniversalOrigin                          bool
	AsUniversalOriginField0                    *Junction
	IsExportMessage                            bool
	AsExportMessageNetwork0                    NetworkId
	AsExportMessageDestination1                Junctions
	AsExportMessageXcm2                        []Instruction
	IsLockAsset                                bool
	AsLockAssetAsset0                          Asset
	AsLockAssetUnlocker1                       Location
	IsUnlockAsset                              bool
	AsUnlockAssetAsset0                        Asset
	AsUnlockAssetTarget1                       Location
	IsNoteUnlockable                           bool
	AsNoteUnlockableAsset0                     Asset
	AsNoteUnlockableOwner1                     Location
	IsRequestUnlock                            bool
	AsRequestUnlockAsset0                      Asset
	AsRequestUnlockLocker1                     Location
	IsSetFeesMode                              bool
	AsSetFeesModeJitWithdraw0                  bool
	IsSetTopic                                 bool
	AsSetTopicField0                           [32]byte
	IsClearTopic                               bool
	IsAliasOrigin                              bool
	AsAliasOriginField0                        Location
	IsUnpaidExecution                          bool
	AsUnpaidExecutionWeightLimit0              WeightLimit
	AsUnpaidExecutionCheckOrigin1              OptionTLocation
}

func (ty Instruction) Encode(encoder scale.Encoder) (err error) {
	if ty.IsWithdrawAsset {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWithdrawAssetField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReserveAssetDeposited {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReserveAssetDepositedField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReceiveTeleportedAsset {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReceiveTeleportedAssetField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsQueryResponse {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryResponseQueryId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryResponseResponse1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryResponseMaxWeight2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryResponseQuerier3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTransferAsset {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferAssetAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferAssetBeneficiary1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTransferReserveAsset {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferReserveAssetAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferReserveAssetDest1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferReserveAssetXcm2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTransact {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransactOriginKind0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransactRequireWeightAtMost1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransactCall2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsHrmpNewChannelOpenRequest {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpNewChannelOpenRequestSender0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpNewChannelOpenRequestMaxMessageSize1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpNewChannelOpenRequestMaxCapacity2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsHrmpChannelAccepted {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpChannelAcceptedRecipient0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsHrmpChannelClosing {
		err = encoder.PushByte(9)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpChannelClosingInitiator0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpChannelClosingSender1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpChannelClosingRecipient2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsClearOrigin {
		err = encoder.PushByte(10)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDescendOrigin {
		err = encoder.PushByte(11)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDescendOriginField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReportError {
		err = encoder.PushByte(12)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReportErrorField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDepositAsset {
		err = encoder.PushByte(13)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositAssetAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositAssetBeneficiary1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDepositReserveAsset {
		err = encoder.PushByte(14)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositReserveAssetAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositReserveAssetDest1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositReserveAssetXcm2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExchangeAsset {
		err = encoder.PushByte(15)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExchangeAssetGive0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExchangeAssetWant1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExchangeAssetMaximal2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsInitiateReserveWithdraw {
		err = encoder.PushByte(16)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateReserveWithdrawAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateReserveWithdrawReserve1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateReserveWithdrawXcm2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsInitiateTeleport {
		err = encoder.PushByte(17)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateTeleportAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateTeleportDest1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateTeleportXcm2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReportHolding {
		err = encoder.PushByte(18)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReportHoldingResponseInfo0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReportHoldingAssets1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBuyExecution {
		err = encoder.PushByte(19)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBuyExecutionFees0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBuyExecutionWeightLimit1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsRefundSurplus {
		err = encoder.PushByte(20)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetErrorHandler {
		err = encoder.PushByte(21)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetErrorHandlerField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetAppendix {
		err = encoder.PushByte(22)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetAppendixField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsClearError {
		err = encoder.PushByte(23)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsClaimAsset {
		err = encoder.PushByte(24)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClaimAssetAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClaimAssetTicket1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTrap {
		err = encoder.PushByte(25)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTrapField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSubscribeVersion {
		err = encoder.PushByte(26)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSubscribeVersionQueryId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSubscribeVersionMaxResponseWeight1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnsubscribeVersion {
		err = encoder.PushByte(27)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBurnAsset {
		err = encoder.PushByte(28)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBurnAssetField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExpectAsset {
		err = encoder.PushByte(29)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectAssetField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExpectOrigin {
		err = encoder.PushByte(30)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectOriginField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExpectError {
		err = encoder.PushByte(31)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectErrorField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExpectTransactStatus {
		err = encoder.PushByte(32)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectTransactStatusField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsQueryPallet {
		err = encoder.PushByte(33)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryPalletModuleName0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryPalletResponseInfo1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExpectPallet {
		err = encoder.PushByte(34)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectPalletIndex0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectPalletName1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectPalletModuleName2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectPalletCrateMajor3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectPalletMinCrateMinor4)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReportTransactStatus {
		err = encoder.PushByte(35)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReportTransactStatusField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsClearTransactStatus {
		err = encoder.PushByte(36)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUniversalOrigin {
		err = encoder.PushByte(37)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUniversalOriginField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExportMessage {
		err = encoder.PushByte(38)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExportMessageNetwork0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExportMessageDestination1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExportMessageXcm2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsLockAsset {
		err = encoder.PushByte(39)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLockAssetAsset0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLockAssetUnlocker1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnlockAsset {
		err = encoder.PushByte(40)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnlockAssetAsset0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnlockAssetTarget1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNoteUnlockable {
		err = encoder.PushByte(41)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNoteUnlockableAsset0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNoteUnlockableOwner1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsRequestUnlock {
		err = encoder.PushByte(42)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsRequestUnlockAsset0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsRequestUnlockLocker1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetFeesMode {
		err = encoder.PushByte(43)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetFeesModeJitWithdraw0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetTopic {
		err = encoder.PushByte(44)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetTopicField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsClearTopic {
		err = encoder.PushByte(45)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAliasOrigin {
		err = encoder.PushByte(46)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAliasOriginField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnpaidExecution {
		err = encoder.PushByte(47)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnpaidExecutionWeightLimit0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnpaidExecutionCheckOrigin1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Instruction) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsWithdrawAsset = true
		err = decoder.Decode(&ty.AsWithdrawAssetField0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsReserveAssetDeposited = true
		err = decoder.Decode(&ty.AsReserveAssetDepositedField0)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsReceiveTeleportedAsset = true
		err = decoder.Decode(&ty.AsReceiveTeleportedAssetField0)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsQueryResponse = true
		err = decoder.Decode(&ty.AsQueryResponseQueryId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsQueryResponseResponse1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsQueryResponseMaxWeight2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsQueryResponseQuerier3)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsTransferAsset = true
		err = decoder.Decode(&ty.AsTransferAssetAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferAssetBeneficiary1)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsTransferReserveAsset = true
		err = decoder.Decode(&ty.AsTransferReserveAssetAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferReserveAssetDest1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferReserveAssetXcm2)
		if err != nil {
			return err
		}
		return
	case 6:
		ty.IsTransact = true
		err = decoder.Decode(&ty.AsTransactOriginKind0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransactRequireWeightAtMost1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransactCall2)
		if err != nil {
			return err
		}
		return
	case 7:
		ty.IsHrmpNewChannelOpenRequest = true
		err = decoder.Decode(&ty.AsHrmpNewChannelOpenRequestSender0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsHrmpNewChannelOpenRequestMaxMessageSize1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsHrmpNewChannelOpenRequestMaxCapacity2)
		if err != nil {
			return err
		}
		return
	case 8:
		ty.IsHrmpChannelAccepted = true
		err = decoder.Decode(&ty.AsHrmpChannelAcceptedRecipient0)
		if err != nil {
			return err
		}
		return
	case 9:
		ty.IsHrmpChannelClosing = true
		err = decoder.Decode(&ty.AsHrmpChannelClosingInitiator0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsHrmpChannelClosingSender1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsHrmpChannelClosingRecipient2)
		if err != nil {
			return err
		}
		return
	case 10:
		ty.IsClearOrigin = true
		return
	case 11:
		ty.IsDescendOrigin = true
		var tmp Junctions
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsDescendOriginField0 = &tmp
		return
	case 12:
		ty.IsReportError = true
		err = decoder.Decode(&ty.AsReportErrorField0)
		if err != nil {
			return err
		}
		return
	case 13:
		ty.IsDepositAsset = true
		err = decoder.Decode(&ty.AsDepositAssetAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDepositAssetBeneficiary1)
		if err != nil {
			return err
		}
		return
	case 14:
		ty.IsDepositReserveAsset = true
		err = decoder.Decode(&ty.AsDepositReserveAssetAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDepositReserveAssetDest1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDepositReserveAssetXcm2)
		if err != nil {
			return err
		}
		return
	case 15:
		ty.IsExchangeAsset = true
		err = decoder.Decode(&ty.AsExchangeAssetGive0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExchangeAssetWant1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExchangeAssetMaximal2)
		if err != nil {
			return err
		}
		return
	case 16:
		ty.IsInitiateReserveWithdraw = true
		err = decoder.Decode(&ty.AsInitiateReserveWithdrawAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInitiateReserveWithdrawReserve1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInitiateReserveWithdrawXcm2)
		if err != nil {
			return err
		}
		return
	case 17:
		ty.IsInitiateTeleport = true
		err = decoder.Decode(&ty.AsInitiateTeleportAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInitiateTeleportDest1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInitiateTeleportXcm2)
		if err != nil {
			return err
		}
		return
	case 18:
		ty.IsReportHolding = true
		err = decoder.Decode(&ty.AsReportHoldingResponseInfo0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsReportHoldingAssets1)
		if err != nil {
			return err
		}
		return
	case 19:
		ty.IsBuyExecution = true
		err = decoder.Decode(&ty.AsBuyExecutionFees0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsBuyExecutionWeightLimit1)
		if err != nil {
			return err
		}
		return
	case 20:
		ty.IsRefundSurplus = true
		return
	case 21:
		ty.IsSetErrorHandler = true
		err = decoder.Decode(&ty.AsSetErrorHandlerField0)
		if err != nil {
			return err
		}
		return
	case 22:
		ty.IsSetAppendix = true
		err = decoder.Decode(&ty.AsSetAppendixField0)
		if err != nil {
			return err
		}
		return
	case 23:
		ty.IsClearError = true
		return
	case 24:
		ty.IsClaimAsset = true
		err = decoder.Decode(&ty.AsClaimAssetAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsClaimAssetTicket1)
		if err != nil {
			return err
		}
		return
	case 25:
		ty.IsTrap = true
		err = decoder.Decode(&ty.AsTrapField0)
		if err != nil {
			return err
		}
		return
	case 26:
		ty.IsSubscribeVersion = true
		err = decoder.Decode(&ty.AsSubscribeVersionQueryId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSubscribeVersionMaxResponseWeight1)
		if err != nil {
			return err
		}
		return
	case 27:
		ty.IsUnsubscribeVersion = true
		return
	case 28:
		ty.IsBurnAsset = true
		err = decoder.Decode(&ty.AsBurnAssetField0)
		if err != nil {
			return err
		}
		return
	case 29:
		ty.IsExpectAsset = true
		err = decoder.Decode(&ty.AsExpectAssetField0)
		if err != nil {
			return err
		}
		return
	case 30:
		ty.IsExpectOrigin = true
		var tmp OptionTLocation
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsExpectOriginField0 = &tmp
		return
	case 31:
		ty.IsExpectError = true
		var tmp OptionTTupleOfUint32XcmV3TraitsError
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsExpectErrorField0 = &tmp
		return
	case 32:
		ty.IsExpectTransactStatus = true
		var tmp MaybeErrorCode
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsExpectTransactStatusField0 = &tmp
		return
	case 33:
		ty.IsQueryPallet = true
		err = decoder.Decode(&ty.AsQueryPalletModuleName0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsQueryPalletResponseInfo1)
		if err != nil {
			return err
		}
		return
	case 34:
		ty.IsExpectPallet = true
		err = decoder.Decode(&ty.AsExpectPalletIndex0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExpectPalletName1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExpectPalletModuleName2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExpectPalletCrateMajor3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExpectPalletMinCrateMinor4)
		if err != nil {
			return err
		}
		return
	case 35:
		ty.IsReportTransactStatus = true
		err = decoder.Decode(&ty.AsReportTransactStatusField0)
		if err != nil {
			return err
		}
		return
	case 36:
		ty.IsClearTransactStatus = true
		return
	case 37:
		ty.IsUniversalOrigin = true
		var tmp Junction
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsUniversalOriginField0 = &tmp
		return
	case 38:
		ty.IsExportMessage = true
		err = decoder.Decode(&ty.AsExportMessageNetwork0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExportMessageDestination1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExportMessageXcm2)
		if err != nil {
			return err
		}
		return
	case 39:
		ty.IsLockAsset = true
		err = decoder.Decode(&ty.AsLockAssetAsset0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsLockAssetUnlocker1)
		if err != nil {
			return err
		}
		return
	case 40:
		ty.IsUnlockAsset = true
		err = decoder.Decode(&ty.AsUnlockAssetAsset0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUnlockAssetTarget1)
		if err != nil {
			return err
		}
		return
	case 41:
		ty.IsNoteUnlockable = true
		err = decoder.Decode(&ty.AsNoteUnlockableAsset0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsNoteUnlockableOwner1)
		if err != nil {
			return err
		}
		return
	case 42:
		ty.IsRequestUnlock = true
		err = decoder.Decode(&ty.AsRequestUnlockAsset0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsRequestUnlockLocker1)
		if err != nil {
			return err
		}
		return
	case 43:
		ty.IsSetFeesMode = true
		err = decoder.Decode(&ty.AsSetFeesModeJitWithdraw0)
		if err != nil {
			return err
		}
		return
	case 44:
		ty.IsSetTopic = true
		err = decoder.Decode(&ty.AsSetTopicField0)
		if err != nil {
			return err
		}
		return
	case 45:
		ty.IsClearTopic = true
		return
	case 46:
		ty.IsAliasOrigin = true
		err = decoder.Decode(&ty.AsAliasOriginField0)
		if err != nil {
			return err
		}
		return
	case 47:
		ty.IsUnpaidExecution = true
		err = decoder.Decode(&ty.AsUnpaidExecutionWeightLimit0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUnpaidExecutionCheckOrigin1)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Instruction) Variant() (uint8, error) {
	if ty.IsWithdrawAsset {
		return 0, nil
	}
	if ty.IsReserveAssetDeposited {
		return 1, nil
	}
	if ty.IsReceiveTeleportedAsset {
		return 2, nil
	}
	if ty.IsQueryResponse {
		return 3, nil
	}
	if ty.IsTransferAsset {
		return 4, nil
	}
	if ty.IsTransferReserveAsset {
		return 5, nil
	}
	if ty.IsTransact {
		return 6, nil
	}
	if ty.IsHrmpNewChannelOpenRequest {
		return 7, nil
	}
	if ty.IsHrmpChannelAccepted {
		return 8, nil
	}
	if ty.IsHrmpChannelClosing {
		return 9, nil
	}
	if ty.IsClearOrigin {
		return 10, nil
	}
	if ty.IsDescendOrigin {
		return 11, nil
	}
	if ty.IsReportError {
		return 12, nil
	}
	if ty.IsDepositAsset {
		return 13, nil
	}
	if ty.IsDepositReserveAsset {
		return 14, nil
	}
	if ty.IsExchangeAsset {
		return 15, nil
	}
	if ty.IsInitiateReserveWithdraw {
		return 16, nil
	}
	if ty.IsInitiateTeleport {
		return 17, nil
	}
	if ty.IsReportHolding {
		return 18, nil
	}
	if ty.IsBuyExecution {
		return 19, nil
	}
	if ty.IsRefundSurplus {
		return 20, nil
	}
	if ty.IsSetErrorHandler {
		return 21, nil
	}
	if ty.IsSetAppendix {
		return 22, nil
	}
	if ty.IsClearError {
		return 23, nil
	}
	if ty.IsClaimAsset {
		return 24, nil
	}
	if ty.IsTrap {
		return 25, nil
	}
	if ty.IsSubscribeVersion {
		return 26, nil
	}
	if ty.IsUnsubscribeVersion {
		return 27, nil
	}
	if ty.IsBurnAsset {
		return 28, nil
	}
	if ty.IsExpectAsset {
		return 29, nil
	}
	if ty.IsExpectOrigin {
		return 30, nil
	}
	if ty.IsExpectError {
		return 31, nil
	}
	if ty.IsExpectTransactStatus {
		return 32, nil
	}
	if ty.IsQueryPallet {
		return 33, nil
	}
	if ty.IsExpectPallet {
		return 34, nil
	}
	if ty.IsReportTransactStatus {
		return 35, nil
	}
	if ty.IsClearTransactStatus {
		return 36, nil
	}
	if ty.IsUniversalOrigin {
		return 37, nil
	}
	if ty.IsExportMessage {
		return 38, nil
	}
	if ty.IsLockAsset {
		return 39, nil
	}
	if ty.IsUnlockAsset {
		return 40, nil
	}
	if ty.IsNoteUnlockable {
		return 41, nil
	}
	if ty.IsRequestUnlock {
		return 42, nil
	}
	if ty.IsSetFeesMode {
		return 43, nil
	}
	if ty.IsSetTopic {
		return 44, nil
	}
	if ty.IsClearTopic {
		return 45, nil
	}
	if ty.IsAliasOrigin {
		return 46, nil
	}
	if ty.IsUnpaidExecution {
		return 47, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Instruction) MarshalJSON() ([]byte, error) {
	if ty.IsWithdrawAsset {
		m := map[string]interface{}{"Instruction::WithdrawAsset": ty.AsWithdrawAssetField0}
		return json.Marshal(m)
	}
	if ty.IsReserveAssetDeposited {
		m := map[string]interface{}{"Instruction::ReserveAssetDeposited": ty.AsReserveAssetDepositedField0}
		return json.Marshal(m)
	}
	if ty.IsReceiveTeleportedAsset {
		m := map[string]interface{}{"Instruction::ReceiveTeleportedAsset": ty.AsReceiveTeleportedAssetField0}
		return json.Marshal(m)
	}
	if ty.IsQueryResponse {
		m := map[string]interface{}{"Instruction::QueryResponse": map[string]interface{}{
			"AsQueryResponseMaxWeight2": ty.AsQueryResponseMaxWeight2,
			"AsQueryResponseQuerier3":   ty.AsQueryResponseQuerier3,
			"AsQueryResponseQueryId0":   ty.AsQueryResponseQueryId0,
			"AsQueryResponseResponse1":  ty.AsQueryResponseResponse1,
		}}
		return json.Marshal(m)
	}
	if ty.IsTransferAsset {
		m := map[string]interface{}{"Instruction::TransferAsset": map[string]interface{}{
			"AsTransferAssetAssets0":      ty.AsTransferAssetAssets0,
			"AsTransferAssetBeneficiary1": ty.AsTransferAssetBeneficiary1,
		}}
		return json.Marshal(m)
	}
	if ty.IsTransferReserveAsset {
		m := map[string]interface{}{"Instruction::TransferReserveAsset": map[string]interface{}{
			"AsTransferReserveAssetAssets0": ty.AsTransferReserveAssetAssets0,
			"AsTransferReserveAssetDest1":   ty.AsTransferReserveAssetDest1,
			"AsTransferReserveAssetXcm2":    ty.AsTransferReserveAssetXcm2,
		}}
		return json.Marshal(m)
	}
	if ty.IsTransact {
		m := map[string]interface{}{"Instruction::Transact": map[string]interface{}{
			"AsTransactCall2":                ty.AsTransactCall2,
			"AsTransactOriginKind0":          ty.AsTransactOriginKind0,
			"AsTransactRequireWeightAtMost1": ty.AsTransactRequireWeightAtMost1,
		}}
		return json.Marshal(m)
	}
	if ty.IsHrmpNewChannelOpenRequest {
		m := map[string]interface{}{"Instruction::HrmpNewChannelOpenRequest": map[string]interface{}{
			"AsHrmpNewChannelOpenRequestMaxCapacity2":    ty.AsHrmpNewChannelOpenRequestMaxCapacity2,
			"AsHrmpNewChannelOpenRequestMaxMessageSize1": ty.AsHrmpNewChannelOpenRequestMaxMessageSize1,
			"AsHrmpNewChannelOpenRequestSender0":         ty.AsHrmpNewChannelOpenRequestSender0,
		}}
		return json.Marshal(m)
	}
	if ty.IsHrmpChannelAccepted {
		m := map[string]interface{}{"Instruction::HrmpChannelAccepted": ty.AsHrmpChannelAcceptedRecipient0}
		return json.Marshal(m)
	}
	if ty.IsHrmpChannelClosing {
		m := map[string]interface{}{"Instruction::HrmpChannelClosing": map[string]interface{}{
			"AsHrmpChannelClosingInitiator0": ty.AsHrmpChannelClosingInitiator0,
			"AsHrmpChannelClosingRecipient2": ty.AsHrmpChannelClosingRecipient2,
			"AsHrmpChannelClosingSender1":    ty.AsHrmpChannelClosingSender1,
		}}
		return json.Marshal(m)
	}
	if ty.IsClearOrigin {
		return json.Marshal("Instruction::ClearOrigin")
	}
	if ty.IsDescendOrigin {
		m := map[string]interface{}{"Instruction::DescendOrigin": ty.AsDescendOriginField0}
		return json.Marshal(m)
	}
	if ty.IsReportError {
		m := map[string]interface{}{"Instruction::ReportError": ty.AsReportErrorField0}
		return json.Marshal(m)
	}
	if ty.IsDepositAsset {
		m := map[string]interface{}{"Instruction::DepositAsset": map[string]interface{}{
			"AsDepositAssetAssets0":      ty.AsDepositAssetAssets0,
			"AsDepositAssetBeneficiary1": ty.AsDepositAssetBeneficiary1,
		}}
		return json.Marshal(m)
	}
	if ty.IsDepositReserveAsset {
		m := map[string]interface{}{"Instruction::DepositReserveAsset": map[string]interface{}{
			"AsDepositReserveAssetAssets0": ty.AsDepositReserveAssetAssets0,
			"AsDepositReserveAssetDest1":   ty.AsDepositReserveAssetDest1,
			"AsDepositReserveAssetXcm2":    ty.AsDepositReserveAssetXcm2,
		}}
		return json.Marshal(m)
	}
	if ty.IsExchangeAsset {
		m := map[string]interface{}{"Instruction::ExchangeAsset": map[string]interface{}{
			"AsExchangeAssetGive0":    ty.AsExchangeAssetGive0,
			"AsExchangeAssetMaximal2": ty.AsExchangeAssetMaximal2,
			"AsExchangeAssetWant1":    ty.AsExchangeAssetWant1,
		}}
		return json.Marshal(m)
	}
	if ty.IsInitiateReserveWithdraw {
		m := map[string]interface{}{"Instruction::InitiateReserveWithdraw": map[string]interface{}{
			"AsInitiateReserveWithdrawAssets0":  ty.AsInitiateReserveWithdrawAssets0,
			"AsInitiateReserveWithdrawReserve1": ty.AsInitiateReserveWithdrawReserve1,
			"AsInitiateReserveWithdrawXcm2":     ty.AsInitiateReserveWithdrawXcm2,
		}}
		return json.Marshal(m)
	}
	if ty.IsInitiateTeleport {
		m := map[string]interface{}{"Instruction::InitiateTeleport": map[string]interface{}{
			"AsInitiateTeleportAssets0": ty.AsInitiateTeleportAssets0,
			"AsInitiateTeleportDest1":   ty.AsInitiateTeleportDest1,
			"AsInitiateTeleportXcm2":    ty.AsInitiateTeleportXcm2,
		}}
		return json.Marshal(m)
	}
	if ty.IsReportHolding {
		m := map[string]interface{}{"Instruction::ReportHolding": map[string]interface{}{
			"AsReportHoldingAssets1":       ty.AsReportHoldingAssets1,
			"AsReportHoldingResponseInfo0": ty.AsReportHoldingResponseInfo0,
		}}
		return json.Marshal(m)
	}
	if ty.IsBuyExecution {
		m := map[string]interface{}{"Instruction::BuyExecution": map[string]interface{}{
			"AsBuyExecutionFees0":        ty.AsBuyExecutionFees0,
			"AsBuyExecutionWeightLimit1": ty.AsBuyExecutionWeightLimit1,
		}}
		return json.Marshal(m)
	}
	if ty.IsRefundSurplus {
		return json.Marshal("Instruction::RefundSurplus")
	}
	if ty.IsSetErrorHandler {
		m := map[string]interface{}{"Instruction::SetErrorHandler": ty.AsSetErrorHandlerField0}
		return json.Marshal(m)
	}
	if ty.IsSetAppendix {
		m := map[string]interface{}{"Instruction::SetAppendix": ty.AsSetAppendixField0}
		return json.Marshal(m)
	}
	if ty.IsClearError {
		return json.Marshal("Instruction::ClearError")
	}
	if ty.IsClaimAsset {
		m := map[string]interface{}{"Instruction::ClaimAsset": map[string]interface{}{
			"AsClaimAssetAssets0": ty.AsClaimAssetAssets0,
			"AsClaimAssetTicket1": ty.AsClaimAssetTicket1,
		}}
		return json.Marshal(m)
	}
	if ty.IsTrap {
		m := map[string]interface{}{"Instruction::Trap": ty.AsTrapField0}
		return json.Marshal(m)
	}
	if ty.IsSubscribeVersion {
		m := map[string]interface{}{"Instruction::SubscribeVersion": map[string]interface{}{
			"AsSubscribeVersionMaxResponseWeight1": ty.AsSubscribeVersionMaxResponseWeight1,
			"AsSubscribeVersionQueryId0":           ty.AsSubscribeVersionQueryId0,
		}}
		return json.Marshal(m)
	}
	if ty.IsUnsubscribeVersion {
		return json.Marshal("Instruction::UnsubscribeVersion")
	}
	if ty.IsBurnAsset {
		m := map[string]interface{}{"Instruction::BurnAsset": ty.AsBurnAssetField0}
		return json.Marshal(m)
	}
	if ty.IsExpectAsset {
		m := map[string]interface{}{"Instruction::ExpectAsset": ty.AsExpectAssetField0}
		return json.Marshal(m)
	}
	if ty.IsExpectOrigin {
		m := map[string]interface{}{"Instruction::ExpectOrigin": ty.AsExpectOriginField0}
		return json.Marshal(m)
	}
	if ty.IsExpectError {
		m := map[string]interface{}{"Instruction::ExpectError": ty.AsExpectErrorField0}
		return json.Marshal(m)
	}
	if ty.IsExpectTransactStatus {
		m := map[string]interface{}{"Instruction::ExpectTransactStatus": ty.AsExpectTransactStatusField0}
		return json.Marshal(m)
	}
	if ty.IsQueryPallet {
		m := map[string]interface{}{"Instruction::QueryPallet": map[string]interface{}{
			"AsQueryPalletModuleName0":   ty.AsQueryPalletModuleName0,
			"AsQueryPalletResponseInfo1": ty.AsQueryPalletResponseInfo1,
		}}
		return json.Marshal(m)
	}
	if ty.IsExpectPallet {
		m := map[string]interface{}{"Instruction::ExpectPallet": map[string]interface{}{
			"AsExpectPalletCrateMajor3":    ty.AsExpectPalletCrateMajor3,
			"AsExpectPalletIndex0":         ty.AsExpectPalletIndex0,
			"AsExpectPalletMinCrateMinor4": ty.AsExpectPalletMinCrateMinor4,
			"AsExpectPalletModuleName2":    ty.AsExpectPalletModuleName2,
			"AsExpectPalletName1":          ty.AsExpectPalletName1,
		}}
		return json.Marshal(m)
	}
	if ty.IsReportTransactStatus {
		m := map[string]interface{}{"Instruction::ReportTransactStatus": ty.AsReportTransactStatusField0}
		return json.Marshal(m)
	}
	if ty.IsClearTransactStatus {
		return json.Marshal("Instruction::ClearTransactStatus")
	}
	if ty.IsUniversalOrigin {
		m := map[string]interface{}{"Instruction::UniversalOrigin": ty.AsUniversalOriginField0}
		return json.Marshal(m)
	}
	if ty.IsExportMessage {
		m := map[string]interface{}{"Instruction::ExportMessage": map[string]interface{}{
			"AsExportMessageDestination1": ty.AsExportMessageDestination1,
			"AsExportMessageNetwork0":     ty.AsExportMessageNetwork0,
			"AsExportMessageXcm2":         ty.AsExportMessageXcm2,
		}}
		return json.Marshal(m)
	}
	if ty.IsLockAsset {
		m := map[string]interface{}{"Instruction::LockAsset": map[string]interface{}{
			"AsLockAssetAsset0":    ty.AsLockAssetAsset0,
			"AsLockAssetUnlocker1": ty.AsLockAssetUnlocker1,
		}}
		return json.Marshal(m)
	}
	if ty.IsUnlockAsset {
		m := map[string]interface{}{"Instruction::UnlockAsset": map[string]interface{}{
			"AsUnlockAssetAsset0":  ty.AsUnlockAssetAsset0,
			"AsUnlockAssetTarget1": ty.AsUnlockAssetTarget1,
		}}
		return json.Marshal(m)
	}
	if ty.IsNoteUnlockable {
		m := map[string]interface{}{"Instruction::NoteUnlockable": map[string]interface{}{
			"AsNoteUnlockableAsset0": ty.AsNoteUnlockableAsset0,
			"AsNoteUnlockableOwner1": ty.AsNoteUnlockableOwner1,
		}}
		return json.Marshal(m)
	}
	if ty.IsRequestUnlock {
		m := map[string]interface{}{"Instruction::RequestUnlock": map[string]interface{}{
			"AsRequestUnlockAsset0":  ty.AsRequestUnlockAsset0,
			"AsRequestUnlockLocker1": ty.AsRequestUnlockLocker1,
		}}
		return json.Marshal(m)
	}
	if ty.IsSetFeesMode {
		m := map[string]interface{}{"Instruction::SetFeesMode": ty.AsSetFeesModeJitWithdraw0}
		return json.Marshal(m)
	}
	if ty.IsSetTopic {
		m := map[string]interface{}{"Instruction::SetTopic": ty.AsSetTopicField0}
		return json.Marshal(m)
	}
	if ty.IsClearTopic {
		return json.Marshal("Instruction::ClearTopic")
	}
	if ty.IsAliasOrigin {
		m := map[string]interface{}{"Instruction::AliasOrigin": ty.AsAliasOriginField0}
		return json.Marshal(m)
	}
	if ty.IsUnpaidExecution {
		m := map[string]interface{}{"Instruction::UnpaidExecution": map[string]interface{}{
			"AsUnpaidExecutionCheckOrigin1": ty.AsUnpaidExecutionCheckOrigin1,
			"AsUnpaidExecutionWeightLimit0": ty.AsUnpaidExecutionWeightLimit0,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated XcmV2NetworkId with id=101
type NetworkId1 struct {
	IsAny         bool
	IsNamed       bool
	AsNamedField0 []byte
	IsPolkadot    bool
	IsKusama      bool
}

func (ty NetworkId1) Encode(encoder scale.Encoder) (err error) {
	if ty.IsAny {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNamed {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNamedField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsPolkadot {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsKusama {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *NetworkId1) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsAny = true
		return
	case 1:
		ty.IsNamed = true
		err = decoder.Decode(&ty.AsNamedField0)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsPolkadot = true
		return
	case 3:
		ty.IsKusama = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *NetworkId1) Variant() (uint8, error) {
	if ty.IsAny {
		return 0, nil
	}
	if ty.IsNamed {
		return 1, nil
	}
	if ty.IsPolkadot {
		return 2, nil
	}
	if ty.IsKusama {
		return 3, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty NetworkId1) MarshalJSON() ([]byte, error) {
	if ty.IsAny {
		return json.Marshal("NetworkId1::Any")
	}
	if ty.IsNamed {
		m := map[string]interface{}{"NetworkId1::Named": ty.AsNamedField0}
		return json.Marshal(m)
	}
	if ty.IsPolkadot {
		return json.Marshal("NetworkId1::Polkadot")
	}
	if ty.IsKusama {
		return json.Marshal("NetworkId1::Kusama")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated XcmV2BodyId with id=103
type BodyId1 struct {
	IsUnit           bool
	IsNamed          bool
	AsNamedField0    []byte
	IsIndex          bool
	AsIndexField0    types.UCompact
	IsExecutive      bool
	IsTechnical      bool
	IsLegislative    bool
	IsJudicial       bool
	IsDefense        bool
	IsAdministration bool
	IsTreasury       bool
}

func (ty BodyId1) Encode(encoder scale.Encoder) (err error) {
	if ty.IsUnit {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNamed {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNamedField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsIndex {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsIndexField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExecutive {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTechnical {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsLegislative {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsJudicial {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDefense {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAdministration {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTreasury {
		err = encoder.PushByte(9)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *BodyId1) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsUnit = true
		return
	case 1:
		ty.IsNamed = true
		err = decoder.Decode(&ty.AsNamedField0)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsIndex = true
		err = decoder.Decode(&ty.AsIndexField0)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsExecutive = true
		return
	case 4:
		ty.IsTechnical = true
		return
	case 5:
		ty.IsLegislative = true
		return
	case 6:
		ty.IsJudicial = true
		return
	case 7:
		ty.IsDefense = true
		return
	case 8:
		ty.IsAdministration = true
		return
	case 9:
		ty.IsTreasury = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *BodyId1) Variant() (uint8, error) {
	if ty.IsUnit {
		return 0, nil
	}
	if ty.IsNamed {
		return 1, nil
	}
	if ty.IsIndex {
		return 2, nil
	}
	if ty.IsExecutive {
		return 3, nil
	}
	if ty.IsTechnical {
		return 4, nil
	}
	if ty.IsLegislative {
		return 5, nil
	}
	if ty.IsJudicial {
		return 6, nil
	}
	if ty.IsDefense {
		return 7, nil
	}
	if ty.IsAdministration {
		return 8, nil
	}
	if ty.IsTreasury {
		return 9, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty BodyId1) MarshalJSON() ([]byte, error) {
	if ty.IsUnit {
		return json.Marshal("BodyId1::Unit")
	}
	if ty.IsNamed {
		m := map[string]interface{}{"BodyId1::Named": ty.AsNamedField0}
		return json.Marshal(m)
	}
	if ty.IsIndex {
		m := map[string]interface{}{"BodyId1::Index": ty.AsIndexField0}
		return json.Marshal(m)
	}
	if ty.IsExecutive {
		return json.Marshal("BodyId1::Executive")
	}
	if ty.IsTechnical {
		return json.Marshal("BodyId1::Technical")
	}
	if ty.IsLegislative {
		return json.Marshal("BodyId1::Legislative")
	}
	if ty.IsJudicial {
		return json.Marshal("BodyId1::Judicial")
	}
	if ty.IsDefense {
		return json.Marshal("BodyId1::Defense")
	}
	if ty.IsAdministration {
		return json.Marshal("BodyId1::Administration")
	}
	if ty.IsTreasury {
		return json.Marshal("BodyId1::Treasury")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated XcmV2BodyPart with id=104
type BodyPart1 struct {
	IsVoice                    bool
	IsMembers                  bool
	AsMembersCount0            types.UCompact
	IsFraction                 bool
	AsFractionNom0             types.UCompact
	AsFractionDenom1           types.UCompact
	IsAtLeastProportion        bool
	AsAtLeastProportionNom0    types.UCompact
	AsAtLeastProportionDenom1  types.UCompact
	IsMoreThanProportion       bool
	AsMoreThanProportionNom0   types.UCompact
	AsMoreThanProportionDenom1 types.UCompact
}

func (ty BodyPart1) Encode(encoder scale.Encoder) (err error) {
	if ty.IsVoice {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsMembers {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsMembersCount0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsFraction {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsFractionNom0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsFractionDenom1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAtLeastProportion {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAtLeastProportionNom0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAtLeastProportionDenom1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsMoreThanProportion {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsMoreThanProportionNom0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsMoreThanProportionDenom1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *BodyPart1) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsVoice = true
		return
	case 1:
		ty.IsMembers = true
		err = decoder.Decode(&ty.AsMembersCount0)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsFraction = true
		err = decoder.Decode(&ty.AsFractionNom0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsFractionDenom1)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsAtLeastProportion = true
		err = decoder.Decode(&ty.AsAtLeastProportionNom0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsAtLeastProportionDenom1)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsMoreThanProportion = true
		err = decoder.Decode(&ty.AsMoreThanProportionNom0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsMoreThanProportionDenom1)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *BodyPart1) Variant() (uint8, error) {
	if ty.IsVoice {
		return 0, nil
	}
	if ty.IsMembers {
		return 1, nil
	}
	if ty.IsFraction {
		return 2, nil
	}
	if ty.IsAtLeastProportion {
		return 3, nil
	}
	if ty.IsMoreThanProportion {
		return 4, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty BodyPart1) MarshalJSON() ([]byte, error) {
	if ty.IsVoice {
		return json.Marshal("BodyPart1::Voice")
	}
	if ty.IsMembers {
		m := map[string]interface{}{"BodyPart1::Members": ty.AsMembersCount0}
		return json.Marshal(m)
	}
	if ty.IsFraction {
		m := map[string]interface{}{"BodyPart1::Fraction": map[string]interface{}{
			"AsFractionDenom1": ty.AsFractionDenom1,
			"AsFractionNom0":   ty.AsFractionNom0,
		}}
		return json.Marshal(m)
	}
	if ty.IsAtLeastProportion {
		m := map[string]interface{}{"BodyPart1::AtLeastProportion": map[string]interface{}{
			"AsAtLeastProportionDenom1": ty.AsAtLeastProportionDenom1,
			"AsAtLeastProportionNom0":   ty.AsAtLeastProportionNom0,
		}}
		return json.Marshal(m)
	}
	if ty.IsMoreThanProportion {
		m := map[string]interface{}{"BodyPart1::MoreThanProportion": map[string]interface{}{
			"AsMoreThanProportionDenom1": ty.AsMoreThanProportionDenom1,
			"AsMoreThanProportionNom0":   ty.AsMoreThanProportionNom0,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated XcmV2JunctionJunction with id=100
type Junction1 struct {
	IsParachain              bool
	AsParachainField0        types.UCompact
	IsAccountId32            bool
	AsAccountId32Network0    NetworkId1
	AsAccountId32Id1         [32]byte
	IsAccountIndex64         bool
	AsAccountIndex64Network0 NetworkId1
	AsAccountIndex64Index1   types.UCompact
	IsAccountKey20           bool
	AsAccountKey20Network0   NetworkId1
	AsAccountKey20Key1       [20]byte
	IsPalletInstance         bool
	AsPalletInstanceField0   byte
	IsGeneralIndex           bool
	AsGeneralIndexField0     types.UCompact
	IsGeneralKey             bool
	AsGeneralKeyField0       []byte
	IsOnlyChild              bool
	IsPlurality              bool
	AsPluralityId0           BodyId1
	AsPluralityPart1         BodyPart1
}

func (ty Junction1) Encode(encoder scale.Encoder) (err error) {
	if ty.IsParachain {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsParachainField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAccountId32 {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAccountId32Network0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAccountId32Id1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAccountIndex64 {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAccountIndex64Network0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAccountIndex64Index1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAccountKey20 {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAccountKey20Network0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAccountKey20Key1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsPalletInstance {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPalletInstanceField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsGeneralIndex {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsGeneralIndexField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsGeneralKey {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsGeneralKeyField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsOnlyChild {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsPlurality {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPluralityId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPluralityPart1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Junction1) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsParachain = true
		err = decoder.Decode(&ty.AsParachainField0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsAccountId32 = true
		err = decoder.Decode(&ty.AsAccountId32Network0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsAccountId32Id1)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsAccountIndex64 = true
		err = decoder.Decode(&ty.AsAccountIndex64Network0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsAccountIndex64Index1)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsAccountKey20 = true
		err = decoder.Decode(&ty.AsAccountKey20Network0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsAccountKey20Key1)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsPalletInstance = true
		err = decoder.Decode(&ty.AsPalletInstanceField0)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsGeneralIndex = true
		err = decoder.Decode(&ty.AsGeneralIndexField0)
		if err != nil {
			return err
		}
		return
	case 6:
		ty.IsGeneralKey = true
		err = decoder.Decode(&ty.AsGeneralKeyField0)
		if err != nil {
			return err
		}
		return
	case 7:
		ty.IsOnlyChild = true
		return
	case 8:
		ty.IsPlurality = true
		err = decoder.Decode(&ty.AsPluralityId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsPluralityPart1)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Junction1) Variant() (uint8, error) {
	if ty.IsParachain {
		return 0, nil
	}
	if ty.IsAccountId32 {
		return 1, nil
	}
	if ty.IsAccountIndex64 {
		return 2, nil
	}
	if ty.IsAccountKey20 {
		return 3, nil
	}
	if ty.IsPalletInstance {
		return 4, nil
	}
	if ty.IsGeneralIndex {
		return 5, nil
	}
	if ty.IsGeneralKey {
		return 6, nil
	}
	if ty.IsOnlyChild {
		return 7, nil
	}
	if ty.IsPlurality {
		return 8, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Junction1) MarshalJSON() ([]byte, error) {
	if ty.IsParachain {
		m := map[string]interface{}{"Junction1::Parachain": ty.AsParachainField0}
		return json.Marshal(m)
	}
	if ty.IsAccountId32 {
		m := map[string]interface{}{"Junction1::AccountId32": map[string]interface{}{
			"AsAccountId32Id1":      ty.AsAccountId32Id1,
			"AsAccountId32Network0": ty.AsAccountId32Network0,
		}}
		return json.Marshal(m)
	}
	if ty.IsAccountIndex64 {
		m := map[string]interface{}{"Junction1::AccountIndex64": map[string]interface{}{
			"AsAccountIndex64Index1":   ty.AsAccountIndex64Index1,
			"AsAccountIndex64Network0": ty.AsAccountIndex64Network0,
		}}
		return json.Marshal(m)
	}
	if ty.IsAccountKey20 {
		m := map[string]interface{}{"Junction1::AccountKey20": map[string]interface{}{
			"AsAccountKey20Key1":     ty.AsAccountKey20Key1,
			"AsAccountKey20Network0": ty.AsAccountKey20Network0,
		}}
		return json.Marshal(m)
	}
	if ty.IsPalletInstance {
		m := map[string]interface{}{"Junction1::PalletInstance": ty.AsPalletInstanceField0}
		return json.Marshal(m)
	}
	if ty.IsGeneralIndex {
		m := map[string]interface{}{"Junction1::GeneralIndex": ty.AsGeneralIndexField0}
		return json.Marshal(m)
	}
	if ty.IsGeneralKey {
		m := map[string]interface{}{"Junction1::GeneralKey": ty.AsGeneralKeyField0}
		return json.Marshal(m)
	}
	if ty.IsOnlyChild {
		return json.Marshal("Junction1::OnlyChild")
	}
	if ty.IsPlurality {
		m := map[string]interface{}{"Junction1::Plurality": map[string]interface{}{
			"AsPluralityId0":   ty.AsPluralityId0,
			"AsPluralityPart1": ty.AsPluralityPart1,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated XcmV2MultilocationJunctions with id=99
type Junctions1 struct {
	IsHere        bool
	IsX1          bool
	AsX1Field0    *Junction1
	IsX2          bool
	AsX2Junction0 Junction1
	AsX2Junction1 Junction1
	IsX3          bool
	AsX3Junction0 Junction1
	AsX3Junction1 Junction1
	AsX3Junction2 Junction1
	IsX4          bool
	AsX4Junction0 Junction1
	AsX4Junction1 Junction1
	AsX4Junction2 Junction1
	AsX4Junction3 Junction1
	IsX5          bool
	AsX5Junction0 Junction1
	AsX5Junction1 Junction1
	AsX5Junction2 Junction1
	AsX5Junction3 Junction1
	AsX5Junction4 Junction1
	IsX6          bool
	AsX6Junction0 Junction1
	AsX6Junction1 Junction1
	AsX6Junction2 Junction1
	AsX6Junction3 Junction1
	AsX6Junction4 Junction1
	AsX6Junction5 Junction1
	IsX7          bool
	AsX7Junction0 Junction1
	AsX7Junction1 Junction1
	AsX7Junction2 Junction1
	AsX7Junction3 Junction1
	AsX7Junction4 Junction1
	AsX7Junction5 Junction1
	AsX7Junction6 Junction1
	IsX8          bool
	AsX8Junction0 Junction1
	AsX8Junction1 Junction1
	AsX8Junction2 Junction1
	AsX8Junction3 Junction1
	AsX8Junction4 Junction1
	AsX8Junction5 Junction1
	AsX8Junction6 Junction1
	AsX8Junction7 Junction1
}

func (ty Junctions1) Encode(encoder scale.Encoder) (err error) {
	if ty.IsHere {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsX1 {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX1Field0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsX2 {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX2Junction0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX2Junction1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsX3 {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX3Junction0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX3Junction1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX3Junction2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsX4 {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX4Junction0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX4Junction1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX4Junction2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX4Junction3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsX5 {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX5Junction0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX5Junction1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX5Junction2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX5Junction3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX5Junction4)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsX6 {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX6Junction0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX6Junction1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX6Junction2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX6Junction3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX6Junction4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX6Junction5)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsX7 {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX7Junction0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX7Junction1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX7Junction2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX7Junction3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX7Junction4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX7Junction5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX7Junction6)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsX8 {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX8Junction0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX8Junction1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX8Junction2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX8Junction3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX8Junction4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX8Junction5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX8Junction6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX8Junction7)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Junctions1) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsHere = true
		return
	case 1:
		ty.IsX1 = true
		var tmp Junction1
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsX1Field0 = &tmp
		return
	case 2:
		ty.IsX2 = true
		err = decoder.Decode(&ty.AsX2Junction0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX2Junction1)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsX3 = true
		err = decoder.Decode(&ty.AsX3Junction0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX3Junction1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX3Junction2)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsX4 = true
		err = decoder.Decode(&ty.AsX4Junction0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX4Junction1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX4Junction2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX4Junction3)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsX5 = true
		err = decoder.Decode(&ty.AsX5Junction0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX5Junction1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX5Junction2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX5Junction3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX5Junction4)
		if err != nil {
			return err
		}
		return
	case 6:
		ty.IsX6 = true
		err = decoder.Decode(&ty.AsX6Junction0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX6Junction1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX6Junction2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX6Junction3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX6Junction4)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX6Junction5)
		if err != nil {
			return err
		}
		return
	case 7:
		ty.IsX7 = true
		err = decoder.Decode(&ty.AsX7Junction0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX7Junction1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX7Junction2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX7Junction3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX7Junction4)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX7Junction5)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX7Junction6)
		if err != nil {
			return err
		}
		return
	case 8:
		ty.IsX8 = true
		err = decoder.Decode(&ty.AsX8Junction0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX8Junction1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX8Junction2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX8Junction3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX8Junction4)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX8Junction5)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX8Junction6)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX8Junction7)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Junctions1) Variant() (uint8, error) {
	if ty.IsHere {
		return 0, nil
	}
	if ty.IsX1 {
		return 1, nil
	}
	if ty.IsX2 {
		return 2, nil
	}
	if ty.IsX3 {
		return 3, nil
	}
	if ty.IsX4 {
		return 4, nil
	}
	if ty.IsX5 {
		return 5, nil
	}
	if ty.IsX6 {
		return 6, nil
	}
	if ty.IsX7 {
		return 7, nil
	}
	if ty.IsX8 {
		return 8, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Junctions1) MarshalJSON() ([]byte, error) {
	if ty.IsHere {
		return json.Marshal("Junctions1::Here")
	}
	if ty.IsX1 {
		m := map[string]interface{}{"Junctions1::X1": ty.AsX1Field0}
		return json.Marshal(m)
	}
	if ty.IsX2 {
		m := map[string]interface{}{"Junctions1::X2": map[string]interface{}{
			"AsX2Junction0": ty.AsX2Junction0,
			"AsX2Junction1": ty.AsX2Junction1,
		}}
		return json.Marshal(m)
	}
	if ty.IsX3 {
		m := map[string]interface{}{"Junctions1::X3": map[string]interface{}{
			"AsX3Junction0": ty.AsX3Junction0,
			"AsX3Junction1": ty.AsX3Junction1,
			"AsX3Junction2": ty.AsX3Junction2,
		}}
		return json.Marshal(m)
	}
	if ty.IsX4 {
		m := map[string]interface{}{"Junctions1::X4": map[string]interface{}{
			"AsX4Junction0": ty.AsX4Junction0,
			"AsX4Junction1": ty.AsX4Junction1,
			"AsX4Junction2": ty.AsX4Junction2,
			"AsX4Junction3": ty.AsX4Junction3,
		}}
		return json.Marshal(m)
	}
	if ty.IsX5 {
		m := map[string]interface{}{"Junctions1::X5": map[string]interface{}{
			"AsX5Junction0": ty.AsX5Junction0,
			"AsX5Junction1": ty.AsX5Junction1,
			"AsX5Junction2": ty.AsX5Junction2,
			"AsX5Junction3": ty.AsX5Junction3,
			"AsX5Junction4": ty.AsX5Junction4,
		}}
		return json.Marshal(m)
	}
	if ty.IsX6 {
		m := map[string]interface{}{"Junctions1::X6": map[string]interface{}{
			"AsX6Junction0": ty.AsX6Junction0,
			"AsX6Junction1": ty.AsX6Junction1,
			"AsX6Junction2": ty.AsX6Junction2,
			"AsX6Junction3": ty.AsX6Junction3,
			"AsX6Junction4": ty.AsX6Junction4,
			"AsX6Junction5": ty.AsX6Junction5,
		}}
		return json.Marshal(m)
	}
	if ty.IsX7 {
		m := map[string]interface{}{"Junctions1::X7": map[string]interface{}{
			"AsX7Junction0": ty.AsX7Junction0,
			"AsX7Junction1": ty.AsX7Junction1,
			"AsX7Junction2": ty.AsX7Junction2,
			"AsX7Junction3": ty.AsX7Junction3,
			"AsX7Junction4": ty.AsX7Junction4,
			"AsX7Junction5": ty.AsX7Junction5,
			"AsX7Junction6": ty.AsX7Junction6,
		}}
		return json.Marshal(m)
	}
	if ty.IsX8 {
		m := map[string]interface{}{"Junctions1::X8": map[string]interface{}{
			"AsX8Junction0": ty.AsX8Junction0,
			"AsX8Junction1": ty.AsX8Junction1,
			"AsX8Junction2": ty.AsX8Junction2,
			"AsX8Junction3": ty.AsX8Junction3,
			"AsX8Junction4": ty.AsX8Junction4,
			"AsX8Junction5": ty.AsX8Junction5,
			"AsX8Junction6": ty.AsX8Junction6,
			"AsX8Junction7": ty.AsX8Junction7,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated xcm_v2_multilocation_MultiLocation with id={{false [98]}}
type MultiLocation struct {
	// Field 0 with TypeId=2
	Parents byte
	// Field 1 with TypeId=99
	Interior Junctions1
}

// Generated XcmV2MultiassetAssetId with id=97
type AssetId struct {
	IsConcrete       bool
	AsConcreteField0 MultiLocation
	IsAbstract       bool
	AsAbstractField0 []byte
}

func (ty AssetId) Encode(encoder scale.Encoder) (err error) {
	if ty.IsConcrete {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsConcreteField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAbstract {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAbstractField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *AssetId) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsConcrete = true
		err = decoder.Decode(&ty.AsConcreteField0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsAbstract = true
		err = decoder.Decode(&ty.AsAbstractField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *AssetId) Variant() (uint8, error) {
	if ty.IsConcrete {
		return 0, nil
	}
	if ty.IsAbstract {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty AssetId) MarshalJSON() ([]byte, error) {
	if ty.IsConcrete {
		m := map[string]interface{}{"AssetId::Concrete": ty.AsConcreteField0}
		return json.Marshal(m)
	}
	if ty.IsAbstract {
		m := map[string]interface{}{"AssetId::Abstract": ty.AsAbstractField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated XcmV2MultiassetAssetInstance with id=106
type AssetInstance1 struct {
	IsUndefined     bool
	IsIndex         bool
	AsIndexField0   types.UCompact
	IsArray4        bool
	AsArray4Field0  [4]byte
	IsArray8        bool
	AsArray8Field0  [8]byte
	IsArray16       bool
	AsArray16Field0 [16]byte
	IsArray32       bool
	AsArray32Field0 [32]byte
	IsBlob          bool
	AsBlobField0    []byte
}

func (ty AssetInstance1) Encode(encoder scale.Encoder) (err error) {
	if ty.IsUndefined {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsIndex {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsIndexField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsArray4 {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsArray4Field0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsArray8 {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsArray8Field0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsArray16 {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsArray16Field0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsArray32 {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsArray32Field0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBlob {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBlobField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *AssetInstance1) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsUndefined = true
		return
	case 1:
		ty.IsIndex = true
		err = decoder.Decode(&ty.AsIndexField0)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsArray4 = true
		err = decoder.Decode(&ty.AsArray4Field0)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsArray8 = true
		err = decoder.Decode(&ty.AsArray8Field0)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsArray16 = true
		err = decoder.Decode(&ty.AsArray16Field0)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsArray32 = true
		err = decoder.Decode(&ty.AsArray32Field0)
		if err != nil {
			return err
		}
		return
	case 6:
		ty.IsBlob = true
		err = decoder.Decode(&ty.AsBlobField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *AssetInstance1) Variant() (uint8, error) {
	if ty.IsUndefined {
		return 0, nil
	}
	if ty.IsIndex {
		return 1, nil
	}
	if ty.IsArray4 {
		return 2, nil
	}
	if ty.IsArray8 {
		return 3, nil
	}
	if ty.IsArray16 {
		return 4, nil
	}
	if ty.IsArray32 {
		return 5, nil
	}
	if ty.IsBlob {
		return 6, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty AssetInstance1) MarshalJSON() ([]byte, error) {
	if ty.IsUndefined {
		return json.Marshal("AssetInstance1::Undefined")
	}
	if ty.IsIndex {
		m := map[string]interface{}{"AssetInstance1::Index": ty.AsIndexField0}
		return json.Marshal(m)
	}
	if ty.IsArray4 {
		m := map[string]interface{}{"AssetInstance1::Array4": ty.AsArray4Field0}
		return json.Marshal(m)
	}
	if ty.IsArray8 {
		m := map[string]interface{}{"AssetInstance1::Array8": ty.AsArray8Field0}
		return json.Marshal(m)
	}
	if ty.IsArray16 {
		m := map[string]interface{}{"AssetInstance1::Array16": ty.AsArray16Field0}
		return json.Marshal(m)
	}
	if ty.IsArray32 {
		m := map[string]interface{}{"AssetInstance1::Array32": ty.AsArray32Field0}
		return json.Marshal(m)
	}
	if ty.IsBlob {
		m := map[string]interface{}{"AssetInstance1::Blob": ty.AsBlobField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated XcmV2MultiassetFungibility with id=105
type Fungibility1 struct {
	IsFungible          bool
	AsFungibleField0    types.UCompact
	IsNonFungible       bool
	AsNonFungibleField0 *AssetInstance1
}

func (ty Fungibility1) Encode(encoder scale.Encoder) (err error) {
	if ty.IsFungible {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsFungibleField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNonFungible {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNonFungibleField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Fungibility1) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsFungible = true
		err = decoder.Decode(&ty.AsFungibleField0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsNonFungible = true
		var tmp AssetInstance1
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsNonFungibleField0 = &tmp
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Fungibility1) Variant() (uint8, error) {
	if ty.IsFungible {
		return 0, nil
	}
	if ty.IsNonFungible {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Fungibility1) MarshalJSON() ([]byte, error) {
	if ty.IsFungible {
		m := map[string]interface{}{"Fungibility1::Fungible": ty.AsFungibleField0}
		return json.Marshal(m)
	}
	if ty.IsNonFungible {
		m := map[string]interface{}{"Fungibility1::NonFungible": ty.AsNonFungibleField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated xcm_v2_multiasset_MultiAsset with id={{false [96]}}
type MultiAsset struct {
	// Field 0 with TypeId=97
	Id AssetId
	// Field 1 with TypeId=105
	Fun Fungibility1
}

// Generated XcmV3JunctionNetworkId with id=115
type NetworkId2 struct {
	IsByGenesis          bool
	AsByGenesisField0    [32]byte
	IsByFork             bool
	AsByForkBlockNumber0 uint64
	AsByForkBlockHash1   [32]byte
	IsPolkadot           bool
	IsKusama             bool
	IsWestend            bool
	IsRococo             bool
	IsWococo             bool
	IsEthereum           bool
	AsEthereumChainId0   types.UCompact
	IsBitcoinCore        bool
	IsBitcoinCash        bool
	IsPolkadotBulletin   bool
}

func (ty NetworkId2) Encode(encoder scale.Encoder) (err error) {
	if ty.IsByGenesis {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsByGenesisField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsByFork {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsByForkBlockNumber0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsByForkBlockHash1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsPolkadot {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsKusama {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWestend {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsRococo {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWococo {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsEthereum {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsEthereumChainId0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBitcoinCore {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBitcoinCash {
		err = encoder.PushByte(9)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsPolkadotBulletin {
		err = encoder.PushByte(10)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *NetworkId2) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsByGenesis = true
		err = decoder.Decode(&ty.AsByGenesisField0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsByFork = true
		err = decoder.Decode(&ty.AsByForkBlockNumber0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsByForkBlockHash1)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsPolkadot = true
		return
	case 3:
		ty.IsKusama = true
		return
	case 4:
		ty.IsWestend = true
		return
	case 5:
		ty.IsRococo = true
		return
	case 6:
		ty.IsWococo = true
		return
	case 7:
		ty.IsEthereum = true
		err = decoder.Decode(&ty.AsEthereumChainId0)
		if err != nil {
			return err
		}
		return
	case 8:
		ty.IsBitcoinCore = true
		return
	case 9:
		ty.IsBitcoinCash = true
		return
	case 10:
		ty.IsPolkadotBulletin = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *NetworkId2) Variant() (uint8, error) {
	if ty.IsByGenesis {
		return 0, nil
	}
	if ty.IsByFork {
		return 1, nil
	}
	if ty.IsPolkadot {
		return 2, nil
	}
	if ty.IsKusama {
		return 3, nil
	}
	if ty.IsWestend {
		return 4, nil
	}
	if ty.IsRococo {
		return 5, nil
	}
	if ty.IsWococo {
		return 6, nil
	}
	if ty.IsEthereum {
		return 7, nil
	}
	if ty.IsBitcoinCore {
		return 8, nil
	}
	if ty.IsBitcoinCash {
		return 9, nil
	}
	if ty.IsPolkadotBulletin {
		return 10, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty NetworkId2) MarshalJSON() ([]byte, error) {
	if ty.IsByGenesis {
		m := map[string]interface{}{"NetworkId2::ByGenesis": ty.AsByGenesisField0}
		return json.Marshal(m)
	}
	if ty.IsByFork {
		m := map[string]interface{}{"NetworkId2::ByFork": map[string]interface{}{
			"AsByForkBlockHash1":   ty.AsByForkBlockHash1,
			"AsByForkBlockNumber0": ty.AsByForkBlockNumber0,
		}}
		return json.Marshal(m)
	}
	if ty.IsPolkadot {
		return json.Marshal("NetworkId2::Polkadot")
	}
	if ty.IsKusama {
		return json.Marshal("NetworkId2::Kusama")
	}
	if ty.IsWestend {
		return json.Marshal("NetworkId2::Westend")
	}
	if ty.IsRococo {
		return json.Marshal("NetworkId2::Rococo")
	}
	if ty.IsWococo {
		return json.Marshal("NetworkId2::Wococo")
	}
	if ty.IsEthereum {
		m := map[string]interface{}{"NetworkId2::Ethereum": ty.AsEthereumChainId0}
		return json.Marshal(m)
	}
	if ty.IsBitcoinCore {
		return json.Marshal("NetworkId2::BitcoinCore")
	}
	if ty.IsBitcoinCash {
		return json.Marshal("NetworkId2::BitcoinCash")
	}
	if ty.IsPolkadotBulletin {
		return json.Marshal("NetworkId2::PolkadotBulletin")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated Option with id=114
type OptionTNetworkId2 struct {
	IsNone       bool
	IsSome       bool
	AsSomeField0 *NetworkId2
}

func (ty OptionTNetworkId2) Encode(encoder scale.Encoder) (err error) {
	if ty.IsNone {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSome {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSomeField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *OptionTNetworkId2) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsNone = true
		return
	case 1:
		ty.IsSome = true
		var tmp NetworkId2
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsSomeField0 = &tmp
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *OptionTNetworkId2) Variant() (uint8, error) {
	if ty.IsNone {
		return 0, nil
	}
	if ty.IsSome {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty OptionTNetworkId2) MarshalJSON() ([]byte, error) {
	if ty.IsNone {
		return json.Marshal("OptionTNetworkId2::None")
	}
	if ty.IsSome {
		m := map[string]interface{}{"OptionTNetworkId2::Some": ty.AsSomeField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated XcmV3JunctionJunction with id=113
type Junction2 struct {
	IsParachain              bool
	AsParachainField0        types.UCompact
	IsAccountId32            bool
	AsAccountId32Network0    OptionTNetworkId2
	AsAccountId32Id1         [32]byte
	IsAccountIndex64         bool
	AsAccountIndex64Network0 OptionTNetworkId2
	AsAccountIndex64Index1   types.UCompact
	IsAccountKey20           bool
	AsAccountKey20Network0   OptionTNetworkId2
	AsAccountKey20Key1       [20]byte
	IsPalletInstance         bool
	AsPalletInstanceField0   byte
	IsGeneralIndex           bool
	AsGeneralIndexField0     types.UCompact
	IsGeneralKey             bool
	AsGeneralKeyLength0      byte
	AsGeneralKeyData1        [32]byte
	IsOnlyChild              bool
	IsPlurality              bool
	AsPluralityId0           BodyId
	AsPluralityPart1         BodyPart
	IsGlobalConsensus        bool
	AsGlobalConsensusField0  *NetworkId2
}

func (ty Junction2) Encode(encoder scale.Encoder) (err error) {
	if ty.IsParachain {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsParachainField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAccountId32 {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAccountId32Network0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAccountId32Id1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAccountIndex64 {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAccountIndex64Network0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAccountIndex64Index1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAccountKey20 {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAccountKey20Network0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAccountKey20Key1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsPalletInstance {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPalletInstanceField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsGeneralIndex {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsGeneralIndexField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsGeneralKey {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsGeneralKeyLength0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsGeneralKeyData1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsOnlyChild {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsPlurality {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPluralityId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPluralityPart1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsGlobalConsensus {
		err = encoder.PushByte(9)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsGlobalConsensusField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Junction2) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsParachain = true
		err = decoder.Decode(&ty.AsParachainField0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsAccountId32 = true
		err = decoder.Decode(&ty.AsAccountId32Network0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsAccountId32Id1)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsAccountIndex64 = true
		err = decoder.Decode(&ty.AsAccountIndex64Network0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsAccountIndex64Index1)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsAccountKey20 = true
		err = decoder.Decode(&ty.AsAccountKey20Network0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsAccountKey20Key1)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsPalletInstance = true
		err = decoder.Decode(&ty.AsPalletInstanceField0)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsGeneralIndex = true
		err = decoder.Decode(&ty.AsGeneralIndexField0)
		if err != nil {
			return err
		}
		return
	case 6:
		ty.IsGeneralKey = true
		err = decoder.Decode(&ty.AsGeneralKeyLength0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsGeneralKeyData1)
		if err != nil {
			return err
		}
		return
	case 7:
		ty.IsOnlyChild = true
		return
	case 8:
		ty.IsPlurality = true
		err = decoder.Decode(&ty.AsPluralityId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsPluralityPart1)
		if err != nil {
			return err
		}
		return
	case 9:
		ty.IsGlobalConsensus = true
		var tmp NetworkId2
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsGlobalConsensusField0 = &tmp
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Junction2) Variant() (uint8, error) {
	if ty.IsParachain {
		return 0, nil
	}
	if ty.IsAccountId32 {
		return 1, nil
	}
	if ty.IsAccountIndex64 {
		return 2, nil
	}
	if ty.IsAccountKey20 {
		return 3, nil
	}
	if ty.IsPalletInstance {
		return 4, nil
	}
	if ty.IsGeneralIndex {
		return 5, nil
	}
	if ty.IsGeneralKey {
		return 6, nil
	}
	if ty.IsOnlyChild {
		return 7, nil
	}
	if ty.IsPlurality {
		return 8, nil
	}
	if ty.IsGlobalConsensus {
		return 9, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Junction2) MarshalJSON() ([]byte, error) {
	if ty.IsParachain {
		m := map[string]interface{}{"Junction2::Parachain": ty.AsParachainField0}
		return json.Marshal(m)
	}
	if ty.IsAccountId32 {
		m := map[string]interface{}{"Junction2::AccountId32": map[string]interface{}{
			"AsAccountId32Id1":      ty.AsAccountId32Id1,
			"AsAccountId32Network0": ty.AsAccountId32Network0,
		}}
		return json.Marshal(m)
	}
	if ty.IsAccountIndex64 {
		m := map[string]interface{}{"Junction2::AccountIndex64": map[string]interface{}{
			"AsAccountIndex64Index1":   ty.AsAccountIndex64Index1,
			"AsAccountIndex64Network0": ty.AsAccountIndex64Network0,
		}}
		return json.Marshal(m)
	}
	if ty.IsAccountKey20 {
		m := map[string]interface{}{"Junction2::AccountKey20": map[string]interface{}{
			"AsAccountKey20Key1":     ty.AsAccountKey20Key1,
			"AsAccountKey20Network0": ty.AsAccountKey20Network0,
		}}
		return json.Marshal(m)
	}
	if ty.IsPalletInstance {
		m := map[string]interface{}{"Junction2::PalletInstance": ty.AsPalletInstanceField0}
		return json.Marshal(m)
	}
	if ty.IsGeneralIndex {
		m := map[string]interface{}{"Junction2::GeneralIndex": ty.AsGeneralIndexField0}
		return json.Marshal(m)
	}
	if ty.IsGeneralKey {
		m := map[string]interface{}{"Junction2::GeneralKey": map[string]interface{}{
			"AsGeneralKeyData1":   ty.AsGeneralKeyData1,
			"AsGeneralKeyLength0": ty.AsGeneralKeyLength0,
		}}
		return json.Marshal(m)
	}
	if ty.IsOnlyChild {
		return json.Marshal("Junction2::OnlyChild")
	}
	if ty.IsPlurality {
		m := map[string]interface{}{"Junction2::Plurality": map[string]interface{}{
			"AsPluralityId0":   ty.AsPluralityId0,
			"AsPluralityPart1": ty.AsPluralityPart1,
		}}
		return json.Marshal(m)
	}
	if ty.IsGlobalConsensus {
		m := map[string]interface{}{"Junction2::GlobalConsensus": ty.AsGlobalConsensusField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated XcmV3JunctionsJunctions with id=112
type Junctions2 struct {
	IsHere        bool
	IsX1          bool
	AsX1Field0    *Junction2
	IsX2          bool
	AsX2Junction0 Junction2
	AsX2Junction1 Junction2
	IsX3          bool
	AsX3Junction0 Junction2
	AsX3Junction1 Junction2
	AsX3Junction2 Junction2
	IsX4          bool
	AsX4Junction0 Junction2
	AsX4Junction1 Junction2
	AsX4Junction2 Junction2
	AsX4Junction3 Junction2
	IsX5          bool
	AsX5Junction0 Junction2
	AsX5Junction1 Junction2
	AsX5Junction2 Junction2
	AsX5Junction3 Junction2
	AsX5Junction4 Junction2
	IsX6          bool
	AsX6Junction0 Junction2
	AsX6Junction1 Junction2
	AsX6Junction2 Junction2
	AsX6Junction3 Junction2
	AsX6Junction4 Junction2
	AsX6Junction5 Junction2
	IsX7          bool
	AsX7Junction0 Junction2
	AsX7Junction1 Junction2
	AsX7Junction2 Junction2
	AsX7Junction3 Junction2
	AsX7Junction4 Junction2
	AsX7Junction5 Junction2
	AsX7Junction6 Junction2
	IsX8          bool
	AsX8Junction0 Junction2
	AsX8Junction1 Junction2
	AsX8Junction2 Junction2
	AsX8Junction3 Junction2
	AsX8Junction4 Junction2
	AsX8Junction5 Junction2
	AsX8Junction6 Junction2
	AsX8Junction7 Junction2
}

func (ty Junctions2) Encode(encoder scale.Encoder) (err error) {
	if ty.IsHere {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsX1 {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX1Field0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsX2 {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX2Junction0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX2Junction1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsX3 {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX3Junction0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX3Junction1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX3Junction2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsX4 {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX4Junction0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX4Junction1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX4Junction2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX4Junction3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsX5 {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX5Junction0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX5Junction1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX5Junction2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX5Junction3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX5Junction4)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsX6 {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX6Junction0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX6Junction1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX6Junction2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX6Junction3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX6Junction4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX6Junction5)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsX7 {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX7Junction0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX7Junction1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX7Junction2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX7Junction3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX7Junction4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX7Junction5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX7Junction6)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsX8 {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX8Junction0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX8Junction1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX8Junction2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX8Junction3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX8Junction4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX8Junction5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX8Junction6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsX8Junction7)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Junctions2) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsHere = true
		return
	case 1:
		ty.IsX1 = true
		var tmp Junction2
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsX1Field0 = &tmp
		return
	case 2:
		ty.IsX2 = true
		err = decoder.Decode(&ty.AsX2Junction0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX2Junction1)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsX3 = true
		err = decoder.Decode(&ty.AsX3Junction0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX3Junction1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX3Junction2)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsX4 = true
		err = decoder.Decode(&ty.AsX4Junction0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX4Junction1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX4Junction2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX4Junction3)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsX5 = true
		err = decoder.Decode(&ty.AsX5Junction0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX5Junction1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX5Junction2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX5Junction3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX5Junction4)
		if err != nil {
			return err
		}
		return
	case 6:
		ty.IsX6 = true
		err = decoder.Decode(&ty.AsX6Junction0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX6Junction1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX6Junction2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX6Junction3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX6Junction4)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX6Junction5)
		if err != nil {
			return err
		}
		return
	case 7:
		ty.IsX7 = true
		err = decoder.Decode(&ty.AsX7Junction0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX7Junction1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX7Junction2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX7Junction3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX7Junction4)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX7Junction5)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX7Junction6)
		if err != nil {
			return err
		}
		return
	case 8:
		ty.IsX8 = true
		err = decoder.Decode(&ty.AsX8Junction0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX8Junction1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX8Junction2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX8Junction3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX8Junction4)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX8Junction5)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX8Junction6)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsX8Junction7)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Junctions2) Variant() (uint8, error) {
	if ty.IsHere {
		return 0, nil
	}
	if ty.IsX1 {
		return 1, nil
	}
	if ty.IsX2 {
		return 2, nil
	}
	if ty.IsX3 {
		return 3, nil
	}
	if ty.IsX4 {
		return 4, nil
	}
	if ty.IsX5 {
		return 5, nil
	}
	if ty.IsX6 {
		return 6, nil
	}
	if ty.IsX7 {
		return 7, nil
	}
	if ty.IsX8 {
		return 8, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Junctions2) MarshalJSON() ([]byte, error) {
	if ty.IsHere {
		return json.Marshal("Junctions2::Here")
	}
	if ty.IsX1 {
		m := map[string]interface{}{"Junctions2::X1": ty.AsX1Field0}
		return json.Marshal(m)
	}
	if ty.IsX2 {
		m := map[string]interface{}{"Junctions2::X2": map[string]interface{}{
			"AsX2Junction0": ty.AsX2Junction0,
			"AsX2Junction1": ty.AsX2Junction1,
		}}
		return json.Marshal(m)
	}
	if ty.IsX3 {
		m := map[string]interface{}{"Junctions2::X3": map[string]interface{}{
			"AsX3Junction0": ty.AsX3Junction0,
			"AsX3Junction1": ty.AsX3Junction1,
			"AsX3Junction2": ty.AsX3Junction2,
		}}
		return json.Marshal(m)
	}
	if ty.IsX4 {
		m := map[string]interface{}{"Junctions2::X4": map[string]interface{}{
			"AsX4Junction0": ty.AsX4Junction0,
			"AsX4Junction1": ty.AsX4Junction1,
			"AsX4Junction2": ty.AsX4Junction2,
			"AsX4Junction3": ty.AsX4Junction3,
		}}
		return json.Marshal(m)
	}
	if ty.IsX5 {
		m := map[string]interface{}{"Junctions2::X5": map[string]interface{}{
			"AsX5Junction0": ty.AsX5Junction0,
			"AsX5Junction1": ty.AsX5Junction1,
			"AsX5Junction2": ty.AsX5Junction2,
			"AsX5Junction3": ty.AsX5Junction3,
			"AsX5Junction4": ty.AsX5Junction4,
		}}
		return json.Marshal(m)
	}
	if ty.IsX6 {
		m := map[string]interface{}{"Junctions2::X6": map[string]interface{}{
			"AsX6Junction0": ty.AsX6Junction0,
			"AsX6Junction1": ty.AsX6Junction1,
			"AsX6Junction2": ty.AsX6Junction2,
			"AsX6Junction3": ty.AsX6Junction3,
			"AsX6Junction4": ty.AsX6Junction4,
			"AsX6Junction5": ty.AsX6Junction5,
		}}
		return json.Marshal(m)
	}
	if ty.IsX7 {
		m := map[string]interface{}{"Junctions2::X7": map[string]interface{}{
			"AsX7Junction0": ty.AsX7Junction0,
			"AsX7Junction1": ty.AsX7Junction1,
			"AsX7Junction2": ty.AsX7Junction2,
			"AsX7Junction3": ty.AsX7Junction3,
			"AsX7Junction4": ty.AsX7Junction4,
			"AsX7Junction5": ty.AsX7Junction5,
			"AsX7Junction6": ty.AsX7Junction6,
		}}
		return json.Marshal(m)
	}
	if ty.IsX8 {
		m := map[string]interface{}{"Junctions2::X8": map[string]interface{}{
			"AsX8Junction0": ty.AsX8Junction0,
			"AsX8Junction1": ty.AsX8Junction1,
			"AsX8Junction2": ty.AsX8Junction2,
			"AsX8Junction3": ty.AsX8Junction3,
			"AsX8Junction4": ty.AsX8Junction4,
			"AsX8Junction5": ty.AsX8Junction5,
			"AsX8Junction6": ty.AsX8Junction6,
			"AsX8Junction7": ty.AsX8Junction7,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated staging_xcm_v3_multilocation_MultiLocation with id={{false [111]}}
type MultiLocation1 struct {
	// Field 0 with TypeId=2
	Parents byte
	// Field 1 with TypeId=112
	Interior Junctions2
}

// Generated XcmV3MultiassetAssetId with id=110
type AssetId1 struct {
	IsConcrete       bool
	AsConcreteField0 MultiLocation1
	IsAbstract       bool
	AsAbstractField0 [32]byte
}

func (ty AssetId1) Encode(encoder scale.Encoder) (err error) {
	if ty.IsConcrete {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsConcreteField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAbstract {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAbstractField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *AssetId1) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsConcrete = true
		err = decoder.Decode(&ty.AsConcreteField0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsAbstract = true
		err = decoder.Decode(&ty.AsAbstractField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *AssetId1) Variant() (uint8, error) {
	if ty.IsConcrete {
		return 0, nil
	}
	if ty.IsAbstract {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty AssetId1) MarshalJSON() ([]byte, error) {
	if ty.IsConcrete {
		m := map[string]interface{}{"AssetId1::Concrete": ty.AsConcreteField0}
		return json.Marshal(m)
	}
	if ty.IsAbstract {
		m := map[string]interface{}{"AssetId1::Abstract": ty.AsAbstractField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated XcmV3MultiassetAssetInstance with id=117
type AssetInstance2 struct {
	IsUndefined     bool
	IsIndex         bool
	AsIndexField0   types.UCompact
	IsArray4        bool
	AsArray4Field0  [4]byte
	IsArray8        bool
	AsArray8Field0  [8]byte
	IsArray16       bool
	AsArray16Field0 [16]byte
	IsArray32       bool
	AsArray32Field0 [32]byte
}

func (ty AssetInstance2) Encode(encoder scale.Encoder) (err error) {
	if ty.IsUndefined {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsIndex {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsIndexField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsArray4 {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsArray4Field0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsArray8 {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsArray8Field0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsArray16 {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsArray16Field0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsArray32 {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsArray32Field0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *AssetInstance2) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsUndefined = true
		return
	case 1:
		ty.IsIndex = true
		err = decoder.Decode(&ty.AsIndexField0)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsArray4 = true
		err = decoder.Decode(&ty.AsArray4Field0)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsArray8 = true
		err = decoder.Decode(&ty.AsArray8Field0)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsArray16 = true
		err = decoder.Decode(&ty.AsArray16Field0)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsArray32 = true
		err = decoder.Decode(&ty.AsArray32Field0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *AssetInstance2) Variant() (uint8, error) {
	if ty.IsUndefined {
		return 0, nil
	}
	if ty.IsIndex {
		return 1, nil
	}
	if ty.IsArray4 {
		return 2, nil
	}
	if ty.IsArray8 {
		return 3, nil
	}
	if ty.IsArray16 {
		return 4, nil
	}
	if ty.IsArray32 {
		return 5, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty AssetInstance2) MarshalJSON() ([]byte, error) {
	if ty.IsUndefined {
		return json.Marshal("AssetInstance2::Undefined")
	}
	if ty.IsIndex {
		m := map[string]interface{}{"AssetInstance2::Index": ty.AsIndexField0}
		return json.Marshal(m)
	}
	if ty.IsArray4 {
		m := map[string]interface{}{"AssetInstance2::Array4": ty.AsArray4Field0}
		return json.Marshal(m)
	}
	if ty.IsArray8 {
		m := map[string]interface{}{"AssetInstance2::Array8": ty.AsArray8Field0}
		return json.Marshal(m)
	}
	if ty.IsArray16 {
		m := map[string]interface{}{"AssetInstance2::Array16": ty.AsArray16Field0}
		return json.Marshal(m)
	}
	if ty.IsArray32 {
		m := map[string]interface{}{"AssetInstance2::Array32": ty.AsArray32Field0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated XcmV3MultiassetFungibility with id=116
type Fungibility2 struct {
	IsFungible          bool
	AsFungibleField0    types.UCompact
	IsNonFungible       bool
	AsNonFungibleField0 *AssetInstance2
}

func (ty Fungibility2) Encode(encoder scale.Encoder) (err error) {
	if ty.IsFungible {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsFungibleField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNonFungible {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNonFungibleField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Fungibility2) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsFungible = true
		err = decoder.Decode(&ty.AsFungibleField0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsNonFungible = true
		var tmp AssetInstance2
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsNonFungibleField0 = &tmp
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Fungibility2) Variant() (uint8, error) {
	if ty.IsFungible {
		return 0, nil
	}
	if ty.IsNonFungible {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Fungibility2) MarshalJSON() ([]byte, error) {
	if ty.IsFungible {
		m := map[string]interface{}{"Fungibility2::Fungible": ty.AsFungibleField0}
		return json.Marshal(m)
	}
	if ty.IsNonFungible {
		m := map[string]interface{}{"Fungibility2::NonFungible": ty.AsNonFungibleField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated xcm_v3_multiasset_MultiAsset with id={{false [109]}}
type MultiAsset1 struct {
	// Field 0 with TypeId=110
	Id AssetId1
	// Field 1 with TypeId=116
	Fun Fungibility2
}

// Generated XcmVersionedAssets with id=93
type VersionedAssets struct {
	IsV2       bool
	AsV2Field0 []MultiAsset
	IsV3       bool
	AsV3Field0 []MultiAsset1
	IsV4       bool
	AsV4Field0 []Asset
}

func (ty VersionedAssets) Encode(encoder scale.Encoder) (err error) {
	if ty.IsV2 {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsV2Field0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsV3 {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsV3Field0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsV4 {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsV4Field0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *VersionedAssets) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 1:
		ty.IsV2 = true
		err = decoder.Decode(&ty.AsV2Field0)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsV3 = true
		err = decoder.Decode(&ty.AsV3Field0)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsV4 = true
		err = decoder.Decode(&ty.AsV4Field0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *VersionedAssets) Variant() (uint8, error) {
	if ty.IsV2 {
		return 1, nil
	}
	if ty.IsV3 {
		return 3, nil
	}
	if ty.IsV4 {
		return 4, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty VersionedAssets) MarshalJSON() ([]byte, error) {
	if ty.IsV2 {
		m := map[string]interface{}{"VersionedAssets::V2": ty.AsV2Field0}
		return json.Marshal(m)
	}
	if ty.IsV3 {
		m := map[string]interface{}{"VersionedAssets::V3": ty.AsV3Field0}
		return json.Marshal(m)
	}
	if ty.IsV4 {
		m := map[string]interface{}{"VersionedAssets::V4": ty.AsV4Field0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated XcmVersionedLocation with id=118
type VersionedLocation struct {
	IsV2       bool
	AsV2Field0 MultiLocation
	IsV3       bool
	AsV3Field0 MultiLocation1
	IsV4       bool
	AsV4Field0 Location
}

func (ty VersionedLocation) Encode(encoder scale.Encoder) (err error) {
	if ty.IsV2 {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsV2Field0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsV3 {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsV3Field0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsV4 {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsV4Field0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *VersionedLocation) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 1:
		ty.IsV2 = true
		err = decoder.Decode(&ty.AsV2Field0)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsV3 = true
		err = decoder.Decode(&ty.AsV3Field0)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsV4 = true
		err = decoder.Decode(&ty.AsV4Field0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *VersionedLocation) Variant() (uint8, error) {
	if ty.IsV2 {
		return 1, nil
	}
	if ty.IsV3 {
		return 3, nil
	}
	if ty.IsV4 {
		return 4, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty VersionedLocation) MarshalJSON() ([]byte, error) {
	if ty.IsV2 {
		m := map[string]interface{}{"VersionedLocation::V2": ty.AsV2Field0}
		return json.Marshal(m)
	}
	if ty.IsV3 {
		m := map[string]interface{}{"VersionedLocation::V3": ty.AsV3Field0}
		return json.Marshal(m)
	}
	if ty.IsV4 {
		m := map[string]interface{}{"VersionedLocation::V4": ty.AsV4Field0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated PalletXcmPalletEvent with id=44
type PalletXcmPalletEvent struct {
	IsAttempted                            bool
	AsAttemptedOutcome0                    *Outcome
	IsSent                                 bool
	AsSentOrigin0                          Location
	AsSentDestination1                     Location
	AsSentMessage2                         []Instruction
	AsSentMessageId3                       [32]byte
	IsUnexpectedResponse                   bool
	AsUnexpectedResponseOrigin0            Location
	AsUnexpectedResponseQueryId1           uint64
	IsResponseReady                        bool
	AsResponseReadyQueryId0                uint64
	AsResponseReadyResponse1               Response
	IsNotified                             bool
	AsNotifiedQueryId0                     uint64
	AsNotifiedPalletIndex1                 byte
	AsNotifiedCallIndex2                   byte
	IsNotifyOverweight                     bool
	AsNotifyOverweightQueryId0             uint64
	AsNotifyOverweightPalletIndex1         byte
	AsNotifyOverweightCallIndex2           byte
	AsNotifyOverweightActualWeight3        Weight
	AsNotifyOverweightMaxBudgetedWeight4   Weight
	IsNotifyDispatchError                  bool
	AsNotifyDispatchErrorQueryId0          uint64
	AsNotifyDispatchErrorPalletIndex1      byte
	AsNotifyDispatchErrorCallIndex2        byte
	IsNotifyDecodeFailed                   bool
	AsNotifyDecodeFailedQueryId0           uint64
	AsNotifyDecodeFailedPalletIndex1       byte
	AsNotifyDecodeFailedCallIndex2         byte
	IsInvalidResponder                     bool
	AsInvalidResponderOrigin0              Location
	AsInvalidResponderQueryId1             uint64
	AsInvalidResponderExpectedLocation2    OptionTLocation
	IsInvalidResponderVersion              bool
	AsInvalidResponderVersionOrigin0       Location
	AsInvalidResponderVersionQueryId1      uint64
	IsResponseTaken                        bool
	AsResponseTakenQueryId0                uint64
	IsAssetsTrapped                        bool
	AsAssetsTrappedHash0                   [32]byte
	AsAssetsTrappedOrigin1                 Location
	AsAssetsTrappedAssets2                 VersionedAssets
	IsVersionChangeNotified                bool
	AsVersionChangeNotifiedDestination0    Location
	AsVersionChangeNotifiedResult1         uint32
	AsVersionChangeNotifiedCost2           []Asset
	AsVersionChangeNotifiedMessageId3      [32]byte
	IsSupportedVersionChanged              bool
	AsSupportedVersionChangedLocation0     Location
	AsSupportedVersionChangedVersion1      uint32
	IsNotifyTargetSendFail                 bool
	AsNotifyTargetSendFailLocation0        Location
	AsNotifyTargetSendFailQueryId1         uint64
	AsNotifyTargetSendFailError2           XcmV3TraitsError
	IsNotifyTargetMigrationFail            bool
	AsNotifyTargetMigrationFailLocation0   VersionedLocation
	AsNotifyTargetMigrationFailQueryId1    uint64
	IsInvalidQuerierVersion                bool
	AsInvalidQuerierVersionOrigin0         Location
	AsInvalidQuerierVersionQueryId1        uint64
	IsInvalidQuerier                       bool
	AsInvalidQuerierOrigin0                Location
	AsInvalidQuerierQueryId1               uint64
	AsInvalidQuerierExpectedQuerier2       Location
	AsInvalidQuerierMaybeActualQuerier3    OptionTLocation
	IsVersionNotifyStarted                 bool
	AsVersionNotifyStartedDestination0     Location
	AsVersionNotifyStartedCost1            []Asset
	AsVersionNotifyStartedMessageId2       [32]byte
	IsVersionNotifyRequested               bool
	AsVersionNotifyRequestedDestination0   Location
	AsVersionNotifyRequestedCost1          []Asset
	AsVersionNotifyRequestedMessageId2     [32]byte
	IsVersionNotifyUnrequested             bool
	AsVersionNotifyUnrequestedDestination0 Location
	AsVersionNotifyUnrequestedCost1        []Asset
	AsVersionNotifyUnrequestedMessageId2   [32]byte
	IsFeesPaid                             bool
	AsFeesPaidPaying0                      Location
	AsFeesPaidFees1                        []Asset
	IsAssetsClaimed                        bool
	AsAssetsClaimedHash0                   [32]byte
	AsAssetsClaimedOrigin1                 Location
	AsAssetsClaimedAssets2                 VersionedAssets
	IsVersionMigrationFinished             bool
	AsVersionMigrationFinishedVersion0     uint32
}

func (ty PalletXcmPalletEvent) Encode(encoder scale.Encoder) (err error) {
	if ty.IsAttempted {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAttemptedOutcome0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSent {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSentOrigin0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSentDestination1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSentMessage2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSentMessageId3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnexpectedResponse {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnexpectedResponseOrigin0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnexpectedResponseQueryId1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsResponseReady {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsResponseReadyQueryId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsResponseReadyResponse1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNotified {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNotifiedQueryId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNotifiedPalletIndex1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNotifiedCallIndex2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNotifyOverweight {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNotifyOverweightQueryId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNotifyOverweightPalletIndex1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNotifyOverweightCallIndex2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNotifyOverweightActualWeight3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNotifyOverweightMaxBudgetedWeight4)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNotifyDispatchError {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNotifyDispatchErrorQueryId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNotifyDispatchErrorPalletIndex1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNotifyDispatchErrorCallIndex2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNotifyDecodeFailed {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNotifyDecodeFailedQueryId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNotifyDecodeFailedPalletIndex1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNotifyDecodeFailedCallIndex2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsInvalidResponder {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInvalidResponderOrigin0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInvalidResponderQueryId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInvalidResponderExpectedLocation2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsInvalidResponderVersion {
		err = encoder.PushByte(9)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInvalidResponderVersionOrigin0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInvalidResponderVersionQueryId1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsResponseTaken {
		err = encoder.PushByte(10)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsResponseTakenQueryId0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAssetsTrapped {
		err = encoder.PushByte(11)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAssetsTrappedHash0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAssetsTrappedOrigin1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAssetsTrappedAssets2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsVersionChangeNotified {
		err = encoder.PushByte(12)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsVersionChangeNotifiedDestination0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsVersionChangeNotifiedResult1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsVersionChangeNotifiedCost2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsVersionChangeNotifiedMessageId3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSupportedVersionChanged {
		err = encoder.PushByte(13)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSupportedVersionChangedLocation0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSupportedVersionChangedVersion1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNotifyTargetSendFail {
		err = encoder.PushByte(14)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNotifyTargetSendFailLocation0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNotifyTargetSendFailQueryId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNotifyTargetSendFailError2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNotifyTargetMigrationFail {
		err = encoder.PushByte(15)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNotifyTargetMigrationFailLocation0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNotifyTargetMigrationFailQueryId1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsInvalidQuerierVersion {
		err = encoder.PushByte(16)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInvalidQuerierVersionOrigin0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInvalidQuerierVersionQueryId1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsInvalidQuerier {
		err = encoder.PushByte(17)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInvalidQuerierOrigin0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInvalidQuerierQueryId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInvalidQuerierExpectedQuerier2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInvalidQuerierMaybeActualQuerier3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsVersionNotifyStarted {
		err = encoder.PushByte(18)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsVersionNotifyStartedDestination0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsVersionNotifyStartedCost1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsVersionNotifyStartedMessageId2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsVersionNotifyRequested {
		err = encoder.PushByte(19)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsVersionNotifyRequestedDestination0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsVersionNotifyRequestedCost1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsVersionNotifyRequestedMessageId2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsVersionNotifyUnrequested {
		err = encoder.PushByte(20)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsVersionNotifyUnrequestedDestination0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsVersionNotifyUnrequestedCost1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsVersionNotifyUnrequestedMessageId2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsFeesPaid {
		err = encoder.PushByte(21)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsFeesPaidPaying0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsFeesPaidFees1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAssetsClaimed {
		err = encoder.PushByte(22)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAssetsClaimedHash0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAssetsClaimedOrigin1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAssetsClaimedAssets2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsVersionMigrationFinished {
		err = encoder.PushByte(23)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsVersionMigrationFinishedVersion0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *PalletXcmPalletEvent) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsAttempted = true
		var tmp Outcome
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsAttemptedOutcome0 = &tmp
		return
	case 1:
		ty.IsSent = true
		err = decoder.Decode(&ty.AsSentOrigin0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSentDestination1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSentMessage2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSentMessageId3)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsUnexpectedResponse = true
		err = decoder.Decode(&ty.AsUnexpectedResponseOrigin0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUnexpectedResponseQueryId1)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsResponseReady = true
		err = decoder.Decode(&ty.AsResponseReadyQueryId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsResponseReadyResponse1)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsNotified = true
		err = decoder.Decode(&ty.AsNotifiedQueryId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsNotifiedPalletIndex1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsNotifiedCallIndex2)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsNotifyOverweight = true
		err = decoder.Decode(&ty.AsNotifyOverweightQueryId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsNotifyOverweightPalletIndex1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsNotifyOverweightCallIndex2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsNotifyOverweightActualWeight3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsNotifyOverweightMaxBudgetedWeight4)
		if err != nil {
			return err
		}
		return
	case 6:
		ty.IsNotifyDispatchError = true
		err = decoder.Decode(&ty.AsNotifyDispatchErrorQueryId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsNotifyDispatchErrorPalletIndex1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsNotifyDispatchErrorCallIndex2)
		if err != nil {
			return err
		}
		return
	case 7:
		ty.IsNotifyDecodeFailed = true
		err = decoder.Decode(&ty.AsNotifyDecodeFailedQueryId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsNotifyDecodeFailedPalletIndex1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsNotifyDecodeFailedCallIndex2)
		if err != nil {
			return err
		}
		return
	case 8:
		ty.IsInvalidResponder = true
		err = decoder.Decode(&ty.AsInvalidResponderOrigin0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInvalidResponderQueryId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInvalidResponderExpectedLocation2)
		if err != nil {
			return err
		}
		return
	case 9:
		ty.IsInvalidResponderVersion = true
		err = decoder.Decode(&ty.AsInvalidResponderVersionOrigin0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInvalidResponderVersionQueryId1)
		if err != nil {
			return err
		}
		return
	case 10:
		ty.IsResponseTaken = true
		err = decoder.Decode(&ty.AsResponseTakenQueryId0)
		if err != nil {
			return err
		}
		return
	case 11:
		ty.IsAssetsTrapped = true
		err = decoder.Decode(&ty.AsAssetsTrappedHash0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsAssetsTrappedOrigin1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsAssetsTrappedAssets2)
		if err != nil {
			return err
		}
		return
	case 12:
		ty.IsVersionChangeNotified = true
		err = decoder.Decode(&ty.AsVersionChangeNotifiedDestination0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsVersionChangeNotifiedResult1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsVersionChangeNotifiedCost2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsVersionChangeNotifiedMessageId3)
		if err != nil {
			return err
		}
		return
	case 13:
		ty.IsSupportedVersionChanged = true
		err = decoder.Decode(&ty.AsSupportedVersionChangedLocation0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSupportedVersionChangedVersion1)
		if err != nil {
			return err
		}
		return
	case 14:
		ty.IsNotifyTargetSendFail = true
		err = decoder.Decode(&ty.AsNotifyTargetSendFailLocation0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsNotifyTargetSendFailQueryId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsNotifyTargetSendFailError2)
		if err != nil {
			return err
		}
		return
	case 15:
		ty.IsNotifyTargetMigrationFail = true
		err = decoder.Decode(&ty.AsNotifyTargetMigrationFailLocation0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsNotifyTargetMigrationFailQueryId1)
		if err != nil {
			return err
		}
		return
	case 16:
		ty.IsInvalidQuerierVersion = true
		err = decoder.Decode(&ty.AsInvalidQuerierVersionOrigin0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInvalidQuerierVersionQueryId1)
		if err != nil {
			return err
		}
		return
	case 17:
		ty.IsInvalidQuerier = true
		err = decoder.Decode(&ty.AsInvalidQuerierOrigin0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInvalidQuerierQueryId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInvalidQuerierExpectedQuerier2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInvalidQuerierMaybeActualQuerier3)
		if err != nil {
			return err
		}
		return
	case 18:
		ty.IsVersionNotifyStarted = true
		err = decoder.Decode(&ty.AsVersionNotifyStartedDestination0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsVersionNotifyStartedCost1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsVersionNotifyStartedMessageId2)
		if err != nil {
			return err
		}
		return
	case 19:
		ty.IsVersionNotifyRequested = true
		err = decoder.Decode(&ty.AsVersionNotifyRequestedDestination0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsVersionNotifyRequestedCost1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsVersionNotifyRequestedMessageId2)
		if err != nil {
			return err
		}
		return
	case 20:
		ty.IsVersionNotifyUnrequested = true
		err = decoder.Decode(&ty.AsVersionNotifyUnrequestedDestination0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsVersionNotifyUnrequestedCost1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsVersionNotifyUnrequestedMessageId2)
		if err != nil {
			return err
		}
		return
	case 21:
		ty.IsFeesPaid = true
		err = decoder.Decode(&ty.AsFeesPaidPaying0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsFeesPaidFees1)
		if err != nil {
			return err
		}
		return
	case 22:
		ty.IsAssetsClaimed = true
		err = decoder.Decode(&ty.AsAssetsClaimedHash0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsAssetsClaimedOrigin1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsAssetsClaimedAssets2)
		if err != nil {
			return err
		}
		return
	case 23:
		ty.IsVersionMigrationFinished = true
		err = decoder.Decode(&ty.AsVersionMigrationFinishedVersion0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *PalletXcmPalletEvent) Variant() (uint8, error) {
	if ty.IsAttempted {
		return 0, nil
	}
	if ty.IsSent {
		return 1, nil
	}
	if ty.IsUnexpectedResponse {
		return 2, nil
	}
	if ty.IsResponseReady {
		return 3, nil
	}
	if ty.IsNotified {
		return 4, nil
	}
	if ty.IsNotifyOverweight {
		return 5, nil
	}
	if ty.IsNotifyDispatchError {
		return 6, nil
	}
	if ty.IsNotifyDecodeFailed {
		return 7, nil
	}
	if ty.IsInvalidResponder {
		return 8, nil
	}
	if ty.IsInvalidResponderVersion {
		return 9, nil
	}
	if ty.IsResponseTaken {
		return 10, nil
	}
	if ty.IsAssetsTrapped {
		return 11, nil
	}
	if ty.IsVersionChangeNotified {
		return 12, nil
	}
	if ty.IsSupportedVersionChanged {
		return 13, nil
	}
	if ty.IsNotifyTargetSendFail {
		return 14, nil
	}
	if ty.IsNotifyTargetMigrationFail {
		return 15, nil
	}
	if ty.IsInvalidQuerierVersion {
		return 16, nil
	}
	if ty.IsInvalidQuerier {
		return 17, nil
	}
	if ty.IsVersionNotifyStarted {
		return 18, nil
	}
	if ty.IsVersionNotifyRequested {
		return 19, nil
	}
	if ty.IsVersionNotifyUnrequested {
		return 20, nil
	}
	if ty.IsFeesPaid {
		return 21, nil
	}
	if ty.IsAssetsClaimed {
		return 22, nil
	}
	if ty.IsVersionMigrationFinished {
		return 23, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty PalletXcmPalletEvent) MarshalJSON() ([]byte, error) {
	if ty.IsAttempted {
		m := map[string]interface{}{"PalletXcmPalletEvent::Attempted": ty.AsAttemptedOutcome0}
		return json.Marshal(m)
	}
	if ty.IsSent {
		m := map[string]interface{}{"PalletXcmPalletEvent::Sent": map[string]interface{}{
			"AsSentDestination1": ty.AsSentDestination1,
			"AsSentMessage2":     ty.AsSentMessage2,
			"AsSentMessageId3":   ty.AsSentMessageId3,
			"AsSentOrigin0":      ty.AsSentOrigin0,
		}}
		return json.Marshal(m)
	}
	if ty.IsUnexpectedResponse {
		m := map[string]interface{}{"PalletXcmPalletEvent::UnexpectedResponse": map[string]interface{}{
			"AsUnexpectedResponseOrigin0":  ty.AsUnexpectedResponseOrigin0,
			"AsUnexpectedResponseQueryId1": ty.AsUnexpectedResponseQueryId1,
		}}
		return json.Marshal(m)
	}
	if ty.IsResponseReady {
		m := map[string]interface{}{"PalletXcmPalletEvent::ResponseReady": map[string]interface{}{
			"AsResponseReadyQueryId0":  ty.AsResponseReadyQueryId0,
			"AsResponseReadyResponse1": ty.AsResponseReadyResponse1,
		}}
		return json.Marshal(m)
	}
	if ty.IsNotified {
		m := map[string]interface{}{"PalletXcmPalletEvent::Notified": map[string]interface{}{
			"AsNotifiedCallIndex2":   ty.AsNotifiedCallIndex2,
			"AsNotifiedPalletIndex1": ty.AsNotifiedPalletIndex1,
			"AsNotifiedQueryId0":     ty.AsNotifiedQueryId0,
		}}
		return json.Marshal(m)
	}
	if ty.IsNotifyOverweight {
		m := map[string]interface{}{"PalletXcmPalletEvent::NotifyOverweight": map[string]interface{}{
			"AsNotifyOverweightActualWeight3":      ty.AsNotifyOverweightActualWeight3,
			"AsNotifyOverweightCallIndex2":         ty.AsNotifyOverweightCallIndex2,
			"AsNotifyOverweightMaxBudgetedWeight4": ty.AsNotifyOverweightMaxBudgetedWeight4,
			"AsNotifyOverweightPalletIndex1":       ty.AsNotifyOverweightPalletIndex1,
			"AsNotifyOverweightQueryId0":           ty.AsNotifyOverweightQueryId0,
		}}
		return json.Marshal(m)
	}
	if ty.IsNotifyDispatchError {
		m := map[string]interface{}{"PalletXcmPalletEvent::NotifyDispatchError": map[string]interface{}{
			"AsNotifyDispatchErrorCallIndex2":   ty.AsNotifyDispatchErrorCallIndex2,
			"AsNotifyDispatchErrorPalletIndex1": ty.AsNotifyDispatchErrorPalletIndex1,
			"AsNotifyDispatchErrorQueryId0":     ty.AsNotifyDispatchErrorQueryId0,
		}}
		return json.Marshal(m)
	}
	if ty.IsNotifyDecodeFailed {
		m := map[string]interface{}{"PalletXcmPalletEvent::NotifyDecodeFailed": map[string]interface{}{
			"AsNotifyDecodeFailedCallIndex2":   ty.AsNotifyDecodeFailedCallIndex2,
			"AsNotifyDecodeFailedPalletIndex1": ty.AsNotifyDecodeFailedPalletIndex1,
			"AsNotifyDecodeFailedQueryId0":     ty.AsNotifyDecodeFailedQueryId0,
		}}
		return json.Marshal(m)
	}
	if ty.IsInvalidResponder {
		m := map[string]interface{}{"PalletXcmPalletEvent::InvalidResponder": map[string]interface{}{
			"AsInvalidResponderExpectedLocation2": ty.AsInvalidResponderExpectedLocation2,
			"AsInvalidResponderOrigin0":           ty.AsInvalidResponderOrigin0,
			"AsInvalidResponderQueryId1":          ty.AsInvalidResponderQueryId1,
		}}
		return json.Marshal(m)
	}
	if ty.IsInvalidResponderVersion {
		m := map[string]interface{}{"PalletXcmPalletEvent::InvalidResponderVersion": map[string]interface{}{
			"AsInvalidResponderVersionOrigin0":  ty.AsInvalidResponderVersionOrigin0,
			"AsInvalidResponderVersionQueryId1": ty.AsInvalidResponderVersionQueryId1,
		}}
		return json.Marshal(m)
	}
	if ty.IsResponseTaken {
		m := map[string]interface{}{"PalletXcmPalletEvent::ResponseTaken": ty.AsResponseTakenQueryId0}
		return json.Marshal(m)
	}
	if ty.IsAssetsTrapped {
		m := map[string]interface{}{"PalletXcmPalletEvent::AssetsTrapped": map[string]interface{}{
			"AsAssetsTrappedAssets2": ty.AsAssetsTrappedAssets2,
			"AsAssetsTrappedHash0":   ty.AsAssetsTrappedHash0,
			"AsAssetsTrappedOrigin1": ty.AsAssetsTrappedOrigin1,
		}}
		return json.Marshal(m)
	}
	if ty.IsVersionChangeNotified {
		m := map[string]interface{}{"PalletXcmPalletEvent::VersionChangeNotified": map[string]interface{}{
			"AsVersionChangeNotifiedCost2":        ty.AsVersionChangeNotifiedCost2,
			"AsVersionChangeNotifiedDestination0": ty.AsVersionChangeNotifiedDestination0,
			"AsVersionChangeNotifiedMessageId3":   ty.AsVersionChangeNotifiedMessageId3,
			"AsVersionChangeNotifiedResult1":      ty.AsVersionChangeNotifiedResult1,
		}}
		return json.Marshal(m)
	}
	if ty.IsSupportedVersionChanged {
		m := map[string]interface{}{"PalletXcmPalletEvent::SupportedVersionChanged": map[string]interface{}{
			"AsSupportedVersionChangedLocation0": ty.AsSupportedVersionChangedLocation0,
			"AsSupportedVersionChangedVersion1":  ty.AsSupportedVersionChangedVersion1,
		}}
		return json.Marshal(m)
	}
	if ty.IsNotifyTargetSendFail {
		m := map[string]interface{}{"PalletXcmPalletEvent::NotifyTargetSendFail": map[string]interface{}{
			"AsNotifyTargetSendFailError2":    ty.AsNotifyTargetSendFailError2,
			"AsNotifyTargetSendFailLocation0": ty.AsNotifyTargetSendFailLocation0,
			"AsNotifyTargetSendFailQueryId1":  ty.AsNotifyTargetSendFailQueryId1,
		}}
		return json.Marshal(m)
	}
	if ty.IsNotifyTargetMigrationFail {
		m := map[string]interface{}{"PalletXcmPalletEvent::NotifyTargetMigrationFail": map[string]interface{}{
			"AsNotifyTargetMigrationFailLocation0": ty.AsNotifyTargetMigrationFailLocation0,
			"AsNotifyTargetMigrationFailQueryId1":  ty.AsNotifyTargetMigrationFailQueryId1,
		}}
		return json.Marshal(m)
	}
	if ty.IsInvalidQuerierVersion {
		m := map[string]interface{}{"PalletXcmPalletEvent::InvalidQuerierVersion": map[string]interface{}{
			"AsInvalidQuerierVersionOrigin0":  ty.AsInvalidQuerierVersionOrigin0,
			"AsInvalidQuerierVersionQueryId1": ty.AsInvalidQuerierVersionQueryId1,
		}}
		return json.Marshal(m)
	}
	if ty.IsInvalidQuerier {
		m := map[string]interface{}{"PalletXcmPalletEvent::InvalidQuerier": map[string]interface{}{
			"AsInvalidQuerierExpectedQuerier2":    ty.AsInvalidQuerierExpectedQuerier2,
			"AsInvalidQuerierMaybeActualQuerier3": ty.AsInvalidQuerierMaybeActualQuerier3,
			"AsInvalidQuerierOrigin0":             ty.AsInvalidQuerierOrigin0,
			"AsInvalidQuerierQueryId1":            ty.AsInvalidQuerierQueryId1,
		}}
		return json.Marshal(m)
	}
	if ty.IsVersionNotifyStarted {
		m := map[string]interface{}{"PalletXcmPalletEvent::VersionNotifyStarted": map[string]interface{}{
			"AsVersionNotifyStartedCost1":        ty.AsVersionNotifyStartedCost1,
			"AsVersionNotifyStartedDestination0": ty.AsVersionNotifyStartedDestination0,
			"AsVersionNotifyStartedMessageId2":   ty.AsVersionNotifyStartedMessageId2,
		}}
		return json.Marshal(m)
	}
	if ty.IsVersionNotifyRequested {
		m := map[string]interface{}{"PalletXcmPalletEvent::VersionNotifyRequested": map[string]interface{}{
			"AsVersionNotifyRequestedCost1":        ty.AsVersionNotifyRequestedCost1,
			"AsVersionNotifyRequestedDestination0": ty.AsVersionNotifyRequestedDestination0,
			"AsVersionNotifyRequestedMessageId2":   ty.AsVersionNotifyRequestedMessageId2,
		}}
		return json.Marshal(m)
	}
	if ty.IsVersionNotifyUnrequested {
		m := map[string]interface{}{"PalletXcmPalletEvent::VersionNotifyUnrequested": map[string]interface{}{
			"AsVersionNotifyUnrequestedCost1":        ty.AsVersionNotifyUnrequestedCost1,
			"AsVersionNotifyUnrequestedDestination0": ty.AsVersionNotifyUnrequestedDestination0,
			"AsVersionNotifyUnrequestedMessageId2":   ty.AsVersionNotifyUnrequestedMessageId2,
		}}
		return json.Marshal(m)
	}
	if ty.IsFeesPaid {
		m := map[string]interface{}{"PalletXcmPalletEvent::FeesPaid": map[string]interface{}{
			"AsFeesPaidFees1":   ty.AsFeesPaidFees1,
			"AsFeesPaidPaying0": ty.AsFeesPaidPaying0,
		}}
		return json.Marshal(m)
	}
	if ty.IsAssetsClaimed {
		m := map[string]interface{}{"PalletXcmPalletEvent::AssetsClaimed": map[string]interface{}{
			"AsAssetsClaimedAssets2": ty.AsAssetsClaimedAssets2,
			"AsAssetsClaimedHash0":   ty.AsAssetsClaimedHash0,
			"AsAssetsClaimedOrigin1": ty.AsAssetsClaimedOrigin1,
		}}
		return json.Marshal(m)
	}
	if ty.IsVersionMigrationFinished {
		m := map[string]interface{}{"PalletXcmPalletEvent::VersionMigrationFinished": ty.AsVersionMigrationFinishedVersion0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated CumulusPalletXcmPalletEvent with id=119
type CumulusPalletXcmPalletEvent struct {
	IsInvalidFormat            bool
	AsInvalidFormatField0      [32]byte
	IsUnsupportedVersion       bool
	AsUnsupportedVersionField0 [32]byte
	IsExecutedDownward         bool
	AsExecutedDownwardU8320    [32]byte
	AsExecutedDownwardOutcome1 Outcome
}

func (ty CumulusPalletXcmPalletEvent) Encode(encoder scale.Encoder) (err error) {
	if ty.IsInvalidFormat {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInvalidFormatField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnsupportedVersion {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnsupportedVersionField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExecutedDownward {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExecutedDownwardU8320)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExecutedDownwardOutcome1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *CumulusPalletXcmPalletEvent) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsInvalidFormat = true
		err = decoder.Decode(&ty.AsInvalidFormatField0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsUnsupportedVersion = true
		err = decoder.Decode(&ty.AsUnsupportedVersionField0)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsExecutedDownward = true
		err = decoder.Decode(&ty.AsExecutedDownwardU8320)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExecutedDownwardOutcome1)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *CumulusPalletXcmPalletEvent) Variant() (uint8, error) {
	if ty.IsInvalidFormat {
		return 0, nil
	}
	if ty.IsUnsupportedVersion {
		return 1, nil
	}
	if ty.IsExecutedDownward {
		return 2, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty CumulusPalletXcmPalletEvent) MarshalJSON() ([]byte, error) {
	if ty.IsInvalidFormat {
		m := map[string]interface{}{"CumulusPalletXcmPalletEvent::InvalidFormat": ty.AsInvalidFormatField0}
		return json.Marshal(m)
	}
	if ty.IsUnsupportedVersion {
		m := map[string]interface{}{"CumulusPalletXcmPalletEvent::UnsupportedVersion": ty.AsUnsupportedVersionField0}
		return json.Marshal(m)
	}
	if ty.IsExecutedDownward {
		m := map[string]interface{}{"CumulusPalletXcmPalletEvent::ExecutedDownward": map[string]interface{}{
			"AsExecutedDownwardOutcome1": ty.AsExecutedDownwardOutcome1,
			"AsExecutedDownwardU8320":    ty.AsExecutedDownwardU8320,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated CumulusPrimitivesCoreAggregateMessageOrigin with id=121
type AggregateMessageOrigin struct {
	IsHere          bool
	IsParent        bool
	IsSibling       bool
	AsSiblingField0 uint32
}

func (ty AggregateMessageOrigin) Encode(encoder scale.Encoder) (err error) {
	if ty.IsHere {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsParent {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSibling {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSiblingField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *AggregateMessageOrigin) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsHere = true
		return
	case 1:
		ty.IsParent = true
		return
	case 2:
		ty.IsSibling = true
		err = decoder.Decode(&ty.AsSiblingField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *AggregateMessageOrigin) Variant() (uint8, error) {
	if ty.IsHere {
		return 0, nil
	}
	if ty.IsParent {
		return 1, nil
	}
	if ty.IsSibling {
		return 2, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty AggregateMessageOrigin) MarshalJSON() ([]byte, error) {
	if ty.IsHere {
		return json.Marshal("AggregateMessageOrigin::Here")
	}
	if ty.IsParent {
		return json.Marshal("AggregateMessageOrigin::Parent")
	}
	if ty.IsSibling {
		m := map[string]interface{}{"AggregateMessageOrigin::Sibling": ty.AsSiblingField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated FrameSupportTraitsMessagesProcessMessageError with id=123
type ProcessMessageError struct {
	IsBadFormat        bool
	IsCorrupt          bool
	IsUnsupported      bool
	IsOverweight       bool
	AsOverweightField0 Weight
	IsYield            bool
}

func (ty ProcessMessageError) Encode(encoder scale.Encoder) (err error) {
	if ty.IsBadFormat {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCorrupt {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnsupported {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsOverweight {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsOverweightField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsYield {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *ProcessMessageError) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsBadFormat = true
		return
	case 1:
		ty.IsCorrupt = true
		return
	case 2:
		ty.IsUnsupported = true
		return
	case 3:
		ty.IsOverweight = true
		err = decoder.Decode(&ty.AsOverweightField0)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsYield = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *ProcessMessageError) Variant() (uint8, error) {
	if ty.IsBadFormat {
		return 0, nil
	}
	if ty.IsCorrupt {
		return 1, nil
	}
	if ty.IsUnsupported {
		return 2, nil
	}
	if ty.IsOverweight {
		return 3, nil
	}
	if ty.IsYield {
		return 4, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty ProcessMessageError) MarshalJSON() ([]byte, error) {
	if ty.IsBadFormat {
		return json.Marshal("ProcessMessageError::BadFormat")
	}
	if ty.IsCorrupt {
		return json.Marshal("ProcessMessageError::Corrupt")
	}
	if ty.IsUnsupported {
		return json.Marshal("ProcessMessageError::Unsupported")
	}
	if ty.IsOverweight {
		m := map[string]interface{}{"ProcessMessageError::Overweight": ty.AsOverweightField0}
		return json.Marshal(m)
	}
	if ty.IsYield {
		return json.Marshal("ProcessMessageError::Yield")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated PalletMessageQueuePalletEvent with id=120
type PalletMessageQueuePalletEvent struct {
	IsProcessingFailed bool
	// The `blake2_256` hash of the message.
	AsProcessingFailedId0 [32]byte
	// The queue of the message.
	AsProcessingFailedOrigin1 AggregateMessageOrigin
	// The error that occurred.
	//
	// This error is pretty opaque. More fine-grained errors need to be emitted as events
	// by the `MessageProcessor`.
	AsProcessingFailedError2 ProcessMessageError
	IsProcessed              bool
	// The `blake2_256` hash of the message.
	AsProcessedId0 [32]byte
	// The queue of the message.
	AsProcessedOrigin1 AggregateMessageOrigin
	// How much weight was used to process the message.
	AsProcessedWeightUsed2 Weight
	// Whether the message was processed.
	//
	// Note that this does not mean that the underlying `MessageProcessor` was internally
	// successful. It *solely* means that the MQ pallet will treat this as a success
	// condition and discard the message. Any internal error needs to be emitted as events
	// by the `MessageProcessor`.
	AsProcessedSuccess3  bool
	IsOverweightEnqueued bool
	// The `blake2_256` hash of the message.
	AsOverweightEnqueuedId0 [32]byte
	// The queue of the message.
	AsOverweightEnqueuedOrigin1 AggregateMessageOrigin
	// The page of the message.
	AsOverweightEnqueuedPageIndex2 uint32
	// The index of the message within the page.
	AsOverweightEnqueuedMessageIndex3 uint32
	IsPageReaped                      bool
	// The queue of the page.
	AsPageReapedOrigin0 AggregateMessageOrigin
	// The index of the page.
	AsPageReapedIndex1 uint32
}

func (ty PalletMessageQueuePalletEvent) Encode(encoder scale.Encoder) (err error) {
	if ty.IsProcessingFailed {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsProcessingFailedId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsProcessingFailedOrigin1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsProcessingFailedError2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsProcessed {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsProcessedId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsProcessedOrigin1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsProcessedWeightUsed2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsProcessedSuccess3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsOverweightEnqueued {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsOverweightEnqueuedId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsOverweightEnqueuedOrigin1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsOverweightEnqueuedPageIndex2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsOverweightEnqueuedMessageIndex3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsPageReaped {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPageReapedOrigin0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPageReapedIndex1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *PalletMessageQueuePalletEvent) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsProcessingFailed = true
		err = decoder.Decode(&ty.AsProcessingFailedId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsProcessingFailedOrigin1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsProcessingFailedError2)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsProcessed = true
		err = decoder.Decode(&ty.AsProcessedId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsProcessedOrigin1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsProcessedWeightUsed2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsProcessedSuccess3)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsOverweightEnqueued = true
		err = decoder.Decode(&ty.AsOverweightEnqueuedId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsOverweightEnqueuedOrigin1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsOverweightEnqueuedPageIndex2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsOverweightEnqueuedMessageIndex3)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsPageReaped = true
		err = decoder.Decode(&ty.AsPageReapedOrigin0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsPageReapedIndex1)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *PalletMessageQueuePalletEvent) Variant() (uint8, error) {
	if ty.IsProcessingFailed {
		return 0, nil
	}
	if ty.IsProcessed {
		return 1, nil
	}
	if ty.IsOverweightEnqueued {
		return 2, nil
	}
	if ty.IsPageReaped {
		return 3, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty PalletMessageQueuePalletEvent) MarshalJSON() ([]byte, error) {
	if ty.IsProcessingFailed {
		m := map[string]interface{}{"PalletMessageQueuePalletEvent::ProcessingFailed": map[string]interface{}{
			"AsProcessingFailedError2":  ty.AsProcessingFailedError2,
			"AsProcessingFailedId0":     ty.AsProcessingFailedId0,
			"AsProcessingFailedOrigin1": ty.AsProcessingFailedOrigin1,
		}}
		return json.Marshal(m)
	}
	if ty.IsProcessed {
		m := map[string]interface{}{"PalletMessageQueuePalletEvent::Processed": map[string]interface{}{
			"AsProcessedId0":         ty.AsProcessedId0,
			"AsProcessedOrigin1":     ty.AsProcessedOrigin1,
			"AsProcessedSuccess3":    ty.AsProcessedSuccess3,
			"AsProcessedWeightUsed2": ty.AsProcessedWeightUsed2,
		}}
		return json.Marshal(m)
	}
	if ty.IsOverweightEnqueued {
		m := map[string]interface{}{"PalletMessageQueuePalletEvent::OverweightEnqueued": map[string]interface{}{
			"AsOverweightEnqueuedId0":           ty.AsOverweightEnqueuedId0,
			"AsOverweightEnqueuedMessageIndex3": ty.AsOverweightEnqueuedMessageIndex3,
			"AsOverweightEnqueuedOrigin1":       ty.AsOverweightEnqueuedOrigin1,
			"AsOverweightEnqueuedPageIndex2":    ty.AsOverweightEnqueuedPageIndex2,
		}}
		return json.Marshal(m)
	}
	if ty.IsPageReaped {
		m := map[string]interface{}{"PalletMessageQueuePalletEvent::PageReaped": map[string]interface{}{
			"AsPageReapedIndex1":  ty.AsPageReapedIndex1,
			"AsPageReapedOrigin0": ty.AsPageReapedOrigin0,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated OrmlTokensModuleEvent with id=124
type OrmlTokensModuleEvent struct {
	IsEndowed                       bool
	AsEndowedCurrencyId0            uint64
	AsEndowedWho1                   [32]byte
	AsEndowedAmount2                types.U128
	IsDustLost                      bool
	AsDustLostCurrencyId0           uint64
	AsDustLostWho1                  [32]byte
	AsDustLostAmount2               types.U128
	IsTransfer                      bool
	AsTransferCurrencyId0           uint64
	AsTransferFrom1                 [32]byte
	AsTransferTo2                   [32]byte
	AsTransferAmount3               types.U128
	IsReserved                      bool
	AsReservedCurrencyId0           uint64
	AsReservedWho1                  [32]byte
	AsReservedAmount2               types.U128
	IsUnreserved                    bool
	AsUnreservedCurrencyId0         uint64
	AsUnreservedWho1                [32]byte
	AsUnreservedAmount2             types.U128
	IsReserveRepatriated            bool
	AsReserveRepatriatedCurrencyId0 uint64
	AsReserveRepatriatedFrom1       [32]byte
	AsReserveRepatriatedTo2         [32]byte
	AsReserveRepatriatedAmount3     types.U128
	AsReserveRepatriatedStatus4     BalanceStatus
	IsBalanceSet                    bool
	AsBalanceSetCurrencyId0         uint64
	AsBalanceSetWho1                [32]byte
	AsBalanceSetFree2               types.U128
	AsBalanceSetReserved3           types.U128
	IsTotalIssuanceSet              bool
	AsTotalIssuanceSetCurrencyId0   uint64
	AsTotalIssuanceSetAmount1       types.U128
	IsWithdrawn                     bool
	AsWithdrawnCurrencyId0          uint64
	AsWithdrawnWho1                 [32]byte
	AsWithdrawnAmount2              types.U128
	IsSlashed                       bool
	AsSlashedCurrencyId0            uint64
	AsSlashedWho1                   [32]byte
	AsSlashedFreeAmount2            types.U128
	AsSlashedReservedAmount3        types.U128
	IsDeposited                     bool
	AsDepositedCurrencyId0          uint64
	AsDepositedWho1                 [32]byte
	AsDepositedAmount2              types.U128
	IsLockSet                       bool
	AsLockSetLockId0                [8]byte
	AsLockSetCurrencyId1            uint64
	AsLockSetWho2                   [32]byte
	AsLockSetAmount3                types.U128
	IsLockRemoved                   bool
	AsLockRemovedLockId0            [8]byte
	AsLockRemovedCurrencyId1        uint64
	AsLockRemovedWho2               [32]byte
	IsLocked                        bool
	AsLockedCurrencyId0             uint64
	AsLockedWho1                    [32]byte
	AsLockedAmount2                 types.U128
	IsUnlocked                      bool
	AsUnlockedCurrencyId0           uint64
	AsUnlockedWho1                  [32]byte
	AsUnlockedAmount2               types.U128
	IsIssued                        bool
	AsIssuedCurrencyId0             uint64
	AsIssuedAmount1                 types.U128
	IsRescinded                     bool
	AsRescindedCurrencyId0          uint64
	AsRescindedAmount1              types.U128
}

func (ty OrmlTokensModuleEvent) Encode(encoder scale.Encoder) (err error) {
	if ty.IsEndowed {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsEndowedCurrencyId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsEndowedWho1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsEndowedAmount2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDustLost {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDustLostCurrencyId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDustLostWho1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDustLostAmount2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTransfer {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferCurrencyId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferFrom1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferTo2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferAmount3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReserved {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReservedCurrencyId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReservedWho1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReservedAmount2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnreserved {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnreservedCurrencyId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnreservedWho1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnreservedAmount2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReserveRepatriated {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReserveRepatriatedCurrencyId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReserveRepatriatedFrom1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReserveRepatriatedTo2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReserveRepatriatedAmount3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReserveRepatriatedStatus4)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBalanceSet {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBalanceSetCurrencyId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBalanceSetWho1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBalanceSetFree2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBalanceSetReserved3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTotalIssuanceSet {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTotalIssuanceSetCurrencyId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTotalIssuanceSetAmount1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWithdrawn {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWithdrawnCurrencyId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWithdrawnWho1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWithdrawnAmount2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSlashed {
		err = encoder.PushByte(9)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSlashedCurrencyId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSlashedWho1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSlashedFreeAmount2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSlashedReservedAmount3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDeposited {
		err = encoder.PushByte(10)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositedCurrencyId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositedWho1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositedAmount2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsLockSet {
		err = encoder.PushByte(11)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLockSetLockId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLockSetCurrencyId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLockSetWho2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLockSetAmount3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsLockRemoved {
		err = encoder.PushByte(12)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLockRemovedLockId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLockRemovedCurrencyId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLockRemovedWho2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsLocked {
		err = encoder.PushByte(13)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLockedCurrencyId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLockedWho1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLockedAmount2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnlocked {
		err = encoder.PushByte(14)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnlockedCurrencyId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnlockedWho1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnlockedAmount2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsIssued {
		err = encoder.PushByte(15)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsIssuedCurrencyId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsIssuedAmount1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsRescinded {
		err = encoder.PushByte(16)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsRescindedCurrencyId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsRescindedAmount1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *OrmlTokensModuleEvent) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsEndowed = true
		err = decoder.Decode(&ty.AsEndowedCurrencyId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsEndowedWho1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsEndowedAmount2)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsDustLost = true
		err = decoder.Decode(&ty.AsDustLostCurrencyId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDustLostWho1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDustLostAmount2)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsTransfer = true
		err = decoder.Decode(&ty.AsTransferCurrencyId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferFrom1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferTo2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferAmount3)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsReserved = true
		err = decoder.Decode(&ty.AsReservedCurrencyId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsReservedWho1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsReservedAmount2)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsUnreserved = true
		err = decoder.Decode(&ty.AsUnreservedCurrencyId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUnreservedWho1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUnreservedAmount2)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsReserveRepatriated = true
		err = decoder.Decode(&ty.AsReserveRepatriatedCurrencyId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsReserveRepatriatedFrom1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsReserveRepatriatedTo2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsReserveRepatriatedAmount3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsReserveRepatriatedStatus4)
		if err != nil {
			return err
		}
		return
	case 6:
		ty.IsBalanceSet = true
		err = decoder.Decode(&ty.AsBalanceSetCurrencyId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsBalanceSetWho1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsBalanceSetFree2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsBalanceSetReserved3)
		if err != nil {
			return err
		}
		return
	case 7:
		ty.IsTotalIssuanceSet = true
		err = decoder.Decode(&ty.AsTotalIssuanceSetCurrencyId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTotalIssuanceSetAmount1)
		if err != nil {
			return err
		}
		return
	case 8:
		ty.IsWithdrawn = true
		err = decoder.Decode(&ty.AsWithdrawnCurrencyId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsWithdrawnWho1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsWithdrawnAmount2)
		if err != nil {
			return err
		}
		return
	case 9:
		ty.IsSlashed = true
		err = decoder.Decode(&ty.AsSlashedCurrencyId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSlashedWho1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSlashedFreeAmount2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSlashedReservedAmount3)
		if err != nil {
			return err
		}
		return
	case 10:
		ty.IsDeposited = true
		err = decoder.Decode(&ty.AsDepositedCurrencyId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDepositedWho1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDepositedAmount2)
		if err != nil {
			return err
		}
		return
	case 11:
		ty.IsLockSet = true
		err = decoder.Decode(&ty.AsLockSetLockId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsLockSetCurrencyId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsLockSetWho2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsLockSetAmount3)
		if err != nil {
			return err
		}
		return
	case 12:
		ty.IsLockRemoved = true
		err = decoder.Decode(&ty.AsLockRemovedLockId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsLockRemovedCurrencyId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsLockRemovedWho2)
		if err != nil {
			return err
		}
		return
	case 13:
		ty.IsLocked = true
		err = decoder.Decode(&ty.AsLockedCurrencyId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsLockedWho1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsLockedAmount2)
		if err != nil {
			return err
		}
		return
	case 14:
		ty.IsUnlocked = true
		err = decoder.Decode(&ty.AsUnlockedCurrencyId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUnlockedWho1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUnlockedAmount2)
		if err != nil {
			return err
		}
		return
	case 15:
		ty.IsIssued = true
		err = decoder.Decode(&ty.AsIssuedCurrencyId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsIssuedAmount1)
		if err != nil {
			return err
		}
		return
	case 16:
		ty.IsRescinded = true
		err = decoder.Decode(&ty.AsRescindedCurrencyId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsRescindedAmount1)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *OrmlTokensModuleEvent) Variant() (uint8, error) {
	if ty.IsEndowed {
		return 0, nil
	}
	if ty.IsDustLost {
		return 1, nil
	}
	if ty.IsTransfer {
		return 2, nil
	}
	if ty.IsReserved {
		return 3, nil
	}
	if ty.IsUnreserved {
		return 4, nil
	}
	if ty.IsReserveRepatriated {
		return 5, nil
	}
	if ty.IsBalanceSet {
		return 6, nil
	}
	if ty.IsTotalIssuanceSet {
		return 7, nil
	}
	if ty.IsWithdrawn {
		return 8, nil
	}
	if ty.IsSlashed {
		return 9, nil
	}
	if ty.IsDeposited {
		return 10, nil
	}
	if ty.IsLockSet {
		return 11, nil
	}
	if ty.IsLockRemoved {
		return 12, nil
	}
	if ty.IsLocked {
		return 13, nil
	}
	if ty.IsUnlocked {
		return 14, nil
	}
	if ty.IsIssued {
		return 15, nil
	}
	if ty.IsRescinded {
		return 16, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty OrmlTokensModuleEvent) MarshalJSON() ([]byte, error) {
	if ty.IsEndowed {
		m := map[string]interface{}{"OrmlTokensModuleEvent::Endowed": map[string]interface{}{
			"AsEndowedAmount2":     ty.AsEndowedAmount2,
			"AsEndowedCurrencyId0": ty.AsEndowedCurrencyId0,
			"AsEndowedWho1":        ty.AsEndowedWho1,
		}}
		return json.Marshal(m)
	}
	if ty.IsDustLost {
		m := map[string]interface{}{"OrmlTokensModuleEvent::DustLost": map[string]interface{}{
			"AsDustLostAmount2":     ty.AsDustLostAmount2,
			"AsDustLostCurrencyId0": ty.AsDustLostCurrencyId0,
			"AsDustLostWho1":        ty.AsDustLostWho1,
		}}
		return json.Marshal(m)
	}
	if ty.IsTransfer {
		m := map[string]interface{}{"OrmlTokensModuleEvent::Transfer": map[string]interface{}{
			"AsTransferAmount3":     ty.AsTransferAmount3,
			"AsTransferCurrencyId0": ty.AsTransferCurrencyId0,
			"AsTransferFrom1":       ty.AsTransferFrom1,
			"AsTransferTo2":         ty.AsTransferTo2,
		}}
		return json.Marshal(m)
	}
	if ty.IsReserved {
		m := map[string]interface{}{"OrmlTokensModuleEvent::Reserved": map[string]interface{}{
			"AsReservedAmount2":     ty.AsReservedAmount2,
			"AsReservedCurrencyId0": ty.AsReservedCurrencyId0,
			"AsReservedWho1":        ty.AsReservedWho1,
		}}
		return json.Marshal(m)
	}
	if ty.IsUnreserved {
		m := map[string]interface{}{"OrmlTokensModuleEvent::Unreserved": map[string]interface{}{
			"AsUnreservedAmount2":     ty.AsUnreservedAmount2,
			"AsUnreservedCurrencyId0": ty.AsUnreservedCurrencyId0,
			"AsUnreservedWho1":        ty.AsUnreservedWho1,
		}}
		return json.Marshal(m)
	}
	if ty.IsReserveRepatriated {
		m := map[string]interface{}{"OrmlTokensModuleEvent::ReserveRepatriated": map[string]interface{}{
			"AsReserveRepatriatedAmount3":     ty.AsReserveRepatriatedAmount3,
			"AsReserveRepatriatedCurrencyId0": ty.AsReserveRepatriatedCurrencyId0,
			"AsReserveRepatriatedFrom1":       ty.AsReserveRepatriatedFrom1,
			"AsReserveRepatriatedStatus4":     ty.AsReserveRepatriatedStatus4,
			"AsReserveRepatriatedTo2":         ty.AsReserveRepatriatedTo2,
		}}
		return json.Marshal(m)
	}
	if ty.IsBalanceSet {
		m := map[string]interface{}{"OrmlTokensModuleEvent::BalanceSet": map[string]interface{}{
			"AsBalanceSetCurrencyId0": ty.AsBalanceSetCurrencyId0,
			"AsBalanceSetFree2":       ty.AsBalanceSetFree2,
			"AsBalanceSetReserved3":   ty.AsBalanceSetReserved3,
			"AsBalanceSetWho1":        ty.AsBalanceSetWho1,
		}}
		return json.Marshal(m)
	}
	if ty.IsTotalIssuanceSet {
		m := map[string]interface{}{"OrmlTokensModuleEvent::TotalIssuanceSet": map[string]interface{}{
			"AsTotalIssuanceSetAmount1":     ty.AsTotalIssuanceSetAmount1,
			"AsTotalIssuanceSetCurrencyId0": ty.AsTotalIssuanceSetCurrencyId0,
		}}
		return json.Marshal(m)
	}
	if ty.IsWithdrawn {
		m := map[string]interface{}{"OrmlTokensModuleEvent::Withdrawn": map[string]interface{}{
			"AsWithdrawnAmount2":     ty.AsWithdrawnAmount2,
			"AsWithdrawnCurrencyId0": ty.AsWithdrawnCurrencyId0,
			"AsWithdrawnWho1":        ty.AsWithdrawnWho1,
		}}
		return json.Marshal(m)
	}
	if ty.IsSlashed {
		m := map[string]interface{}{"OrmlTokensModuleEvent::Slashed": map[string]interface{}{
			"AsSlashedCurrencyId0":     ty.AsSlashedCurrencyId0,
			"AsSlashedFreeAmount2":     ty.AsSlashedFreeAmount2,
			"AsSlashedReservedAmount3": ty.AsSlashedReservedAmount3,
			"AsSlashedWho1":            ty.AsSlashedWho1,
		}}
		return json.Marshal(m)
	}
	if ty.IsDeposited {
		m := map[string]interface{}{"OrmlTokensModuleEvent::Deposited": map[string]interface{}{
			"AsDepositedAmount2":     ty.AsDepositedAmount2,
			"AsDepositedCurrencyId0": ty.AsDepositedCurrencyId0,
			"AsDepositedWho1":        ty.AsDepositedWho1,
		}}
		return json.Marshal(m)
	}
	if ty.IsLockSet {
		m := map[string]interface{}{"OrmlTokensModuleEvent::LockSet": map[string]interface{}{
			"AsLockSetAmount3":     ty.AsLockSetAmount3,
			"AsLockSetCurrencyId1": ty.AsLockSetCurrencyId1,
			"AsLockSetLockId0":     ty.AsLockSetLockId0,
			"AsLockSetWho2":        ty.AsLockSetWho2,
		}}
		return json.Marshal(m)
	}
	if ty.IsLockRemoved {
		m := map[string]interface{}{"OrmlTokensModuleEvent::LockRemoved": map[string]interface{}{
			"AsLockRemovedCurrencyId1": ty.AsLockRemovedCurrencyId1,
			"AsLockRemovedLockId0":     ty.AsLockRemovedLockId0,
			"AsLockRemovedWho2":        ty.AsLockRemovedWho2,
		}}
		return json.Marshal(m)
	}
	if ty.IsLocked {
		m := map[string]interface{}{"OrmlTokensModuleEvent::Locked": map[string]interface{}{
			"AsLockedAmount2":     ty.AsLockedAmount2,
			"AsLockedCurrencyId0": ty.AsLockedCurrencyId0,
			"AsLockedWho1":        ty.AsLockedWho1,
		}}
		return json.Marshal(m)
	}
	if ty.IsUnlocked {
		m := map[string]interface{}{"OrmlTokensModuleEvent::Unlocked": map[string]interface{}{
			"AsUnlockedAmount2":     ty.AsUnlockedAmount2,
			"AsUnlockedCurrencyId0": ty.AsUnlockedCurrencyId0,
			"AsUnlockedWho1":        ty.AsUnlockedWho1,
		}}
		return json.Marshal(m)
	}
	if ty.IsIssued {
		m := map[string]interface{}{"OrmlTokensModuleEvent::Issued": map[string]interface{}{
			"AsIssuedAmount1":     ty.AsIssuedAmount1,
			"AsIssuedCurrencyId0": ty.AsIssuedCurrencyId0,
		}}
		return json.Marshal(m)
	}
	if ty.IsRescinded {
		m := map[string]interface{}{"OrmlTokensModuleEvent::Rescinded": map[string]interface{}{
			"AsRescindedAmount1":     ty.AsRescindedAmount1,
			"AsRescindedCurrencyId0": ty.AsRescindedCurrencyId0,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated ParachainWeteeRuntimeWorkerMessageOrigin with id=126
type MessageOrigin struct {
	IsWork bool
}

func (ty MessageOrigin) Encode(encoder scale.Encoder) (err error) {
	if ty.IsWork {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *MessageOrigin) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsWork = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *MessageOrigin) Variant() (uint8, error) {
	if ty.IsWork {
		return 0, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty MessageOrigin) MarshalJSON() ([]byte, error) {
	if ty.IsWork {
		return json.Marshal("MessageOrigin::Work")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated WeteeMessageQueuePalletEvent with id=125
type WeteeMessageQueuePalletEvent struct {
	IsProcessingFailed bool
	// The `blake2_256` hash of the message.
	AsProcessingFailedId0 [32]byte
	// The queue of the message.
	AsProcessingFailedOrigin1 MessageOrigin
	// The error that occurred.
	//
	// This error is pretty opaque. More fine-grained errors need to be emitted as events
	// by the `MessageProcessor`.
	AsProcessingFailedError2 ProcessMessageError
	IsProcessed              bool
	// The `blake2_256` hash of the message.
	AsProcessedId0 [32]byte
	// The queue of the message.
	AsProcessedOrigin1 MessageOrigin
	// How much weight was used to process the message.
	AsProcessedWeightUsed2 Weight
	// Whether the message was processed.
	//
	// Note that this does not mean that the underlying `MessageProcessor` was internally
	// successful. It *solely* means that the MQ pallet will treat this as a success
	// condition and discard the message. Any internal error needs to be emitted as events
	// by the `MessageProcessor`.
	AsProcessedSuccess3  bool
	IsOverweightEnqueued bool
	// The `blake2_256` hash of the message.
	AsOverweightEnqueuedId0 [32]byte
	// The queue of the message.
	AsOverweightEnqueuedOrigin1 MessageOrigin
	// The page of the message.
	AsOverweightEnqueuedPageIndex2 uint32
	// The index of the message within the page.
	AsOverweightEnqueuedMessageIndex3 uint32
	IsPageReaped                      bool
	// The queue of the page.
	AsPageReapedOrigin0 MessageOrigin
	// The index of the page.
	AsPageReapedIndex1 uint32
}

func (ty WeteeMessageQueuePalletEvent) Encode(encoder scale.Encoder) (err error) {
	if ty.IsProcessingFailed {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsProcessingFailedId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsProcessingFailedOrigin1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsProcessingFailedError2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsProcessed {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsProcessedId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsProcessedOrigin1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsProcessedWeightUsed2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsProcessedSuccess3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsOverweightEnqueued {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsOverweightEnqueuedId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsOverweightEnqueuedOrigin1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsOverweightEnqueuedPageIndex2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsOverweightEnqueuedMessageIndex3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsPageReaped {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPageReapedOrigin0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPageReapedIndex1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *WeteeMessageQueuePalletEvent) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsProcessingFailed = true
		err = decoder.Decode(&ty.AsProcessingFailedId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsProcessingFailedOrigin1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsProcessingFailedError2)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsProcessed = true
		err = decoder.Decode(&ty.AsProcessedId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsProcessedOrigin1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsProcessedWeightUsed2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsProcessedSuccess3)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsOverweightEnqueued = true
		err = decoder.Decode(&ty.AsOverweightEnqueuedId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsOverweightEnqueuedOrigin1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsOverweightEnqueuedPageIndex2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsOverweightEnqueuedMessageIndex3)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsPageReaped = true
		err = decoder.Decode(&ty.AsPageReapedOrigin0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsPageReapedIndex1)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *WeteeMessageQueuePalletEvent) Variant() (uint8, error) {
	if ty.IsProcessingFailed {
		return 0, nil
	}
	if ty.IsProcessed {
		return 1, nil
	}
	if ty.IsOverweightEnqueued {
		return 2, nil
	}
	if ty.IsPageReaped {
		return 3, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty WeteeMessageQueuePalletEvent) MarshalJSON() ([]byte, error) {
	if ty.IsProcessingFailed {
		m := map[string]interface{}{"WeteeMessageQueuePalletEvent::ProcessingFailed": map[string]interface{}{
			"AsProcessingFailedError2":  ty.AsProcessingFailedError2,
			"AsProcessingFailedId0":     ty.AsProcessingFailedId0,
			"AsProcessingFailedOrigin1": ty.AsProcessingFailedOrigin1,
		}}
		return json.Marshal(m)
	}
	if ty.IsProcessed {
		m := map[string]interface{}{"WeteeMessageQueuePalletEvent::Processed": map[string]interface{}{
			"AsProcessedId0":         ty.AsProcessedId0,
			"AsProcessedOrigin1":     ty.AsProcessedOrigin1,
			"AsProcessedSuccess3":    ty.AsProcessedSuccess3,
			"AsProcessedWeightUsed2": ty.AsProcessedWeightUsed2,
		}}
		return json.Marshal(m)
	}
	if ty.IsOverweightEnqueued {
		m := map[string]interface{}{"WeteeMessageQueuePalletEvent::OverweightEnqueued": map[string]interface{}{
			"AsOverweightEnqueuedId0":           ty.AsOverweightEnqueuedId0,
			"AsOverweightEnqueuedMessageIndex3": ty.AsOverweightEnqueuedMessageIndex3,
			"AsOverweightEnqueuedOrigin1":       ty.AsOverweightEnqueuedOrigin1,
			"AsOverweightEnqueuedPageIndex2":    ty.AsOverweightEnqueuedPageIndex2,
		}}
		return json.Marshal(m)
	}
	if ty.IsPageReaped {
		m := map[string]interface{}{"WeteeMessageQueuePalletEvent::PageReaped": map[string]interface{}{
			"AsPageReapedIndex1":  ty.AsPageReapedIndex1,
			"AsPageReapedOrigin0": ty.AsPageReapedOrigin0,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated PalletUtilityPalletEvent with id=127
type PalletUtilityPalletEvent struct {
	IsBatchInterrupted         bool
	AsBatchInterruptedIndex0   uint32
	AsBatchInterruptedError1   DispatchError
	IsBatchCompleted           bool
	IsBatchCompletedWithErrors bool
	IsItemCompleted            bool
	IsItemFailed               bool
	AsItemFailedError0         *DispatchError
	IsDispatchedAs             bool
	AsDispatchedAsResult0      *Result
}

func (ty PalletUtilityPalletEvent) Encode(encoder scale.Encoder) (err error) {
	if ty.IsBatchInterrupted {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBatchInterruptedIndex0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBatchInterruptedError1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBatchCompleted {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBatchCompletedWithErrors {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsItemCompleted {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsItemFailed {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsItemFailedError0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDispatchedAs {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDispatchedAsResult0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *PalletUtilityPalletEvent) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsBatchInterrupted = true
		err = decoder.Decode(&ty.AsBatchInterruptedIndex0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsBatchInterruptedError1)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsBatchCompleted = true
		return
	case 2:
		ty.IsBatchCompletedWithErrors = true
		return
	case 3:
		ty.IsItemCompleted = true
		return
	case 4:
		ty.IsItemFailed = true
		var tmp DispatchError
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsItemFailedError0 = &tmp
		return
	case 5:
		ty.IsDispatchedAs = true
		var tmp Result
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsDispatchedAsResult0 = &tmp
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *PalletUtilityPalletEvent) Variant() (uint8, error) {
	if ty.IsBatchInterrupted {
		return 0, nil
	}
	if ty.IsBatchCompleted {
		return 1, nil
	}
	if ty.IsBatchCompletedWithErrors {
		return 2, nil
	}
	if ty.IsItemCompleted {
		return 3, nil
	}
	if ty.IsItemFailed {
		return 4, nil
	}
	if ty.IsDispatchedAs {
		return 5, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty PalletUtilityPalletEvent) MarshalJSON() ([]byte, error) {
	if ty.IsBatchInterrupted {
		m := map[string]interface{}{"PalletUtilityPalletEvent::BatchInterrupted": map[string]interface{}{
			"AsBatchInterruptedError1": ty.AsBatchInterruptedError1,
			"AsBatchInterruptedIndex0": ty.AsBatchInterruptedIndex0,
		}}
		return json.Marshal(m)
	}
	if ty.IsBatchCompleted {
		return json.Marshal("PalletUtilityPalletEvent::BatchCompleted")
	}
	if ty.IsBatchCompletedWithErrors {
		return json.Marshal("PalletUtilityPalletEvent::BatchCompletedWithErrors")
	}
	if ty.IsItemCompleted {
		return json.Marshal("PalletUtilityPalletEvent::ItemCompleted")
	}
	if ty.IsItemFailed {
		m := map[string]interface{}{"PalletUtilityPalletEvent::ItemFailed": ty.AsItemFailedError0}
		return json.Marshal(m)
	}
	if ty.IsDispatchedAs {
		m := map[string]interface{}{"PalletUtilityPalletEvent::DispatchedAs": ty.AsDispatchedAsResult0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated WeteeOrgPalletEvent with id=128
type WeteeOrgPalletEvent struct {
	IsCreatedDao             bool
	AsCreatedDaoTAccountId0  [32]byte
	AsCreatedDaoDaoAssetId1  uint64
	IsSuccess                bool
	IsTaskCreated            bool
	AsTaskCreatedDaoAssetId0 uint64
	AsTaskCreatedU321        uint32
	AsTaskCreatedU642        uint64
	AsTaskCreatedTAccountId3 [32]byte
	IsTaskUpdated            bool
	AsTaskUpdatedDaoAssetId0 uint64
	AsTaskUpdatedU321        uint32
	AsTaskUpdatedU642        uint64
	AsTaskUpdatedTAccountId3 [32]byte
}

func (ty WeteeOrgPalletEvent) Encode(encoder scale.Encoder) (err error) {
	if ty.IsCreatedDao {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreatedDaoTAccountId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreatedDaoDaoAssetId1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSuccess {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTaskCreated {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTaskCreatedDaoAssetId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTaskCreatedU321)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTaskCreatedU642)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTaskCreatedTAccountId3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTaskUpdated {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTaskUpdatedDaoAssetId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTaskUpdatedU321)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTaskUpdatedU642)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTaskUpdatedTAccountId3)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *WeteeOrgPalletEvent) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsCreatedDao = true
		err = decoder.Decode(&ty.AsCreatedDaoTAccountId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreatedDaoDaoAssetId1)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsSuccess = true
		return
	case 2:
		ty.IsTaskCreated = true
		err = decoder.Decode(&ty.AsTaskCreatedDaoAssetId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTaskCreatedU321)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTaskCreatedU642)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTaskCreatedTAccountId3)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsTaskUpdated = true
		err = decoder.Decode(&ty.AsTaskUpdatedDaoAssetId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTaskUpdatedU321)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTaskUpdatedU642)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTaskUpdatedTAccountId3)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *WeteeOrgPalletEvent) Variant() (uint8, error) {
	if ty.IsCreatedDao {
		return 0, nil
	}
	if ty.IsSuccess {
		return 1, nil
	}
	if ty.IsTaskCreated {
		return 2, nil
	}
	if ty.IsTaskUpdated {
		return 3, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty WeteeOrgPalletEvent) MarshalJSON() ([]byte, error) {
	if ty.IsCreatedDao {
		m := map[string]interface{}{"WeteeOrgPalletEvent::CreatedDao": map[string]interface{}{
			"AsCreatedDaoDaoAssetId1": ty.AsCreatedDaoDaoAssetId1,
			"AsCreatedDaoTAccountId0": ty.AsCreatedDaoTAccountId0,
		}}
		return json.Marshal(m)
	}
	if ty.IsSuccess {
		return json.Marshal("WeteeOrgPalletEvent::Success")
	}
	if ty.IsTaskCreated {
		m := map[string]interface{}{"WeteeOrgPalletEvent::TaskCreated": map[string]interface{}{
			"AsTaskCreatedDaoAssetId0": ty.AsTaskCreatedDaoAssetId0,
			"AsTaskCreatedTAccountId3": ty.AsTaskCreatedTAccountId3,
			"AsTaskCreatedU321":        ty.AsTaskCreatedU321,
			"AsTaskCreatedU642":        ty.AsTaskCreatedU642,
		}}
		return json.Marshal(m)
	}
	if ty.IsTaskUpdated {
		m := map[string]interface{}{"WeteeOrgPalletEvent::TaskUpdated": map[string]interface{}{
			"AsTaskUpdatedDaoAssetId0": ty.AsTaskUpdatedDaoAssetId0,
			"AsTaskUpdatedTAccountId3": ty.AsTaskUpdatedTAccountId3,
			"AsTaskUpdatedU321":        ty.AsTaskUpdatedU321,
			"AsTaskUpdatedU642":        ty.AsTaskUpdatedU642,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated wetee_assets_DaoAssetMeta with id={{false [131]}}
type DaoAssetMeta struct {
	// Field 0 with TypeId=14
	Name []byte
	// Field 1 with TypeId=14
	Symbol []byte
	// Field 2 with TypeId=2
	Decimals byte
}

// Generated WeteeAssetsPalletEvent with id=129
type WeteeAssetsPalletEvent struct {
	IsTransferred                             bool
	AsTransferredDaoAssetId0                  uint64
	AsTransferredTAccountId1                  [32]byte
	AsTransferredTAccountId2                  [32]byte
	AsTransferredBalanceOfT3                  types.U128
	IsBalanceUpdated                          bool
	AsBalanceUpdatedDaoAssetId0               uint64
	AsBalanceUpdatedTAccountId1               [32]byte
	AsBalanceUpdatedAmountOfT2                types.I128
	IsDeposited                               bool
	AsDepositedDaoAssetId0                    uint64
	AsDepositedTAccountId1                    [32]byte
	AsDepositedBalanceOfT2                    types.U128
	IsWithdrawn                               bool
	AsWithdrawnDaoAssetId0                    uint64
	AsWithdrawnTAccountId1                    [32]byte
	AsWithdrawnBalanceOfT2                    types.U128
	IsCreateAsset                             bool
	AsCreateAssetTAccountId0                  [32]byte
	AsCreateAssetDaoAssetId1                  uint64
	AsCreateAssetBalanceOfT2                  types.U128
	IsSetMetadata                             bool
	AsSetMetadataTAccountId0                  [32]byte
	AsSetMetadataDaoAssetId1                  uint64
	AsSetMetadataDaoAssetMeta2                DaoAssetMeta
	IsBurn                                    bool
	AsBurnTAccountId0                         [32]byte
	AsBurnDaoAssetId1                         uint64
	AsBurnBalanceOfT2                         types.U128
	IsSetWeightRateMultiple                   bool
	AsSetWeightRateMultipleDaoId0             uint64
	AsSetWeightRateMultipleMultiple1          types.U128
	IsSetExistenialDepposit                   bool
	AsSetExistenialDeppositDaoId0             uint64
	AsSetExistenialDeppositExistenialDeposit1 types.U128
}

func (ty WeteeAssetsPalletEvent) Encode(encoder scale.Encoder) (err error) {
	if ty.IsTransferred {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferredDaoAssetId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferredTAccountId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferredTAccountId2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferredBalanceOfT3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBalanceUpdated {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBalanceUpdatedDaoAssetId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBalanceUpdatedTAccountId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBalanceUpdatedAmountOfT2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDeposited {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositedDaoAssetId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositedTAccountId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositedBalanceOfT2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWithdrawn {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWithdrawnDaoAssetId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWithdrawnTAccountId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWithdrawnBalanceOfT2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCreateAsset {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateAssetTAccountId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateAssetDaoAssetId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateAssetBalanceOfT2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetMetadata {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetMetadataTAccountId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetMetadataDaoAssetId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetMetadataDaoAssetMeta2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBurn {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBurnTAccountId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBurnDaoAssetId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBurnBalanceOfT2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetWeightRateMultiple {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetWeightRateMultipleDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetWeightRateMultipleMultiple1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetExistenialDepposit {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetExistenialDeppositDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetExistenialDeppositExistenialDeposit1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *WeteeAssetsPalletEvent) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsTransferred = true
		err = decoder.Decode(&ty.AsTransferredDaoAssetId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferredTAccountId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferredTAccountId2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferredBalanceOfT3)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsBalanceUpdated = true
		err = decoder.Decode(&ty.AsBalanceUpdatedDaoAssetId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsBalanceUpdatedTAccountId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsBalanceUpdatedAmountOfT2)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsDeposited = true
		err = decoder.Decode(&ty.AsDepositedDaoAssetId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDepositedTAccountId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDepositedBalanceOfT2)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsWithdrawn = true
		err = decoder.Decode(&ty.AsWithdrawnDaoAssetId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsWithdrawnTAccountId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsWithdrawnBalanceOfT2)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsCreateAsset = true
		err = decoder.Decode(&ty.AsCreateAssetTAccountId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateAssetDaoAssetId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateAssetBalanceOfT2)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsSetMetadata = true
		err = decoder.Decode(&ty.AsSetMetadataTAccountId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSetMetadataDaoAssetId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSetMetadataDaoAssetMeta2)
		if err != nil {
			return err
		}
		return
	case 6:
		ty.IsBurn = true
		err = decoder.Decode(&ty.AsBurnTAccountId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsBurnDaoAssetId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsBurnBalanceOfT2)
		if err != nil {
			return err
		}
		return
	case 7:
		ty.IsSetWeightRateMultiple = true
		err = decoder.Decode(&ty.AsSetWeightRateMultipleDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSetWeightRateMultipleMultiple1)
		if err != nil {
			return err
		}
		return
	case 8:
		ty.IsSetExistenialDepposit = true
		err = decoder.Decode(&ty.AsSetExistenialDeppositDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSetExistenialDeppositExistenialDeposit1)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *WeteeAssetsPalletEvent) Variant() (uint8, error) {
	if ty.IsTransferred {
		return 0, nil
	}
	if ty.IsBalanceUpdated {
		return 1, nil
	}
	if ty.IsDeposited {
		return 2, nil
	}
	if ty.IsWithdrawn {
		return 3, nil
	}
	if ty.IsCreateAsset {
		return 4, nil
	}
	if ty.IsSetMetadata {
		return 5, nil
	}
	if ty.IsBurn {
		return 6, nil
	}
	if ty.IsSetWeightRateMultiple {
		return 7, nil
	}
	if ty.IsSetExistenialDepposit {
		return 8, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty WeteeAssetsPalletEvent) MarshalJSON() ([]byte, error) {
	if ty.IsTransferred {
		m := map[string]interface{}{"WeteeAssetsPalletEvent::Transferred": map[string]interface{}{
			"AsTransferredBalanceOfT3": ty.AsTransferredBalanceOfT3,
			"AsTransferredDaoAssetId0": ty.AsTransferredDaoAssetId0,
			"AsTransferredTAccountId1": ty.AsTransferredTAccountId1,
			"AsTransferredTAccountId2": ty.AsTransferredTAccountId2,
		}}
		return json.Marshal(m)
	}
	if ty.IsBalanceUpdated {
		m := map[string]interface{}{"WeteeAssetsPalletEvent::BalanceUpdated": map[string]interface{}{
			"AsBalanceUpdatedAmountOfT2":  ty.AsBalanceUpdatedAmountOfT2,
			"AsBalanceUpdatedDaoAssetId0": ty.AsBalanceUpdatedDaoAssetId0,
			"AsBalanceUpdatedTAccountId1": ty.AsBalanceUpdatedTAccountId1,
		}}
		return json.Marshal(m)
	}
	if ty.IsDeposited {
		m := map[string]interface{}{"WeteeAssetsPalletEvent::Deposited": map[string]interface{}{
			"AsDepositedBalanceOfT2": ty.AsDepositedBalanceOfT2,
			"AsDepositedDaoAssetId0": ty.AsDepositedDaoAssetId0,
			"AsDepositedTAccountId1": ty.AsDepositedTAccountId1,
		}}
		return json.Marshal(m)
	}
	if ty.IsWithdrawn {
		m := map[string]interface{}{"WeteeAssetsPalletEvent::Withdrawn": map[string]interface{}{
			"AsWithdrawnBalanceOfT2": ty.AsWithdrawnBalanceOfT2,
			"AsWithdrawnDaoAssetId0": ty.AsWithdrawnDaoAssetId0,
			"AsWithdrawnTAccountId1": ty.AsWithdrawnTAccountId1,
		}}
		return json.Marshal(m)
	}
	if ty.IsCreateAsset {
		m := map[string]interface{}{"WeteeAssetsPalletEvent::CreateAsset": map[string]interface{}{
			"AsCreateAssetBalanceOfT2": ty.AsCreateAssetBalanceOfT2,
			"AsCreateAssetDaoAssetId1": ty.AsCreateAssetDaoAssetId1,
			"AsCreateAssetTAccountId0": ty.AsCreateAssetTAccountId0,
		}}
		return json.Marshal(m)
	}
	if ty.IsSetMetadata {
		m := map[string]interface{}{"WeteeAssetsPalletEvent::SetMetadata": map[string]interface{}{
			"AsSetMetadataDaoAssetId1":   ty.AsSetMetadataDaoAssetId1,
			"AsSetMetadataDaoAssetMeta2": ty.AsSetMetadataDaoAssetMeta2,
			"AsSetMetadataTAccountId0":   ty.AsSetMetadataTAccountId0,
		}}
		return json.Marshal(m)
	}
	if ty.IsBurn {
		m := map[string]interface{}{"WeteeAssetsPalletEvent::Burn": map[string]interface{}{
			"AsBurnBalanceOfT2": ty.AsBurnBalanceOfT2,
			"AsBurnDaoAssetId1": ty.AsBurnDaoAssetId1,
			"AsBurnTAccountId0": ty.AsBurnTAccountId0,
		}}
		return json.Marshal(m)
	}
	if ty.IsSetWeightRateMultiple {
		m := map[string]interface{}{"WeteeAssetsPalletEvent::SetWeightRateMultiple": map[string]interface{}{
			"AsSetWeightRateMultipleDaoId0":    ty.AsSetWeightRateMultipleDaoId0,
			"AsSetWeightRateMultipleMultiple1": ty.AsSetWeightRateMultipleMultiple1,
		}}
		return json.Marshal(m)
	}
	if ty.IsSetExistenialDepposit {
		m := map[string]interface{}{"WeteeAssetsPalletEvent::SetExistenialDepposit": map[string]interface{}{
			"AsSetExistenialDeppositDaoId0":             ty.AsSetExistenialDeppositDaoId0,
			"AsSetExistenialDeppositExistenialDeposit1": ty.AsSetExistenialDeppositExistenialDeposit1,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated WeteeSudoPalletEvent with id=132
type WeteeSudoPalletEvent struct {
	IsSudoDone            bool
	AsSudoDoneSudo0       [32]byte
	AsSudoDoneSudoResult1 Result
	IsSetSudo             bool
	AsSetSudoDaoId0       uint64
	AsSetSudoSudoAccount1 [32]byte
	IsCloseSudo           bool
	AsCloseSudoDaoId0     uint64
}

func (ty WeteeSudoPalletEvent) Encode(encoder scale.Encoder) (err error) {
	if ty.IsSudoDone {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSudoDoneSudo0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSudoDoneSudoResult1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetSudo {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetSudoDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetSudoSudoAccount1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCloseSudo {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCloseSudoDaoId0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *WeteeSudoPalletEvent) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsSudoDone = true
		err = decoder.Decode(&ty.AsSudoDoneSudo0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSudoDoneSudoResult1)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsSetSudo = true
		err = decoder.Decode(&ty.AsSetSudoDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSetSudoSudoAccount1)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsCloseSudo = true
		err = decoder.Decode(&ty.AsCloseSudoDaoId0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *WeteeSudoPalletEvent) Variant() (uint8, error) {
	if ty.IsSudoDone {
		return 0, nil
	}
	if ty.IsSetSudo {
		return 1, nil
	}
	if ty.IsCloseSudo {
		return 2, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty WeteeSudoPalletEvent) MarshalJSON() ([]byte, error) {
	if ty.IsSudoDone {
		m := map[string]interface{}{"WeteeSudoPalletEvent::SudoDone": map[string]interface{}{
			"AsSudoDoneSudo0":       ty.AsSudoDoneSudo0,
			"AsSudoDoneSudoResult1": ty.AsSudoDoneSudoResult1,
		}}
		return json.Marshal(m)
	}
	if ty.IsSetSudo {
		m := map[string]interface{}{"WeteeSudoPalletEvent::SetSudo": map[string]interface{}{
			"AsSetSudoDaoId0":       ty.AsSetSudoDaoId0,
			"AsSetSudoSudoAccount1": ty.AsSetSudoSudoAccount1,
		}}
		return json.Marshal(m)
	}
	if ty.IsCloseSudo {
		m := map[string]interface{}{"WeteeSudoPalletEvent::CloseSudo": ty.AsCloseSudoDaoId0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated WeteeGuildPalletEvent with id=133
type WeteeGuildPalletEvent struct {
	IsGuildCreated            bool
	AsGuildCreatedDaoAssetId0 uint64
	AsGuildCreatedU641        uint64
	AsGuildCreatedTAccountId2 [32]byte
	IsGuildJoined             bool
	AsGuildJoinedDaoAssetId0  uint64
	AsGuildJoinedU641         uint64
	AsGuildJoinedTAccountId2  [32]byte
}

func (ty WeteeGuildPalletEvent) Encode(encoder scale.Encoder) (err error) {
	if ty.IsGuildCreated {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsGuildCreatedDaoAssetId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsGuildCreatedU641)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsGuildCreatedTAccountId2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsGuildJoined {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsGuildJoinedDaoAssetId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsGuildJoinedU641)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsGuildJoinedTAccountId2)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *WeteeGuildPalletEvent) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsGuildCreated = true
		err = decoder.Decode(&ty.AsGuildCreatedDaoAssetId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsGuildCreatedU641)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsGuildCreatedTAccountId2)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsGuildJoined = true
		err = decoder.Decode(&ty.AsGuildJoinedDaoAssetId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsGuildJoinedU641)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsGuildJoinedTAccountId2)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *WeteeGuildPalletEvent) Variant() (uint8, error) {
	if ty.IsGuildCreated {
		return 0, nil
	}
	if ty.IsGuildJoined {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty WeteeGuildPalletEvent) MarshalJSON() ([]byte, error) {
	if ty.IsGuildCreated {
		m := map[string]interface{}{"WeteeGuildPalletEvent::GuildCreated": map[string]interface{}{
			"AsGuildCreatedDaoAssetId0": ty.AsGuildCreatedDaoAssetId0,
			"AsGuildCreatedTAccountId2": ty.AsGuildCreatedTAccountId2,
			"AsGuildCreatedU641":        ty.AsGuildCreatedU641,
		}}
		return json.Marshal(m)
	}
	if ty.IsGuildJoined {
		m := map[string]interface{}{"WeteeGuildPalletEvent::GuildJoined": map[string]interface{}{
			"AsGuildJoinedDaoAssetId0": ty.AsGuildJoinedDaoAssetId0,
			"AsGuildJoinedTAccountId2": ty.AsGuildJoinedTAccountId2,
			"AsGuildJoinedU641":        ty.AsGuildJoinedU641,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated WeteeProjectPalletEvent with id=134
type WeteeProjectPalletEvent struct {
	IsProjectJoined                  bool
	AsProjectJoinedDaoAssetId0       uint64
	AsProjectJoinedProjectId1        uint64
	AsProjectJoinedTAccountId2       [32]byte
	IsProjectCreated                 bool
	AsProjectCreatedDaoAssetId0      uint64
	AsProjectCreatedProjectId1       uint64
	AsProjectCreatedTAccountId2      [32]byte
	IsTaskCreated                    bool
	AsTaskCreatedDaoAssetId0         uint64
	AsTaskCreatedProjectId1          uint64
	AsTaskCreatedU642                uint64
	AsTaskCreatedTAccountId3         [32]byte
	IsTaskInProgress                 bool
	AsTaskInProgressDaoAssetId0      uint64
	AsTaskInProgressProjectId1       uint64
	AsTaskInProgressU642             uint64
	AsTaskInProgressTAccountId3      [32]byte
	IsTaskInReview                   bool
	AsTaskInReviewDaoAssetId0        uint64
	AsTaskInReviewProjectId1         uint64
	AsTaskInReviewU642               uint64
	AsTaskInReviewTAccountId3        [32]byte
	IsProxyCallResult                bool
	AsProxyCallResultCaller0         [32]byte
	AsProxyCallResultProjectAccount1 [32]byte
	AsProxyCallResultCallResult2     Result
}

func (ty WeteeProjectPalletEvent) Encode(encoder scale.Encoder) (err error) {
	if ty.IsProjectJoined {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsProjectJoinedDaoAssetId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsProjectJoinedProjectId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsProjectJoinedTAccountId2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsProjectCreated {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsProjectCreatedDaoAssetId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsProjectCreatedProjectId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsProjectCreatedTAccountId2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTaskCreated {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTaskCreatedDaoAssetId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTaskCreatedProjectId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTaskCreatedU642)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTaskCreatedTAccountId3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTaskInProgress {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTaskInProgressDaoAssetId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTaskInProgressProjectId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTaskInProgressU642)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTaskInProgressTAccountId3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTaskInReview {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTaskInReviewDaoAssetId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTaskInReviewProjectId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTaskInReviewU642)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTaskInReviewTAccountId3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsProxyCallResult {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsProxyCallResultCaller0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsProxyCallResultProjectAccount1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsProxyCallResultCallResult2)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *WeteeProjectPalletEvent) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsProjectJoined = true
		err = decoder.Decode(&ty.AsProjectJoinedDaoAssetId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsProjectJoinedProjectId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsProjectJoinedTAccountId2)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsProjectCreated = true
		err = decoder.Decode(&ty.AsProjectCreatedDaoAssetId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsProjectCreatedProjectId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsProjectCreatedTAccountId2)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsTaskCreated = true
		err = decoder.Decode(&ty.AsTaskCreatedDaoAssetId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTaskCreatedProjectId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTaskCreatedU642)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTaskCreatedTAccountId3)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsTaskInProgress = true
		err = decoder.Decode(&ty.AsTaskInProgressDaoAssetId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTaskInProgressProjectId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTaskInProgressU642)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTaskInProgressTAccountId3)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsTaskInReview = true
		err = decoder.Decode(&ty.AsTaskInReviewDaoAssetId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTaskInReviewProjectId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTaskInReviewU642)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTaskInReviewTAccountId3)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsProxyCallResult = true
		err = decoder.Decode(&ty.AsProxyCallResultCaller0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsProxyCallResultProjectAccount1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsProxyCallResultCallResult2)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *WeteeProjectPalletEvent) Variant() (uint8, error) {
	if ty.IsProjectJoined {
		return 0, nil
	}
	if ty.IsProjectCreated {
		return 1, nil
	}
	if ty.IsTaskCreated {
		return 2, nil
	}
	if ty.IsTaskInProgress {
		return 3, nil
	}
	if ty.IsTaskInReview {
		return 4, nil
	}
	if ty.IsProxyCallResult {
		return 5, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty WeteeProjectPalletEvent) MarshalJSON() ([]byte, error) {
	if ty.IsProjectJoined {
		m := map[string]interface{}{"WeteeProjectPalletEvent::ProjectJoined": map[string]interface{}{
			"AsProjectJoinedDaoAssetId0": ty.AsProjectJoinedDaoAssetId0,
			"AsProjectJoinedProjectId1":  ty.AsProjectJoinedProjectId1,
			"AsProjectJoinedTAccountId2": ty.AsProjectJoinedTAccountId2,
		}}
		return json.Marshal(m)
	}
	if ty.IsProjectCreated {
		m := map[string]interface{}{"WeteeProjectPalletEvent::ProjectCreated": map[string]interface{}{
			"AsProjectCreatedDaoAssetId0": ty.AsProjectCreatedDaoAssetId0,
			"AsProjectCreatedProjectId1":  ty.AsProjectCreatedProjectId1,
			"AsProjectCreatedTAccountId2": ty.AsProjectCreatedTAccountId2,
		}}
		return json.Marshal(m)
	}
	if ty.IsTaskCreated {
		m := map[string]interface{}{"WeteeProjectPalletEvent::TaskCreated": map[string]interface{}{
			"AsTaskCreatedDaoAssetId0": ty.AsTaskCreatedDaoAssetId0,
			"AsTaskCreatedProjectId1":  ty.AsTaskCreatedProjectId1,
			"AsTaskCreatedTAccountId3": ty.AsTaskCreatedTAccountId3,
			"AsTaskCreatedU642":        ty.AsTaskCreatedU642,
		}}
		return json.Marshal(m)
	}
	if ty.IsTaskInProgress {
		m := map[string]interface{}{"WeteeProjectPalletEvent::TaskInProgress": map[string]interface{}{
			"AsTaskInProgressDaoAssetId0": ty.AsTaskInProgressDaoAssetId0,
			"AsTaskInProgressProjectId1":  ty.AsTaskInProgressProjectId1,
			"AsTaskInProgressTAccountId3": ty.AsTaskInProgressTAccountId3,
			"AsTaskInProgressU642":        ty.AsTaskInProgressU642,
		}}
		return json.Marshal(m)
	}
	if ty.IsTaskInReview {
		m := map[string]interface{}{"WeteeProjectPalletEvent::TaskInReview": map[string]interface{}{
			"AsTaskInReviewDaoAssetId0": ty.AsTaskInReviewDaoAssetId0,
			"AsTaskInReviewProjectId1":  ty.AsTaskInReviewProjectId1,
			"AsTaskInReviewTAccountId3": ty.AsTaskInReviewTAccountId3,
			"AsTaskInReviewU642":        ty.AsTaskInReviewU642,
		}}
		return json.Marshal(m)
	}
	if ty.IsProxyCallResult {
		m := map[string]interface{}{"WeteeProjectPalletEvent::ProxyCallResult": map[string]interface{}{
			"AsProxyCallResultCallResult2":     ty.AsProxyCallResultCallResult2,
			"AsProxyCallResultCaller0":         ty.AsProxyCallResultCaller0,
			"AsProxyCallResultProjectAccount1": ty.AsProxyCallResultProjectAccount1,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated ParachainWeteeRuntimeVotePledge with id=136
type Pledge struct {
	IsFungToken       bool
	AsFungTokenField0 types.U128
}

func (ty Pledge) Encode(encoder scale.Encoder) (err error) {
	if ty.IsFungToken {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsFungTokenField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Pledge) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsFungToken = true
		err = decoder.Decode(&ty.AsFungTokenField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Pledge) Variant() (uint8, error) {
	if ty.IsFungToken {
		return 0, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Pledge) MarshalJSON() ([]byte, error) {
	if ty.IsFungToken {
		m := map[string]interface{}{"Pledge::FungToken": ty.AsFungTokenField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated WeteeGovPalletEvent with id=135
type WeteeGovPalletEvent struct {
	IsProposed                    bool
	AsProposedDaoAssetId0         uint64
	AsProposedTHash1              [32]byte
	IsRecreate                    bool
	AsRecreateDaoAssetId0         uint64
	AsRecreateBalanceOfT1         types.U128
	IsStartTable                  bool
	AsStartTableDaoAssetId0       uint64
	AsStartTablePropIndex1        uint32
	IsVote                        bool
	AsVoteDaoAssetId0             uint64
	AsVotePropIndex1              uint32
	AsVoteTPledge2                Pledge
	IsCancelVote                  bool
	AsCancelVoteDaoAssetId0       uint64
	AsCancelVotePropIndex1        uint32
	IsEnactProposal               bool
	AsEnactProposalDaoId0         uint64
	AsEnactProposalIndex1         uint32
	AsEnactProposalResult2        Result
	IsUnlock                      bool
	AsUnlockTAccountId0           [32]byte
	AsUnlockDaoAssetId1           uint64
	AsUnlockTPledge2              Pledge
	IsUnreserved                  bool
	AsUnreservedTAccountId0       [32]byte
	AsUnreservedBalanceOfT1       types.U128
	IsSetMinVoteWeight            bool
	AsSetMinVoteWeightDaoAssetId0 uint64
	AsSetMinVoteWeightTCallId1    uint32
	AsSetMinVoteWeightBalanceOfT2 types.U128
	IsSetMaxPreProps              bool
	AsSetMaxPrePropsDaoId0        uint64
	AsSetMaxPrePropsMax1          uint32
	IsVoteModelUpdate             bool
	AsVoteModelUpdateDaoId0       uint64
	AsVoteModelUpdateModel1       byte
	IsPeriodUpdate                bool
	AsPeriodUpdateDaoId0          uint64
}

func (ty WeteeGovPalletEvent) Encode(encoder scale.Encoder) (err error) {
	if ty.IsProposed {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsProposedDaoAssetId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsProposedTHash1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsRecreate {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsRecreateDaoAssetId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsRecreateBalanceOfT1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsStartTable {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsStartTableDaoAssetId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsStartTablePropIndex1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsVote {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsVoteDaoAssetId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsVotePropIndex1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsVoteTPledge2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCancelVote {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCancelVoteDaoAssetId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCancelVotePropIndex1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsEnactProposal {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsEnactProposalDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsEnactProposalIndex1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsEnactProposalResult2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnlock {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnlockTAccountId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnlockDaoAssetId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnlockTPledge2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnreserved {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnreservedTAccountId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnreservedBalanceOfT1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetMinVoteWeight {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetMinVoteWeightDaoAssetId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetMinVoteWeightTCallId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetMinVoteWeightBalanceOfT2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetMaxPreProps {
		err = encoder.PushByte(9)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetMaxPrePropsDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetMaxPrePropsMax1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsVoteModelUpdate {
		err = encoder.PushByte(10)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsVoteModelUpdateDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsVoteModelUpdateModel1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsPeriodUpdate {
		err = encoder.PushByte(11)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPeriodUpdateDaoId0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *WeteeGovPalletEvent) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsProposed = true
		err = decoder.Decode(&ty.AsProposedDaoAssetId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsProposedTHash1)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsRecreate = true
		err = decoder.Decode(&ty.AsRecreateDaoAssetId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsRecreateBalanceOfT1)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsStartTable = true
		err = decoder.Decode(&ty.AsStartTableDaoAssetId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsStartTablePropIndex1)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsVote = true
		err = decoder.Decode(&ty.AsVoteDaoAssetId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsVotePropIndex1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsVoteTPledge2)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsCancelVote = true
		err = decoder.Decode(&ty.AsCancelVoteDaoAssetId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCancelVotePropIndex1)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsEnactProposal = true
		err = decoder.Decode(&ty.AsEnactProposalDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsEnactProposalIndex1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsEnactProposalResult2)
		if err != nil {
			return err
		}
		return
	case 6:
		ty.IsUnlock = true
		err = decoder.Decode(&ty.AsUnlockTAccountId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUnlockDaoAssetId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUnlockTPledge2)
		if err != nil {
			return err
		}
		return
	case 7:
		ty.IsUnreserved = true
		err = decoder.Decode(&ty.AsUnreservedTAccountId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUnreservedBalanceOfT1)
		if err != nil {
			return err
		}
		return
	case 8:
		ty.IsSetMinVoteWeight = true
		err = decoder.Decode(&ty.AsSetMinVoteWeightDaoAssetId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSetMinVoteWeightTCallId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSetMinVoteWeightBalanceOfT2)
		if err != nil {
			return err
		}
		return
	case 9:
		ty.IsSetMaxPreProps = true
		err = decoder.Decode(&ty.AsSetMaxPrePropsDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSetMaxPrePropsMax1)
		if err != nil {
			return err
		}
		return
	case 10:
		ty.IsVoteModelUpdate = true
		err = decoder.Decode(&ty.AsVoteModelUpdateDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsVoteModelUpdateModel1)
		if err != nil {
			return err
		}
		return
	case 11:
		ty.IsPeriodUpdate = true
		err = decoder.Decode(&ty.AsPeriodUpdateDaoId0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *WeteeGovPalletEvent) Variant() (uint8, error) {
	if ty.IsProposed {
		return 0, nil
	}
	if ty.IsRecreate {
		return 1, nil
	}
	if ty.IsStartTable {
		return 2, nil
	}
	if ty.IsVote {
		return 3, nil
	}
	if ty.IsCancelVote {
		return 4, nil
	}
	if ty.IsEnactProposal {
		return 5, nil
	}
	if ty.IsUnlock {
		return 6, nil
	}
	if ty.IsUnreserved {
		return 7, nil
	}
	if ty.IsSetMinVoteWeight {
		return 8, nil
	}
	if ty.IsSetMaxPreProps {
		return 9, nil
	}
	if ty.IsVoteModelUpdate {
		return 10, nil
	}
	if ty.IsPeriodUpdate {
		return 11, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty WeteeGovPalletEvent) MarshalJSON() ([]byte, error) {
	if ty.IsProposed {
		m := map[string]interface{}{"WeteeGovPalletEvent::Proposed": map[string]interface{}{
			"AsProposedDaoAssetId0": ty.AsProposedDaoAssetId0,
			"AsProposedTHash1":      ty.AsProposedTHash1,
		}}
		return json.Marshal(m)
	}
	if ty.IsRecreate {
		m := map[string]interface{}{"WeteeGovPalletEvent::Recreate": map[string]interface{}{
			"AsRecreateBalanceOfT1": ty.AsRecreateBalanceOfT1,
			"AsRecreateDaoAssetId0": ty.AsRecreateDaoAssetId0,
		}}
		return json.Marshal(m)
	}
	if ty.IsStartTable {
		m := map[string]interface{}{"WeteeGovPalletEvent::StartTable": map[string]interface{}{
			"AsStartTableDaoAssetId0": ty.AsStartTableDaoAssetId0,
			"AsStartTablePropIndex1":  ty.AsStartTablePropIndex1,
		}}
		return json.Marshal(m)
	}
	if ty.IsVote {
		m := map[string]interface{}{"WeteeGovPalletEvent::Vote": map[string]interface{}{
			"AsVoteDaoAssetId0": ty.AsVoteDaoAssetId0,
			"AsVotePropIndex1":  ty.AsVotePropIndex1,
			"AsVoteTPledge2":    ty.AsVoteTPledge2,
		}}
		return json.Marshal(m)
	}
	if ty.IsCancelVote {
		m := map[string]interface{}{"WeteeGovPalletEvent::CancelVote": map[string]interface{}{
			"AsCancelVoteDaoAssetId0": ty.AsCancelVoteDaoAssetId0,
			"AsCancelVotePropIndex1":  ty.AsCancelVotePropIndex1,
		}}
		return json.Marshal(m)
	}
	if ty.IsEnactProposal {
		m := map[string]interface{}{"WeteeGovPalletEvent::EnactProposal": map[string]interface{}{
			"AsEnactProposalDaoId0":  ty.AsEnactProposalDaoId0,
			"AsEnactProposalIndex1":  ty.AsEnactProposalIndex1,
			"AsEnactProposalResult2": ty.AsEnactProposalResult2,
		}}
		return json.Marshal(m)
	}
	if ty.IsUnlock {
		m := map[string]interface{}{"WeteeGovPalletEvent::Unlock": map[string]interface{}{
			"AsUnlockDaoAssetId1": ty.AsUnlockDaoAssetId1,
			"AsUnlockTAccountId0": ty.AsUnlockTAccountId0,
			"AsUnlockTPledge2":    ty.AsUnlockTPledge2,
		}}
		return json.Marshal(m)
	}
	if ty.IsUnreserved {
		m := map[string]interface{}{"WeteeGovPalletEvent::Unreserved": map[string]interface{}{
			"AsUnreservedBalanceOfT1": ty.AsUnreservedBalanceOfT1,
			"AsUnreservedTAccountId0": ty.AsUnreservedTAccountId0,
		}}
		return json.Marshal(m)
	}
	if ty.IsSetMinVoteWeight {
		m := map[string]interface{}{"WeteeGovPalletEvent::SetMinVoteWeight": map[string]interface{}{
			"AsSetMinVoteWeightBalanceOfT2": ty.AsSetMinVoteWeightBalanceOfT2,
			"AsSetMinVoteWeightDaoAssetId0": ty.AsSetMinVoteWeightDaoAssetId0,
			"AsSetMinVoteWeightTCallId1":    ty.AsSetMinVoteWeightTCallId1,
		}}
		return json.Marshal(m)
	}
	if ty.IsSetMaxPreProps {
		m := map[string]interface{}{"WeteeGovPalletEvent::SetMaxPreProps": map[string]interface{}{
			"AsSetMaxPrePropsDaoId0": ty.AsSetMaxPrePropsDaoId0,
			"AsSetMaxPrePropsMax1":   ty.AsSetMaxPrePropsMax1,
		}}
		return json.Marshal(m)
	}
	if ty.IsVoteModelUpdate {
		m := map[string]interface{}{"WeteeGovPalletEvent::VoteModelUpdate": map[string]interface{}{
			"AsVoteModelUpdateDaoId0": ty.AsVoteModelUpdateDaoId0,
			"AsVoteModelUpdateModel1": ty.AsVoteModelUpdateModel1,
		}}
		return json.Marshal(m)
	}
	if ty.IsPeriodUpdate {
		m := map[string]interface{}{"WeteeGovPalletEvent::PeriodUpdate": ty.AsPeriodUpdateDaoId0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated WeteeTreasuryPalletEvent with id=137
type WeteeTreasuryPalletEvent struct {
	IsSpendApproved             bool
	AsSpendApprovedDaoId0       uint64
	AsSpendApprovedAmount1      types.U128
	AsSpendApprovedBeneficiary2 [32]byte
	IsSpendRejected             bool
	AsSpendRejectedDaoId0       uint64
	AsSpendRejectedAmount1      types.U128
	AsSpendRejectedBeneficiary2 [32]byte
}

func (ty WeteeTreasuryPalletEvent) Encode(encoder scale.Encoder) (err error) {
	if ty.IsSpendApproved {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSpendApprovedDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSpendApprovedAmount1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSpendApprovedBeneficiary2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSpendRejected {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSpendRejectedDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSpendRejectedAmount1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSpendRejectedBeneficiary2)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *WeteeTreasuryPalletEvent) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsSpendApproved = true
		err = decoder.Decode(&ty.AsSpendApprovedDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSpendApprovedAmount1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSpendApprovedBeneficiary2)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsSpendRejected = true
		err = decoder.Decode(&ty.AsSpendRejectedDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSpendRejectedAmount1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSpendRejectedBeneficiary2)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *WeteeTreasuryPalletEvent) Variant() (uint8, error) {
	if ty.IsSpendApproved {
		return 0, nil
	}
	if ty.IsSpendRejected {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty WeteeTreasuryPalletEvent) MarshalJSON() ([]byte, error) {
	if ty.IsSpendApproved {
		m := map[string]interface{}{"WeteeTreasuryPalletEvent::SpendApproved": map[string]interface{}{
			"AsSpendApprovedAmount1":      ty.AsSpendApprovedAmount1,
			"AsSpendApprovedBeneficiary2": ty.AsSpendApprovedBeneficiary2,
			"AsSpendApprovedDaoId0":       ty.AsSpendApprovedDaoId0,
		}}
		return json.Marshal(m)
	}
	if ty.IsSpendRejected {
		m := map[string]interface{}{"WeteeTreasuryPalletEvent::SpendRejected": map[string]interface{}{
			"AsSpendRejectedAmount1":      ty.AsSpendRejectedAmount1,
			"AsSpendRejectedBeneficiary2": ty.AsSpendRejectedBeneficiary2,
			"AsSpendRejectedDaoId0":       ty.AsSpendRejectedDaoId0,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated WeteePrimitivesTypesWorkType with id=140
type WorkType struct {
	IsAPP  bool
	IsTASK bool
	IsGPU  bool
}

func (ty WorkType) Encode(encoder scale.Encoder) (err error) {
	if ty.IsAPP {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTASK {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsGPU {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *WorkType) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsAPP = true
		return
	case 1:
		ty.IsTASK = true
		return
	case 2:
		ty.IsGPU = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *WorkType) Variant() (uint8, error) {
	if ty.IsAPP {
		return 0, nil
	}
	if ty.IsTASK {
		return 1, nil
	}
	if ty.IsGPU {
		return 2, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty WorkType) MarshalJSON() ([]byte, error) {
	if ty.IsAPP {
		return json.Marshal("WorkType::APP")
	}
	if ty.IsTASK {
		return json.Marshal("WorkType::TASK")
	}
	if ty.IsGPU {
		return json.Marshal("WorkType::GPU")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated wetee_primitives_types_WorkId with id={{false [139]}}
type WorkId struct {
	// Field 0 with TypeId=140
	Wtype WorkType
	// Field 1 with TypeId=12
	Id uint64
}

// Generated WeteeAppPalletEvent with id=138
type WeteeAppPalletEvent struct {
	IsCreatedApp         bool
	AsCreatedAppCreator0 [32]byte
	AsCreatedAppId1      uint64
	IsAppRuning          bool
	AsAppRuningCreator0  [32]byte
	AsAppRuningId1       uint64
	IsCharge             bool
	AsChargeFrom0        [32]byte
	AsChargeTo1          [32]byte
	AsChargeAmount2      types.U128
	IsPayRunFee          bool
	AsPayRunFeeFrom0     [32]byte
	AsPayRunFeeTo1       [32]byte
	AsPayRunFeeAmount2   types.U128
	IsWorkUpdated        bool
	AsWorkUpdatedUser0   [32]byte
	AsWorkUpdatedWorkId1 WorkId
	IsWorkStopped        bool
	AsWorkStoppedUser0   [32]byte
	AsWorkStoppedWorkId1 WorkId
}

func (ty WeteeAppPalletEvent) Encode(encoder scale.Encoder) (err error) {
	if ty.IsCreatedApp {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreatedAppCreator0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreatedAppId1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAppRuning {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAppRuningCreator0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAppRuningId1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCharge {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsChargeFrom0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsChargeTo1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsChargeAmount2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsPayRunFee {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPayRunFeeFrom0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPayRunFeeTo1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPayRunFeeAmount2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWorkUpdated {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWorkUpdatedUser0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWorkUpdatedWorkId1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWorkStopped {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWorkStoppedUser0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWorkStoppedWorkId1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *WeteeAppPalletEvent) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsCreatedApp = true
		err = decoder.Decode(&ty.AsCreatedAppCreator0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreatedAppId1)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsAppRuning = true
		err = decoder.Decode(&ty.AsAppRuningCreator0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsAppRuningId1)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsCharge = true
		err = decoder.Decode(&ty.AsChargeFrom0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsChargeTo1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsChargeAmount2)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsPayRunFee = true
		err = decoder.Decode(&ty.AsPayRunFeeFrom0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsPayRunFeeTo1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsPayRunFeeAmount2)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsWorkUpdated = true
		err = decoder.Decode(&ty.AsWorkUpdatedUser0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsWorkUpdatedWorkId1)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsWorkStopped = true
		err = decoder.Decode(&ty.AsWorkStoppedUser0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsWorkStoppedWorkId1)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *WeteeAppPalletEvent) Variant() (uint8, error) {
	if ty.IsCreatedApp {
		return 0, nil
	}
	if ty.IsAppRuning {
		return 1, nil
	}
	if ty.IsCharge {
		return 2, nil
	}
	if ty.IsPayRunFee {
		return 3, nil
	}
	if ty.IsWorkUpdated {
		return 4, nil
	}
	if ty.IsWorkStopped {
		return 5, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty WeteeAppPalletEvent) MarshalJSON() ([]byte, error) {
	if ty.IsCreatedApp {
		m := map[string]interface{}{"WeteeAppPalletEvent::CreatedApp": map[string]interface{}{
			"AsCreatedAppCreator0": ty.AsCreatedAppCreator0,
			"AsCreatedAppId1":      ty.AsCreatedAppId1,
		}}
		return json.Marshal(m)
	}
	if ty.IsAppRuning {
		m := map[string]interface{}{"WeteeAppPalletEvent::AppRuning": map[string]interface{}{
			"AsAppRuningCreator0": ty.AsAppRuningCreator0,
			"AsAppRuningId1":      ty.AsAppRuningId1,
		}}
		return json.Marshal(m)
	}
	if ty.IsCharge {
		m := map[string]interface{}{"WeteeAppPalletEvent::Charge": map[string]interface{}{
			"AsChargeAmount2": ty.AsChargeAmount2,
			"AsChargeFrom0":   ty.AsChargeFrom0,
			"AsChargeTo1":     ty.AsChargeTo1,
		}}
		return json.Marshal(m)
	}
	if ty.IsPayRunFee {
		m := map[string]interface{}{"WeteeAppPalletEvent::PayRunFee": map[string]interface{}{
			"AsPayRunFeeAmount2": ty.AsPayRunFeeAmount2,
			"AsPayRunFeeFrom0":   ty.AsPayRunFeeFrom0,
			"AsPayRunFeeTo1":     ty.AsPayRunFeeTo1,
		}}
		return json.Marshal(m)
	}
	if ty.IsWorkUpdated {
		m := map[string]interface{}{"WeteeAppPalletEvent::WorkUpdated": map[string]interface{}{
			"AsWorkUpdatedUser0":   ty.AsWorkUpdatedUser0,
			"AsWorkUpdatedWorkId1": ty.AsWorkUpdatedWorkId1,
		}}
		return json.Marshal(m)
	}
	if ty.IsWorkStopped {
		m := map[string]interface{}{"WeteeAppPalletEvent::WorkStopped": map[string]interface{}{
			"AsWorkStoppedUser0":   ty.AsWorkStoppedUser0,
			"AsWorkStoppedWorkId1": ty.AsWorkStoppedWorkId1,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated WeteeTaskPalletEvent with id=141
type WeteeTaskPalletEvent struct {
	IsCreatedTask         bool
	AsCreatedTaskCreator0 [32]byte
	AsCreatedTaskId1      uint64
	IsTaskRuning          bool
	AsTaskRuningCreator0  [32]byte
	AsTaskRuningId1       uint64
	IsTaskStop            bool
	AsTaskStopCreator0    [32]byte
	AsTaskStopId1         uint64
	IsCharge              bool
	AsChargeFrom0         [32]byte
	AsChargeTo1           [32]byte
	AsChargeAmount2       types.U128
	IsPayRunFee           bool
	AsPayRunFeeFrom0      [32]byte
	AsPayRunFeeTo1        [32]byte
	AsPayRunFeeAmount2    types.U128
	IsWorkUpdated         bool
	AsWorkUpdatedUser0    [32]byte
	AsWorkUpdatedWorkId1  WorkId
}

func (ty WeteeTaskPalletEvent) Encode(encoder scale.Encoder) (err error) {
	if ty.IsCreatedTask {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreatedTaskCreator0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreatedTaskId1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTaskRuning {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTaskRuningCreator0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTaskRuningId1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTaskStop {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTaskStopCreator0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTaskStopId1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCharge {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsChargeFrom0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsChargeTo1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsChargeAmount2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsPayRunFee {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPayRunFeeFrom0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPayRunFeeTo1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPayRunFeeAmount2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWorkUpdated {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWorkUpdatedUser0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWorkUpdatedWorkId1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *WeteeTaskPalletEvent) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsCreatedTask = true
		err = decoder.Decode(&ty.AsCreatedTaskCreator0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreatedTaskId1)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsTaskRuning = true
		err = decoder.Decode(&ty.AsTaskRuningCreator0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTaskRuningId1)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsTaskStop = true
		err = decoder.Decode(&ty.AsTaskStopCreator0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTaskStopId1)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsCharge = true
		err = decoder.Decode(&ty.AsChargeFrom0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsChargeTo1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsChargeAmount2)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsPayRunFee = true
		err = decoder.Decode(&ty.AsPayRunFeeFrom0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsPayRunFeeTo1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsPayRunFeeAmount2)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsWorkUpdated = true
		err = decoder.Decode(&ty.AsWorkUpdatedUser0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsWorkUpdatedWorkId1)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *WeteeTaskPalletEvent) Variant() (uint8, error) {
	if ty.IsCreatedTask {
		return 0, nil
	}
	if ty.IsTaskRuning {
		return 1, nil
	}
	if ty.IsTaskStop {
		return 2, nil
	}
	if ty.IsCharge {
		return 3, nil
	}
	if ty.IsPayRunFee {
		return 4, nil
	}
	if ty.IsWorkUpdated {
		return 5, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty WeteeTaskPalletEvent) MarshalJSON() ([]byte, error) {
	if ty.IsCreatedTask {
		m := map[string]interface{}{"WeteeTaskPalletEvent::CreatedTask": map[string]interface{}{
			"AsCreatedTaskCreator0": ty.AsCreatedTaskCreator0,
			"AsCreatedTaskId1":      ty.AsCreatedTaskId1,
		}}
		return json.Marshal(m)
	}
	if ty.IsTaskRuning {
		m := map[string]interface{}{"WeteeTaskPalletEvent::TaskRuning": map[string]interface{}{
			"AsTaskRuningCreator0": ty.AsTaskRuningCreator0,
			"AsTaskRuningId1":      ty.AsTaskRuningId1,
		}}
		return json.Marshal(m)
	}
	if ty.IsTaskStop {
		m := map[string]interface{}{"WeteeTaskPalletEvent::TaskStop": map[string]interface{}{
			"AsTaskStopCreator0": ty.AsTaskStopCreator0,
			"AsTaskStopId1":      ty.AsTaskStopId1,
		}}
		return json.Marshal(m)
	}
	if ty.IsCharge {
		m := map[string]interface{}{"WeteeTaskPalletEvent::Charge": map[string]interface{}{
			"AsChargeAmount2": ty.AsChargeAmount2,
			"AsChargeFrom0":   ty.AsChargeFrom0,
			"AsChargeTo1":     ty.AsChargeTo1,
		}}
		return json.Marshal(m)
	}
	if ty.IsPayRunFee {
		m := map[string]interface{}{"WeteeTaskPalletEvent::PayRunFee": map[string]interface{}{
			"AsPayRunFeeAmount2": ty.AsPayRunFeeAmount2,
			"AsPayRunFeeFrom0":   ty.AsPayRunFeeFrom0,
			"AsPayRunFeeTo1":     ty.AsPayRunFeeTo1,
		}}
		return json.Marshal(m)
	}
	if ty.IsWorkUpdated {
		m := map[string]interface{}{"WeteeTaskPalletEvent::WorkUpdated": map[string]interface{}{
			"AsWorkUpdatedUser0":   ty.AsWorkUpdatedUser0,
			"AsWorkUpdatedWorkId1": ty.AsWorkUpdatedWorkId1,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated WeteeGpuPalletEvent with id=142
type WeteeGpuPalletEvent struct {
	IsCreatedApp         bool
	AsCreatedAppCreator0 [32]byte
	AsCreatedAppId1      uint64
	IsAppRuning          bool
	AsAppRuningCreator0  [32]byte
	AsAppRuningId1       uint64
	IsCharge             bool
	AsChargeFrom0        [32]byte
	AsChargeTo1          [32]byte
	AsChargeAmount2      types.U128
	IsPayRunFee          bool
	AsPayRunFeeFrom0     [32]byte
	AsPayRunFeeTo1       [32]byte
	AsPayRunFeeAmount2   types.U128
	IsWorkUpdated        bool
	AsWorkUpdatedUser0   [32]byte
	AsWorkUpdatedWorkId1 WorkId
	IsWorkStopped        bool
	AsWorkStoppedUser0   [32]byte
	AsWorkStoppedWorkId1 WorkId
}

func (ty WeteeGpuPalletEvent) Encode(encoder scale.Encoder) (err error) {
	if ty.IsCreatedApp {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreatedAppCreator0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreatedAppId1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAppRuning {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAppRuningCreator0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAppRuningId1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCharge {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsChargeFrom0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsChargeTo1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsChargeAmount2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsPayRunFee {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPayRunFeeFrom0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPayRunFeeTo1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPayRunFeeAmount2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWorkUpdated {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWorkUpdatedUser0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWorkUpdatedWorkId1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWorkStopped {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWorkStoppedUser0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWorkStoppedWorkId1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *WeteeGpuPalletEvent) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsCreatedApp = true
		err = decoder.Decode(&ty.AsCreatedAppCreator0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreatedAppId1)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsAppRuning = true
		err = decoder.Decode(&ty.AsAppRuningCreator0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsAppRuningId1)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsCharge = true
		err = decoder.Decode(&ty.AsChargeFrom0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsChargeTo1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsChargeAmount2)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsPayRunFee = true
		err = decoder.Decode(&ty.AsPayRunFeeFrom0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsPayRunFeeTo1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsPayRunFeeAmount2)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsWorkUpdated = true
		err = decoder.Decode(&ty.AsWorkUpdatedUser0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsWorkUpdatedWorkId1)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsWorkStopped = true
		err = decoder.Decode(&ty.AsWorkStoppedUser0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsWorkStoppedWorkId1)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *WeteeGpuPalletEvent) Variant() (uint8, error) {
	if ty.IsCreatedApp {
		return 0, nil
	}
	if ty.IsAppRuning {
		return 1, nil
	}
	if ty.IsCharge {
		return 2, nil
	}
	if ty.IsPayRunFee {
		return 3, nil
	}
	if ty.IsWorkUpdated {
		return 4, nil
	}
	if ty.IsWorkStopped {
		return 5, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty WeteeGpuPalletEvent) MarshalJSON() ([]byte, error) {
	if ty.IsCreatedApp {
		m := map[string]interface{}{"WeteeGpuPalletEvent::CreatedApp": map[string]interface{}{
			"AsCreatedAppCreator0": ty.AsCreatedAppCreator0,
			"AsCreatedAppId1":      ty.AsCreatedAppId1,
		}}
		return json.Marshal(m)
	}
	if ty.IsAppRuning {
		m := map[string]interface{}{"WeteeGpuPalletEvent::AppRuning": map[string]interface{}{
			"AsAppRuningCreator0": ty.AsAppRuningCreator0,
			"AsAppRuningId1":      ty.AsAppRuningId1,
		}}
		return json.Marshal(m)
	}
	if ty.IsCharge {
		m := map[string]interface{}{"WeteeGpuPalletEvent::Charge": map[string]interface{}{
			"AsChargeAmount2": ty.AsChargeAmount2,
			"AsChargeFrom0":   ty.AsChargeFrom0,
			"AsChargeTo1":     ty.AsChargeTo1,
		}}
		return json.Marshal(m)
	}
	if ty.IsPayRunFee {
		m := map[string]interface{}{"WeteeGpuPalletEvent::PayRunFee": map[string]interface{}{
			"AsPayRunFeeAmount2": ty.AsPayRunFeeAmount2,
			"AsPayRunFeeFrom0":   ty.AsPayRunFeeFrom0,
			"AsPayRunFeeTo1":     ty.AsPayRunFeeTo1,
		}}
		return json.Marshal(m)
	}
	if ty.IsWorkUpdated {
		m := map[string]interface{}{"WeteeGpuPalletEvent::WorkUpdated": map[string]interface{}{
			"AsWorkUpdatedUser0":   ty.AsWorkUpdatedUser0,
			"AsWorkUpdatedWorkId1": ty.AsWorkUpdatedWorkId1,
		}}
		return json.Marshal(m)
	}
	if ty.IsWorkStopped {
		m := map[string]interface{}{"WeteeGpuPalletEvent::WorkStopped": map[string]interface{}{
			"AsWorkStoppedUser0":   ty.AsWorkStoppedUser0,
			"AsWorkStoppedWorkId1": ty.AsWorkStoppedWorkId1,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated WeteeWorkerPalletEvent with id=143
type WeteeWorkerPalletEvent struct {
	IsClusterCreated                  bool
	AsClusterCreatedCreator0          [32]byte
	IsWorkRuning                      bool
	AsWorkRuningUser0                 [32]byte
	AsWorkRuningWorkId1               WorkId
	AsWorkRuningClusterId2            uint64
	IsWorkContractUpdated             bool
	AsWorkContractUpdatedUser0        [32]byte
	AsWorkContractUpdatedWorkId1      WorkId
	AsWorkContractUpdatedClusterId2   uint64
	IsWorkContractWithdrawaled        bool
	AsWorkContractWithdrawaledWorkId0 WorkId
	IsWorkStoped                      bool
	AsWorkStopedUser0                 [32]byte
	AsWorkStopedWorkId1               WorkId
	AsWorkStopedClusterId2            uint64
}

func (ty WeteeWorkerPalletEvent) Encode(encoder scale.Encoder) (err error) {
	if ty.IsClusterCreated {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClusterCreatedCreator0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWorkRuning {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWorkRuningUser0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWorkRuningWorkId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWorkRuningClusterId2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWorkContractUpdated {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWorkContractUpdatedUser0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWorkContractUpdatedWorkId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWorkContractUpdatedClusterId2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWorkContractWithdrawaled {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWorkContractWithdrawaledWorkId0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWorkStoped {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWorkStopedUser0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWorkStopedWorkId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWorkStopedClusterId2)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *WeteeWorkerPalletEvent) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsClusterCreated = true
		err = decoder.Decode(&ty.AsClusterCreatedCreator0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsWorkRuning = true
		err = decoder.Decode(&ty.AsWorkRuningUser0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsWorkRuningWorkId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsWorkRuningClusterId2)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsWorkContractUpdated = true
		err = decoder.Decode(&ty.AsWorkContractUpdatedUser0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsWorkContractUpdatedWorkId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsWorkContractUpdatedClusterId2)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsWorkContractWithdrawaled = true
		err = decoder.Decode(&ty.AsWorkContractWithdrawaledWorkId0)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsWorkStoped = true
		err = decoder.Decode(&ty.AsWorkStopedUser0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsWorkStopedWorkId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsWorkStopedClusterId2)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *WeteeWorkerPalletEvent) Variant() (uint8, error) {
	if ty.IsClusterCreated {
		return 0, nil
	}
	if ty.IsWorkRuning {
		return 1, nil
	}
	if ty.IsWorkContractUpdated {
		return 2, nil
	}
	if ty.IsWorkContractWithdrawaled {
		return 3, nil
	}
	if ty.IsWorkStoped {
		return 4, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty WeteeWorkerPalletEvent) MarshalJSON() ([]byte, error) {
	if ty.IsClusterCreated {
		m := map[string]interface{}{"WeteeWorkerPalletEvent::ClusterCreated": ty.AsClusterCreatedCreator0}
		return json.Marshal(m)
	}
	if ty.IsWorkRuning {
		m := map[string]interface{}{"WeteeWorkerPalletEvent::WorkRuning": map[string]interface{}{
			"AsWorkRuningClusterId2": ty.AsWorkRuningClusterId2,
			"AsWorkRuningUser0":      ty.AsWorkRuningUser0,
			"AsWorkRuningWorkId1":    ty.AsWorkRuningWorkId1,
		}}
		return json.Marshal(m)
	}
	if ty.IsWorkContractUpdated {
		m := map[string]interface{}{"WeteeWorkerPalletEvent::WorkContractUpdated": map[string]interface{}{
			"AsWorkContractUpdatedClusterId2": ty.AsWorkContractUpdatedClusterId2,
			"AsWorkContractUpdatedUser0":      ty.AsWorkContractUpdatedUser0,
			"AsWorkContractUpdatedWorkId1":    ty.AsWorkContractUpdatedWorkId1,
		}}
		return json.Marshal(m)
	}
	if ty.IsWorkContractWithdrawaled {
		m := map[string]interface{}{"WeteeWorkerPalletEvent::WorkContractWithdrawaled": ty.AsWorkContractWithdrawaledWorkId0}
		return json.Marshal(m)
	}
	if ty.IsWorkStoped {
		m := map[string]interface{}{"WeteeWorkerPalletEvent::WorkStoped": map[string]interface{}{
			"AsWorkStopedClusterId2": ty.AsWorkStopedClusterId2,
			"AsWorkStopedUser0":      ty.AsWorkStopedUser0,
			"AsWorkStopedWorkId1":    ty.AsWorkStopedWorkId1,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated PalletContractsOrigin with id=145
type Origin struct {
	IsRoot         bool
	IsSigned       bool
	AsSignedField0 [32]byte
}

func (ty Origin) Encode(encoder scale.Encoder) (err error) {
	if ty.IsRoot {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSigned {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSignedField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Origin) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsRoot = true
		return
	case 1:
		ty.IsSigned = true
		err = decoder.Decode(&ty.AsSignedField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Origin) Variant() (uint8, error) {
	if ty.IsRoot {
		return 0, nil
	}
	if ty.IsSigned {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Origin) MarshalJSON() ([]byte, error) {
	if ty.IsRoot {
		return json.Marshal("Origin::Root")
	}
	if ty.IsSigned {
		m := map[string]interface{}{"Origin::Signed": ty.AsSignedField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated PalletContractsPalletEvent with id=144
type PalletContractsPalletEvent struct {
	IsInstantiated          bool
	AsInstantiatedDeployer0 [32]byte
	AsInstantiatedContract1 [32]byte
	IsTerminated            bool
	// The contract that was terminated.
	AsTerminatedContract0 [32]byte
	// The account that received the contracts remaining balance
	AsTerminatedBeneficiary1 [32]byte
	IsCodeStored             bool
	AsCodeStoredCodeHash0    [32]byte
	AsCodeStoredDepositHeld1 types.U128
	AsCodeStoredUploader2    [32]byte
	IsContractEmitted        bool
	// The contract that emitted the event.
	AsContractEmittedContract0 [32]byte
	// Data supplied by the contract. Metadata generated during contract compilation
	// is needed to decode it.
	AsContractEmittedData1        []byte
	IsCodeRemoved                 bool
	AsCodeRemovedCodeHash0        [32]byte
	AsCodeRemovedDepositReleased1 types.U128
	AsCodeRemovedRemover2         [32]byte
	IsContractCodeUpdated         bool
	// The contract that has been updated.
	AsContractCodeUpdatedContract0 [32]byte
	// New code hash that was set for the contract.
	AsContractCodeUpdatedNewCodeHash1 [32]byte
	// Previous code hash of the contract.
	AsContractCodeUpdatedOldCodeHash2 [32]byte
	IsCalled                          bool
	// The caller of the `contract`.
	AsCalledCaller0 Origin
	// The contract that was called.
	AsCalledContract1 [32]byte
	IsDelegateCalled  bool
	// The contract that performed the delegate call and hence in whose context
	// the `code_hash` is executed.
	AsDelegateCalledContract0 [32]byte
	// The code hash that was delegate called.
	AsDelegateCalledCodeHash1                     [32]byte
	IsStorageDepositTransferredAndHeld            bool
	AsStorageDepositTransferredAndHeldFrom0       [32]byte
	AsStorageDepositTransferredAndHeldTo1         [32]byte
	AsStorageDepositTransferredAndHeldAmount2     types.U128
	IsStorageDepositTransferredAndReleased        bool
	AsStorageDepositTransferredAndReleasedFrom0   [32]byte
	AsStorageDepositTransferredAndReleasedTo1     [32]byte
	AsStorageDepositTransferredAndReleasedAmount2 types.U128
}

func (ty PalletContractsPalletEvent) Encode(encoder scale.Encoder) (err error) {
	if ty.IsInstantiated {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInstantiatedDeployer0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInstantiatedContract1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTerminated {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTerminatedContract0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTerminatedBeneficiary1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCodeStored {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCodeStoredCodeHash0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCodeStoredDepositHeld1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCodeStoredUploader2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsContractEmitted {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsContractEmittedContract0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsContractEmittedData1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCodeRemoved {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCodeRemovedCodeHash0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCodeRemovedDepositReleased1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCodeRemovedRemover2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsContractCodeUpdated {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsContractCodeUpdatedContract0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsContractCodeUpdatedNewCodeHash1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsContractCodeUpdatedOldCodeHash2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCalled {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCalledCaller0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCalledContract1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDelegateCalled {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDelegateCalledContract0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDelegateCalledCodeHash1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsStorageDepositTransferredAndHeld {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsStorageDepositTransferredAndHeldFrom0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsStorageDepositTransferredAndHeldTo1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsStorageDepositTransferredAndHeldAmount2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsStorageDepositTransferredAndReleased {
		err = encoder.PushByte(9)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsStorageDepositTransferredAndReleasedFrom0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsStorageDepositTransferredAndReleasedTo1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsStorageDepositTransferredAndReleasedAmount2)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *PalletContractsPalletEvent) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsInstantiated = true
		err = decoder.Decode(&ty.AsInstantiatedDeployer0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInstantiatedContract1)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsTerminated = true
		err = decoder.Decode(&ty.AsTerminatedContract0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTerminatedBeneficiary1)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsCodeStored = true
		err = decoder.Decode(&ty.AsCodeStoredCodeHash0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCodeStoredDepositHeld1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCodeStoredUploader2)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsContractEmitted = true
		err = decoder.Decode(&ty.AsContractEmittedContract0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsContractEmittedData1)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsCodeRemoved = true
		err = decoder.Decode(&ty.AsCodeRemovedCodeHash0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCodeRemovedDepositReleased1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCodeRemovedRemover2)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsContractCodeUpdated = true
		err = decoder.Decode(&ty.AsContractCodeUpdatedContract0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsContractCodeUpdatedNewCodeHash1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsContractCodeUpdatedOldCodeHash2)
		if err != nil {
			return err
		}
		return
	case 6:
		ty.IsCalled = true
		err = decoder.Decode(&ty.AsCalledCaller0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCalledContract1)
		if err != nil {
			return err
		}
		return
	case 7:
		ty.IsDelegateCalled = true
		err = decoder.Decode(&ty.AsDelegateCalledContract0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDelegateCalledCodeHash1)
		if err != nil {
			return err
		}
		return
	case 8:
		ty.IsStorageDepositTransferredAndHeld = true
		err = decoder.Decode(&ty.AsStorageDepositTransferredAndHeldFrom0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsStorageDepositTransferredAndHeldTo1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsStorageDepositTransferredAndHeldAmount2)
		if err != nil {
			return err
		}
		return
	case 9:
		ty.IsStorageDepositTransferredAndReleased = true
		err = decoder.Decode(&ty.AsStorageDepositTransferredAndReleasedFrom0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsStorageDepositTransferredAndReleasedTo1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsStorageDepositTransferredAndReleasedAmount2)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *PalletContractsPalletEvent) Variant() (uint8, error) {
	if ty.IsInstantiated {
		return 0, nil
	}
	if ty.IsTerminated {
		return 1, nil
	}
	if ty.IsCodeStored {
		return 2, nil
	}
	if ty.IsContractEmitted {
		return 3, nil
	}
	if ty.IsCodeRemoved {
		return 4, nil
	}
	if ty.IsContractCodeUpdated {
		return 5, nil
	}
	if ty.IsCalled {
		return 6, nil
	}
	if ty.IsDelegateCalled {
		return 7, nil
	}
	if ty.IsStorageDepositTransferredAndHeld {
		return 8, nil
	}
	if ty.IsStorageDepositTransferredAndReleased {
		return 9, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty PalletContractsPalletEvent) MarshalJSON() ([]byte, error) {
	if ty.IsInstantiated {
		m := map[string]interface{}{"PalletContractsPalletEvent::Instantiated": map[string]interface{}{
			"AsInstantiatedContract1": ty.AsInstantiatedContract1,
			"AsInstantiatedDeployer0": ty.AsInstantiatedDeployer0,
		}}
		return json.Marshal(m)
	}
	if ty.IsTerminated {
		m := map[string]interface{}{"PalletContractsPalletEvent::Terminated": map[string]interface{}{
			"AsTerminatedBeneficiary1": ty.AsTerminatedBeneficiary1,
			"AsTerminatedContract0":    ty.AsTerminatedContract0,
		}}
		return json.Marshal(m)
	}
	if ty.IsCodeStored {
		m := map[string]interface{}{"PalletContractsPalletEvent::CodeStored": map[string]interface{}{
			"AsCodeStoredCodeHash0":    ty.AsCodeStoredCodeHash0,
			"AsCodeStoredDepositHeld1": ty.AsCodeStoredDepositHeld1,
			"AsCodeStoredUploader2":    ty.AsCodeStoredUploader2,
		}}
		return json.Marshal(m)
	}
	if ty.IsContractEmitted {
		m := map[string]interface{}{"PalletContractsPalletEvent::ContractEmitted": map[string]interface{}{
			"AsContractEmittedContract0": ty.AsContractEmittedContract0,
			"AsContractEmittedData1":     ty.AsContractEmittedData1,
		}}
		return json.Marshal(m)
	}
	if ty.IsCodeRemoved {
		m := map[string]interface{}{"PalletContractsPalletEvent::CodeRemoved": map[string]interface{}{
			"AsCodeRemovedCodeHash0":        ty.AsCodeRemovedCodeHash0,
			"AsCodeRemovedDepositReleased1": ty.AsCodeRemovedDepositReleased1,
			"AsCodeRemovedRemover2":         ty.AsCodeRemovedRemover2,
		}}
		return json.Marshal(m)
	}
	if ty.IsContractCodeUpdated {
		m := map[string]interface{}{"PalletContractsPalletEvent::ContractCodeUpdated": map[string]interface{}{
			"AsContractCodeUpdatedContract0":    ty.AsContractCodeUpdatedContract0,
			"AsContractCodeUpdatedNewCodeHash1": ty.AsContractCodeUpdatedNewCodeHash1,
			"AsContractCodeUpdatedOldCodeHash2": ty.AsContractCodeUpdatedOldCodeHash2,
		}}
		return json.Marshal(m)
	}
	if ty.IsCalled {
		m := map[string]interface{}{"PalletContractsPalletEvent::Called": map[string]interface{}{
			"AsCalledCaller0":   ty.AsCalledCaller0,
			"AsCalledContract1": ty.AsCalledContract1,
		}}
		return json.Marshal(m)
	}
	if ty.IsDelegateCalled {
		m := map[string]interface{}{"PalletContractsPalletEvent::DelegateCalled": map[string]interface{}{
			"AsDelegateCalledCodeHash1": ty.AsDelegateCalledCodeHash1,
			"AsDelegateCalledContract0": ty.AsDelegateCalledContract0,
		}}
		return json.Marshal(m)
	}
	if ty.IsStorageDepositTransferredAndHeld {
		m := map[string]interface{}{"PalletContractsPalletEvent::StorageDepositTransferredAndHeld": map[string]interface{}{
			"AsStorageDepositTransferredAndHeldAmount2": ty.AsStorageDepositTransferredAndHeldAmount2,
			"AsStorageDepositTransferredAndHeldFrom0":   ty.AsStorageDepositTransferredAndHeldFrom0,
			"AsStorageDepositTransferredAndHeldTo1":     ty.AsStorageDepositTransferredAndHeldTo1,
		}}
		return json.Marshal(m)
	}
	if ty.IsStorageDepositTransferredAndReleased {
		m := map[string]interface{}{"PalletContractsPalletEvent::StorageDepositTransferredAndReleased": map[string]interface{}{
			"AsStorageDepositTransferredAndReleasedAmount2": ty.AsStorageDepositTransferredAndReleasedAmount2,
			"AsStorageDepositTransferredAndReleasedFrom0":   ty.AsStorageDepositTransferredAndReleasedFrom0,
			"AsStorageDepositTransferredAndReleasedTo1":     ty.AsStorageDepositTransferredAndReleasedTo1,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated ParachainWeteeRuntimeRuntimeEvent with id=21
type RuntimeEvent struct {
	IsSystem                   bool
	AsSystemField0             *FrameSystemPalletEvent
	IsParachainSystem          bool
	AsParachainSystemField0    *CumulusPalletParachainSystemPalletEvent
	IsBalances                 bool
	AsBalancesField0           *PalletBalancesPalletEvent
	IsTransactionPayment       bool
	AsTransactionPaymentField0 *PalletTransactionPaymentPalletEvent
	IsSudo                     bool
	AsSudoField0               *PalletSudoPalletEvent
	IsCollatorSelection        bool
	AsCollatorSelectionField0  *PalletCollatorSelectionPalletEvent
	IsSession                  bool
	AsSessionField0            *PalletSessionPalletEvent
	IsXcmpQueue                bool
	AsXcmpQueueField0          *CumulusPalletXcmpQueuePalletEvent
	IsPolkadotXcm              bool
	AsPolkadotXcmField0        *PalletXcmPalletEvent
	IsCumulusXcm               bool
	AsCumulusXcmField0         *CumulusPalletXcmPalletEvent
	IsMessageQueue             bool
	AsMessageQueueField0       *PalletMessageQueuePalletEvent
	IsTokens                   bool
	AsTokensField0             *OrmlTokensModuleEvent
	IsWeTEEMessageQueue        bool
	AsWeTEEMessageQueueField0  *WeteeMessageQueuePalletEvent
	IsUtility                  bool
	AsUtilityField0            *PalletUtilityPalletEvent
	IsWeTEEOrg                 bool
	AsWeTEEOrgField0           *WeteeOrgPalletEvent
	IsWeTEEAsset               bool
	AsWeTEEAssetField0         *WeteeAssetsPalletEvent
	IsWeTEESudo                bool
	AsWeTEESudoField0          *WeteeSudoPalletEvent
	IsWeTEEGuild               bool
	AsWeTEEGuildField0         *WeteeGuildPalletEvent
	IsWeTEEProject             bool
	AsWeTEEProjectField0       *WeteeProjectPalletEvent
	IsWeTEEGov                 bool
	AsWeTEEGovField0           *WeteeGovPalletEvent
	IsWeTEETreasury            bool
	AsWeTEETreasuryField0      *WeteeTreasuryPalletEvent
	IsWeTEEApp                 bool
	AsWeTEEAppField0           *WeteeAppPalletEvent
	IsWeTEETask                bool
	AsWeTEETaskField0          *WeteeTaskPalletEvent
	IsWeTEEGpu                 bool
	AsWeTEEGpuField0           *WeteeGpuPalletEvent
	IsWeTEEWorker              bool
	AsWeTEEWorkerField0        *WeteeWorkerPalletEvent
	IsContracts                bool
	AsContractsField0          *PalletContractsPalletEvent
}

func (ty RuntimeEvent) Encode(encoder scale.Encoder) (err error) {
	if ty.IsSystem {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSystemField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsParachainSystem {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsParachainSystemField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBalances {
		err = encoder.PushByte(10)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBalancesField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTransactionPayment {
		err = encoder.PushByte(11)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransactionPaymentField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSudo {
		err = encoder.PushByte(15)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSudoField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCollatorSelection {
		err = encoder.PushByte(21)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCollatorSelectionField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSession {
		err = encoder.PushByte(22)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSessionField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsXcmpQueue {
		err = encoder.PushByte(30)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsXcmpQueueField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsPolkadotXcm {
		err = encoder.PushByte(31)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPolkadotXcmField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCumulusXcm {
		err = encoder.PushByte(32)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCumulusXcmField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsMessageQueue {
		err = encoder.PushByte(33)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsMessageQueueField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTokens {
		err = encoder.PushByte(107)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTokensField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWeTEEMessageQueue {
		err = encoder.PushByte(109)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWeTEEMessageQueueField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUtility {
		err = encoder.PushByte(110)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUtilityField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWeTEEOrg {
		err = encoder.PushByte(111)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWeTEEOrgField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWeTEEAsset {
		err = encoder.PushByte(112)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWeTEEAssetField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWeTEESudo {
		err = encoder.PushByte(113)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWeTEESudoField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWeTEEGuild {
		err = encoder.PushByte(114)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWeTEEGuildField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWeTEEProject {
		err = encoder.PushByte(115)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWeTEEProjectField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWeTEEGov {
		err = encoder.PushByte(116)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWeTEEGovField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWeTEETreasury {
		err = encoder.PushByte(117)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWeTEETreasuryField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWeTEEApp {
		err = encoder.PushByte(118)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWeTEEAppField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWeTEETask {
		err = encoder.PushByte(119)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWeTEETaskField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWeTEEGpu {
		err = encoder.PushByte(120)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWeTEEGpuField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWeTEEWorker {
		err = encoder.PushByte(121)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWeTEEWorkerField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsContracts {
		err = encoder.PushByte(122)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsContractsField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *RuntimeEvent) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsSystem = true
		var tmp FrameSystemPalletEvent
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsSystemField0 = &tmp
		return
	case 1:
		ty.IsParachainSystem = true
		var tmp CumulusPalletParachainSystemPalletEvent
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsParachainSystemField0 = &tmp
		return
	case 10:
		ty.IsBalances = true
		var tmp PalletBalancesPalletEvent
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsBalancesField0 = &tmp
		return
	case 11:
		ty.IsTransactionPayment = true
		var tmp PalletTransactionPaymentPalletEvent
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsTransactionPaymentField0 = &tmp
		return
	case 15:
		ty.IsSudo = true
		var tmp PalletSudoPalletEvent
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsSudoField0 = &tmp
		return
	case 21:
		ty.IsCollatorSelection = true
		var tmp PalletCollatorSelectionPalletEvent
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsCollatorSelectionField0 = &tmp
		return
	case 22:
		ty.IsSession = true
		var tmp PalletSessionPalletEvent
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsSessionField0 = &tmp
		return
	case 30:
		ty.IsXcmpQueue = true
		var tmp CumulusPalletXcmpQueuePalletEvent
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsXcmpQueueField0 = &tmp
		return
	case 31:
		ty.IsPolkadotXcm = true
		var tmp PalletXcmPalletEvent
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsPolkadotXcmField0 = &tmp
		return
	case 32:
		ty.IsCumulusXcm = true
		var tmp CumulusPalletXcmPalletEvent
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsCumulusXcmField0 = &tmp
		return
	case 33:
		ty.IsMessageQueue = true
		var tmp PalletMessageQueuePalletEvent
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsMessageQueueField0 = &tmp
		return
	case 107:
		ty.IsTokens = true
		var tmp OrmlTokensModuleEvent
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsTokensField0 = &tmp
		return
	case 109:
		ty.IsWeTEEMessageQueue = true
		var tmp WeteeMessageQueuePalletEvent
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsWeTEEMessageQueueField0 = &tmp
		return
	case 110:
		ty.IsUtility = true
		var tmp PalletUtilityPalletEvent
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsUtilityField0 = &tmp
		return
	case 111:
		ty.IsWeTEEOrg = true
		var tmp WeteeOrgPalletEvent
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsWeTEEOrgField0 = &tmp
		return
	case 112:
		ty.IsWeTEEAsset = true
		var tmp WeteeAssetsPalletEvent
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsWeTEEAssetField0 = &tmp
		return
	case 113:
		ty.IsWeTEESudo = true
		var tmp WeteeSudoPalletEvent
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsWeTEESudoField0 = &tmp
		return
	case 114:
		ty.IsWeTEEGuild = true
		var tmp WeteeGuildPalletEvent
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsWeTEEGuildField0 = &tmp
		return
	case 115:
		ty.IsWeTEEProject = true
		var tmp WeteeProjectPalletEvent
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsWeTEEProjectField0 = &tmp
		return
	case 116:
		ty.IsWeTEEGov = true
		var tmp WeteeGovPalletEvent
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsWeTEEGovField0 = &tmp
		return
	case 117:
		ty.IsWeTEETreasury = true
		var tmp WeteeTreasuryPalletEvent
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsWeTEETreasuryField0 = &tmp
		return
	case 118:
		ty.IsWeTEEApp = true
		var tmp WeteeAppPalletEvent
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsWeTEEAppField0 = &tmp
		return
	case 119:
		ty.IsWeTEETask = true
		var tmp WeteeTaskPalletEvent
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsWeTEETaskField0 = &tmp
		return
	case 120:
		ty.IsWeTEEGpu = true
		var tmp WeteeGpuPalletEvent
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsWeTEEGpuField0 = &tmp
		return
	case 121:
		ty.IsWeTEEWorker = true
		var tmp WeteeWorkerPalletEvent
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsWeTEEWorkerField0 = &tmp
		return
	case 122:
		ty.IsContracts = true
		var tmp PalletContractsPalletEvent
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsContractsField0 = &tmp
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *RuntimeEvent) Variant() (uint8, error) {
	if ty.IsSystem {
		return 0, nil
	}
	if ty.IsParachainSystem {
		return 1, nil
	}
	if ty.IsBalances {
		return 10, nil
	}
	if ty.IsTransactionPayment {
		return 11, nil
	}
	if ty.IsSudo {
		return 15, nil
	}
	if ty.IsCollatorSelection {
		return 21, nil
	}
	if ty.IsSession {
		return 22, nil
	}
	if ty.IsXcmpQueue {
		return 30, nil
	}
	if ty.IsPolkadotXcm {
		return 31, nil
	}
	if ty.IsCumulusXcm {
		return 32, nil
	}
	if ty.IsMessageQueue {
		return 33, nil
	}
	if ty.IsTokens {
		return 107, nil
	}
	if ty.IsWeTEEMessageQueue {
		return 109, nil
	}
	if ty.IsUtility {
		return 110, nil
	}
	if ty.IsWeTEEOrg {
		return 111, nil
	}
	if ty.IsWeTEEAsset {
		return 112, nil
	}
	if ty.IsWeTEESudo {
		return 113, nil
	}
	if ty.IsWeTEEGuild {
		return 114, nil
	}
	if ty.IsWeTEEProject {
		return 115, nil
	}
	if ty.IsWeTEEGov {
		return 116, nil
	}
	if ty.IsWeTEETreasury {
		return 117, nil
	}
	if ty.IsWeTEEApp {
		return 118, nil
	}
	if ty.IsWeTEETask {
		return 119, nil
	}
	if ty.IsWeTEEGpu {
		return 120, nil
	}
	if ty.IsWeTEEWorker {
		return 121, nil
	}
	if ty.IsContracts {
		return 122, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty RuntimeEvent) MarshalJSON() ([]byte, error) {
	if ty.IsSystem {
		m := map[string]interface{}{"RuntimeEvent::System": ty.AsSystemField0}
		return json.Marshal(m)
	}
	if ty.IsParachainSystem {
		m := map[string]interface{}{"RuntimeEvent::ParachainSystem": ty.AsParachainSystemField0}
		return json.Marshal(m)
	}
	if ty.IsBalances {
		m := map[string]interface{}{"RuntimeEvent::Balances": ty.AsBalancesField0}
		return json.Marshal(m)
	}
	if ty.IsTransactionPayment {
		m := map[string]interface{}{"RuntimeEvent::TransactionPayment": ty.AsTransactionPaymentField0}
		return json.Marshal(m)
	}
	if ty.IsSudo {
		m := map[string]interface{}{"RuntimeEvent::Sudo": ty.AsSudoField0}
		return json.Marshal(m)
	}
	if ty.IsCollatorSelection {
		m := map[string]interface{}{"RuntimeEvent::CollatorSelection": ty.AsCollatorSelectionField0}
		return json.Marshal(m)
	}
	if ty.IsSession {
		m := map[string]interface{}{"RuntimeEvent::Session": ty.AsSessionField0}
		return json.Marshal(m)
	}
	if ty.IsXcmpQueue {
		m := map[string]interface{}{"RuntimeEvent::XcmpQueue": ty.AsXcmpQueueField0}
		return json.Marshal(m)
	}
	if ty.IsPolkadotXcm {
		m := map[string]interface{}{"RuntimeEvent::PolkadotXcm": ty.AsPolkadotXcmField0}
		return json.Marshal(m)
	}
	if ty.IsCumulusXcm {
		m := map[string]interface{}{"RuntimeEvent::CumulusXcm": ty.AsCumulusXcmField0}
		return json.Marshal(m)
	}
	if ty.IsMessageQueue {
		m := map[string]interface{}{"RuntimeEvent::MessageQueue": ty.AsMessageQueueField0}
		return json.Marshal(m)
	}
	if ty.IsTokens {
		m := map[string]interface{}{"RuntimeEvent::Tokens": ty.AsTokensField0}
		return json.Marshal(m)
	}
	if ty.IsWeTEEMessageQueue {
		m := map[string]interface{}{"RuntimeEvent::WeTEEMessageQueue": ty.AsWeTEEMessageQueueField0}
		return json.Marshal(m)
	}
	if ty.IsUtility {
		m := map[string]interface{}{"RuntimeEvent::Utility": ty.AsUtilityField0}
		return json.Marshal(m)
	}
	if ty.IsWeTEEOrg {
		m := map[string]interface{}{"RuntimeEvent::WeTEEOrg": ty.AsWeTEEOrgField0}
		return json.Marshal(m)
	}
	if ty.IsWeTEEAsset {
		m := map[string]interface{}{"RuntimeEvent::WeTEEAsset": ty.AsWeTEEAssetField0}
		return json.Marshal(m)
	}
	if ty.IsWeTEESudo {
		m := map[string]interface{}{"RuntimeEvent::WeTEESudo": ty.AsWeTEESudoField0}
		return json.Marshal(m)
	}
	if ty.IsWeTEEGuild {
		m := map[string]interface{}{"RuntimeEvent::WeTEEGuild": ty.AsWeTEEGuildField0}
		return json.Marshal(m)
	}
	if ty.IsWeTEEProject {
		m := map[string]interface{}{"RuntimeEvent::WeTEEProject": ty.AsWeTEEProjectField0}
		return json.Marshal(m)
	}
	if ty.IsWeTEEGov {
		m := map[string]interface{}{"RuntimeEvent::WeTEEGov": ty.AsWeTEEGovField0}
		return json.Marshal(m)
	}
	if ty.IsWeTEETreasury {
		m := map[string]interface{}{"RuntimeEvent::WeTEETreasury": ty.AsWeTEETreasuryField0}
		return json.Marshal(m)
	}
	if ty.IsWeTEEApp {
		m := map[string]interface{}{"RuntimeEvent::WeTEEApp": ty.AsWeTEEAppField0}
		return json.Marshal(m)
	}
	if ty.IsWeTEETask {
		m := map[string]interface{}{"RuntimeEvent::WeTEETask": ty.AsWeTEETaskField0}
		return json.Marshal(m)
	}
	if ty.IsWeTEEGpu {
		m := map[string]interface{}{"RuntimeEvent::WeTEEGpu": ty.AsWeTEEGpuField0}
		return json.Marshal(m)
	}
	if ty.IsWeTEEWorker {
		m := map[string]interface{}{"RuntimeEvent::WeTEEWorker": ty.AsWeTEEWorkerField0}
		return json.Marshal(m)
	}
	if ty.IsContracts {
		m := map[string]interface{}{"RuntimeEvent::Contracts": ty.AsContractsField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated frame_system_EventRecord with id={{false [20]}}
type EventRecord struct {
	// Field 0 with TypeId=147
	Phase Phase
	// Field 1 with TypeId=21
	Event RuntimeEvent
	// Field 2 with TypeId=148
	Topics [][32]byte
}

// Tuple type generated from metadata id 150
type TupleOfUint32Uint32 struct {
	Elem0 uint32
	Elem1 uint32
}

// Generated frame_system_LastRuntimeUpgradeInfo with id={{false [151]}}
type LastRuntimeUpgradeInfo struct {
	// Field 0 with TypeId=51
	SpecVersion types.UCompact
	// Field 1 with TypeId=152
	SpecName string
}

// Generated frame_system_CodeUpgradeAuthorization with id={{false [153]}}
type CodeUpgradeAuthorization struct {
	// Field 0 with TypeId=13
	CodeHash [32]byte
	// Field 1 with TypeId=8
	CheckVersion bool
}

// Tuple type generated from metadata id 156
type TupleOfByteSliceByteSlice struct {
	Elem0 []byte
	Elem1 []byte
}

// Generated FrameSystemPalletCall with id=154
type FrameSystemPalletCall struct {
	IsRemark                                 bool
	AsRemarkRemark0                          []byte
	IsSetHeapPages                           bool
	AsSetHeapPagesPages0                     uint64
	IsSetCode                                bool
	AsSetCodeCode0                           []byte
	IsSetCodeWithoutChecks                   bool
	AsSetCodeWithoutChecksCode0              []byte
	IsSetStorage                             bool
	AsSetStorageItems0                       []TupleOfByteSliceByteSlice
	IsKillStorage                            bool
	AsKillStorageKeys0                       [][]byte
	IsKillPrefix                             bool
	AsKillPrefixPrefix0                      []byte
	AsKillPrefixSubkeys1                     uint32
	IsRemarkWithEvent                        bool
	AsRemarkWithEventRemark0                 []byte
	IsAuthorizeUpgrade                       bool
	AsAuthorizeUpgradeCodeHash0              [32]byte
	IsAuthorizeUpgradeWithoutChecks          bool
	AsAuthorizeUpgradeWithoutChecksCodeHash0 [32]byte
	IsApplyAuthorizedUpgrade                 bool
	AsApplyAuthorizedUpgradeCode0            []byte
}

func (ty FrameSystemPalletCall) Encode(encoder scale.Encoder) (err error) {
	if ty.IsRemark {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsRemarkRemark0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetHeapPages {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetHeapPagesPages0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetCode {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetCodeCode0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetCodeWithoutChecks {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetCodeWithoutChecksCode0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetStorage {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetStorageItems0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsKillStorage {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsKillStorageKeys0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsKillPrefix {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsKillPrefixPrefix0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsKillPrefixSubkeys1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsRemarkWithEvent {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsRemarkWithEventRemark0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAuthorizeUpgrade {
		err = encoder.PushByte(9)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAuthorizeUpgradeCodeHash0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAuthorizeUpgradeWithoutChecks {
		err = encoder.PushByte(10)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAuthorizeUpgradeWithoutChecksCodeHash0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsApplyAuthorizedUpgrade {
		err = encoder.PushByte(11)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsApplyAuthorizedUpgradeCode0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *FrameSystemPalletCall) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsRemark = true
		err = decoder.Decode(&ty.AsRemarkRemark0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsSetHeapPages = true
		err = decoder.Decode(&ty.AsSetHeapPagesPages0)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsSetCode = true
		err = decoder.Decode(&ty.AsSetCodeCode0)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsSetCodeWithoutChecks = true
		err = decoder.Decode(&ty.AsSetCodeWithoutChecksCode0)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsSetStorage = true
		err = decoder.Decode(&ty.AsSetStorageItems0)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsKillStorage = true
		err = decoder.Decode(&ty.AsKillStorageKeys0)
		if err != nil {
			return err
		}
		return
	case 6:
		ty.IsKillPrefix = true
		err = decoder.Decode(&ty.AsKillPrefixPrefix0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsKillPrefixSubkeys1)
		if err != nil {
			return err
		}
		return
	case 7:
		ty.IsRemarkWithEvent = true
		err = decoder.Decode(&ty.AsRemarkWithEventRemark0)
		if err != nil {
			return err
		}
		return
	case 9:
		ty.IsAuthorizeUpgrade = true
		err = decoder.Decode(&ty.AsAuthorizeUpgradeCodeHash0)
		if err != nil {
			return err
		}
		return
	case 10:
		ty.IsAuthorizeUpgradeWithoutChecks = true
		err = decoder.Decode(&ty.AsAuthorizeUpgradeWithoutChecksCodeHash0)
		if err != nil {
			return err
		}
		return
	case 11:
		ty.IsApplyAuthorizedUpgrade = true
		err = decoder.Decode(&ty.AsApplyAuthorizedUpgradeCode0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *FrameSystemPalletCall) Variant() (uint8, error) {
	if ty.IsRemark {
		return 0, nil
	}
	if ty.IsSetHeapPages {
		return 1, nil
	}
	if ty.IsSetCode {
		return 2, nil
	}
	if ty.IsSetCodeWithoutChecks {
		return 3, nil
	}
	if ty.IsSetStorage {
		return 4, nil
	}
	if ty.IsKillStorage {
		return 5, nil
	}
	if ty.IsKillPrefix {
		return 6, nil
	}
	if ty.IsRemarkWithEvent {
		return 7, nil
	}
	if ty.IsAuthorizeUpgrade {
		return 9, nil
	}
	if ty.IsAuthorizeUpgradeWithoutChecks {
		return 10, nil
	}
	if ty.IsApplyAuthorizedUpgrade {
		return 11, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty FrameSystemPalletCall) MarshalJSON() ([]byte, error) {
	if ty.IsRemark {
		m := map[string]interface{}{"FrameSystemPalletCall::remark": ty.AsRemarkRemark0}
		return json.Marshal(m)
	}
	if ty.IsSetHeapPages {
		m := map[string]interface{}{"FrameSystemPalletCall::set_heap_pages": ty.AsSetHeapPagesPages0}
		return json.Marshal(m)
	}
	if ty.IsSetCode {
		m := map[string]interface{}{"FrameSystemPalletCall::set_code": ty.AsSetCodeCode0}
		return json.Marshal(m)
	}
	if ty.IsSetCodeWithoutChecks {
		m := map[string]interface{}{"FrameSystemPalletCall::set_code_without_checks": ty.AsSetCodeWithoutChecksCode0}
		return json.Marshal(m)
	}
	if ty.IsSetStorage {
		m := map[string]interface{}{"FrameSystemPalletCall::set_storage": ty.AsSetStorageItems0}
		return json.Marshal(m)
	}
	if ty.IsKillStorage {
		m := map[string]interface{}{"FrameSystemPalletCall::kill_storage": ty.AsKillStorageKeys0}
		return json.Marshal(m)
	}
	if ty.IsKillPrefix {
		m := map[string]interface{}{"FrameSystemPalletCall::kill_prefix": map[string]interface{}{
			"AsKillPrefixPrefix0":  ty.AsKillPrefixPrefix0,
			"AsKillPrefixSubkeys1": ty.AsKillPrefixSubkeys1,
		}}
		return json.Marshal(m)
	}
	if ty.IsRemarkWithEvent {
		m := map[string]interface{}{"FrameSystemPalletCall::remark_with_event": ty.AsRemarkWithEventRemark0}
		return json.Marshal(m)
	}
	if ty.IsAuthorizeUpgrade {
		m := map[string]interface{}{"FrameSystemPalletCall::authorize_upgrade": ty.AsAuthorizeUpgradeCodeHash0}
		return json.Marshal(m)
	}
	if ty.IsAuthorizeUpgradeWithoutChecks {
		m := map[string]interface{}{"FrameSystemPalletCall::authorize_upgrade_without_checks": ty.AsAuthorizeUpgradeWithoutChecksCodeHash0}
		return json.Marshal(m)
	}
	if ty.IsApplyAuthorizedUpgrade {
		m := map[string]interface{}{"FrameSystemPalletCall::apply_authorized_upgrade": ty.AsApplyAuthorizedUpgradeCode0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated polkadot_primitives_v7_PersistedValidationData with id={{false [183]}}
type PersistedValidationData struct {
	// Field 0 with TypeId=184
	ParentHead []byte
	// Field 1 with TypeId=4
	RelayParentNumber uint32
	// Field 2 with TypeId=13
	RelayParentStorageRoot [32]byte
	// Field 3 with TypeId=4
	MaxPovSize uint32
}

// Generated polkadot_core_primitives_InboundDownwardMessage with id={{false [206]}}
type InboundDownwardMessage struct {
	// Field 0 with TypeId=4
	SentAt uint32
	// Field 1 with TypeId=14
	Msg []byte
}

// Generated polkadot_core_primitives_InboundHrmpMessage with id={{false [209]}}
type InboundHrmpMessage struct {
	// Field 0 with TypeId=4
	SentAt uint32
	// Field 1 with TypeId=14
	Data []byte
}

// Tuple type generated from metadata id 211
type TupleOfUint32InboundHrmpMessageSlice struct {
	Elem0 uint32
	Elem1 []InboundHrmpMessage
}

// Generated cumulus_primitives_parachain_inherent_ParachainInherentData with id={{false [204]}}
type ParachainInherentData struct {
	// Field 0 with TypeId=183
	ValidationData PersistedValidationData
	// Field 1 with TypeId=187
	RelayChainState [][]byte
	// Field 2 with TypeId=205
	DownwardMessages []InboundDownwardMessage
	// Field 3 with TypeId=207
	HorizontalMessages []TupleOfUint32InboundHrmpMessageSlice
}

// Generated CumulusPalletParachainSystemPalletCall with id=203
type CumulusPalletParachainSystemPalletCall struct {
	IsSetValidationData             bool
	AsSetValidationDataData0        ParachainInherentData
	IsSudoSendUpwardMessage         bool
	AsSudoSendUpwardMessageMessage0 []byte
	IsAuthorizeUpgrade              bool
	AsAuthorizeUpgradeCodeHash0     [32]byte
	AsAuthorizeUpgradeCheckVersion1 bool
	IsEnactAuthorizedUpgrade        bool
	AsEnactAuthorizedUpgradeCode0   []byte
}

func (ty CumulusPalletParachainSystemPalletCall) Encode(encoder scale.Encoder) (err error) {
	if ty.IsSetValidationData {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetValidationDataData0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSudoSendUpwardMessage {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSudoSendUpwardMessageMessage0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAuthorizeUpgrade {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAuthorizeUpgradeCodeHash0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAuthorizeUpgradeCheckVersion1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsEnactAuthorizedUpgrade {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsEnactAuthorizedUpgradeCode0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *CumulusPalletParachainSystemPalletCall) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsSetValidationData = true
		err = decoder.Decode(&ty.AsSetValidationDataData0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsSudoSendUpwardMessage = true
		err = decoder.Decode(&ty.AsSudoSendUpwardMessageMessage0)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsAuthorizeUpgrade = true
		err = decoder.Decode(&ty.AsAuthorizeUpgradeCodeHash0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsAuthorizeUpgradeCheckVersion1)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsEnactAuthorizedUpgrade = true
		err = decoder.Decode(&ty.AsEnactAuthorizedUpgradeCode0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *CumulusPalletParachainSystemPalletCall) Variant() (uint8, error) {
	if ty.IsSetValidationData {
		return 0, nil
	}
	if ty.IsSudoSendUpwardMessage {
		return 1, nil
	}
	if ty.IsAuthorizeUpgrade {
		return 2, nil
	}
	if ty.IsEnactAuthorizedUpgrade {
		return 3, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty CumulusPalletParachainSystemPalletCall) MarshalJSON() ([]byte, error) {
	if ty.IsSetValidationData {
		m := map[string]interface{}{"CumulusPalletParachainSystemPalletCall::set_validation_data": ty.AsSetValidationDataData0}
		return json.Marshal(m)
	}
	if ty.IsSudoSendUpwardMessage {
		m := map[string]interface{}{"CumulusPalletParachainSystemPalletCall::sudo_send_upward_message": ty.AsSudoSendUpwardMessageMessage0}
		return json.Marshal(m)
	}
	if ty.IsAuthorizeUpgrade {
		m := map[string]interface{}{"CumulusPalletParachainSystemPalletCall::authorize_upgrade": map[string]interface{}{
			"AsAuthorizeUpgradeCheckVersion1": ty.AsAuthorizeUpgradeCheckVersion1,
			"AsAuthorizeUpgradeCodeHash0":     ty.AsAuthorizeUpgradeCodeHash0,
		}}
		return json.Marshal(m)
	}
	if ty.IsEnactAuthorizedUpgrade {
		m := map[string]interface{}{"CumulusPalletParachainSystemPalletCall::enact_authorized_upgrade": ty.AsEnactAuthorizedUpgradeCode0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated PalletTimestampPalletCall with id=213
type PalletTimestampPalletCall struct {
	IsSet     bool
	AsSetNow0 types.UCompact
}

func (ty PalletTimestampPalletCall) Encode(encoder scale.Encoder) (err error) {
	if ty.IsSet {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetNow0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *PalletTimestampPalletCall) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsSet = true
		err = decoder.Decode(&ty.AsSetNow0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *PalletTimestampPalletCall) Variant() (uint8, error) {
	if ty.IsSet {
		return 0, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty PalletTimestampPalletCall) MarshalJSON() ([]byte, error) {
	if ty.IsSet {
		m := map[string]interface{}{"PalletTimestampPalletCall::set": ty.AsSetNow0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated SpRuntimeMultiaddressMultiAddress with id=231
type MultiAddress struct {
	IsId              bool
	AsIdField0        [32]byte
	IsIndex           bool
	AsIndexField0     struct{}
	IsRaw             bool
	AsRawField0       []byte
	IsAddress32       bool
	AsAddress32Field0 [32]byte
	IsAddress20       bool
	AsAddress20Field0 [20]byte
}

func (ty MultiAddress) Encode(encoder scale.Encoder) (err error) {
	if ty.IsId {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsIdField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsIndex {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsIndexField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsRaw {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsRawField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAddress32 {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAddress32Field0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAddress20 {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAddress20Field0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *MultiAddress) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsId = true
		err = decoder.Decode(&ty.AsIdField0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsIndex = true
		err = decoder.Decode(&ty.AsIndexField0)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsRaw = true
		err = decoder.Decode(&ty.AsRawField0)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsAddress32 = true
		err = decoder.Decode(&ty.AsAddress32Field0)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsAddress20 = true
		err = decoder.Decode(&ty.AsAddress20Field0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *MultiAddress) Variant() (uint8, error) {
	if ty.IsId {
		return 0, nil
	}
	if ty.IsIndex {
		return 1, nil
	}
	if ty.IsRaw {
		return 2, nil
	}
	if ty.IsAddress32 {
		return 3, nil
	}
	if ty.IsAddress20 {
		return 4, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty MultiAddress) MarshalJSON() ([]byte, error) {
	if ty.IsId {
		m := map[string]interface{}{"MultiAddress::Id": ty.AsIdField0}
		return json.Marshal(m)
	}
	if ty.IsIndex {
		m := map[string]interface{}{"MultiAddress::Index": ty.AsIndexField0}
		return json.Marshal(m)
	}
	if ty.IsRaw {
		m := map[string]interface{}{"MultiAddress::Raw": ty.AsRawField0}
		return json.Marshal(m)
	}
	if ty.IsAddress32 {
		m := map[string]interface{}{"MultiAddress::Address32": ty.AsAddress32Field0}
		return json.Marshal(m)
	}
	if ty.IsAddress20 {
		m := map[string]interface{}{"MultiAddress::Address20": ty.AsAddress20Field0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated PalletBalancesTypesAdjustmentDirection with id=233
type AdjustmentDirection struct {
	IsIncrease bool
	IsDecrease bool
}

func (ty AdjustmentDirection) Encode(encoder scale.Encoder) (err error) {
	if ty.IsIncrease {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDecrease {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *AdjustmentDirection) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsIncrease = true
		return
	case 1:
		ty.IsDecrease = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *AdjustmentDirection) Variant() (uint8, error) {
	if ty.IsIncrease {
		return 0, nil
	}
	if ty.IsDecrease {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty AdjustmentDirection) MarshalJSON() ([]byte, error) {
	if ty.IsIncrease {
		return json.Marshal("AdjustmentDirection::Increase")
	}
	if ty.IsDecrease {
		return json.Marshal("AdjustmentDirection::Decrease")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated PalletBalancesPalletCall with id=230
type PalletBalancesPalletCall struct {
	IsTransferAllowDeath                 bool
	AsTransferAllowDeathDest0            MultiAddress
	AsTransferAllowDeathValue1           types.UCompact
	IsForceTransfer                      bool
	AsForceTransferSource0               MultiAddress
	AsForceTransferDest1                 MultiAddress
	AsForceTransferValue2                types.UCompact
	IsTransferKeepAlive                  bool
	AsTransferKeepAliveDest0             MultiAddress
	AsTransferKeepAliveValue1            types.UCompact
	IsTransferAll                        bool
	AsTransferAllDest0                   MultiAddress
	AsTransferAllKeepAlive1              bool
	IsForceUnreserve                     bool
	AsForceUnreserveWho0                 MultiAddress
	AsForceUnreserveAmount1              types.U128
	IsUpgradeAccounts                    bool
	AsUpgradeAccountsWho0                [][32]byte
	IsForceSetBalance                    bool
	AsForceSetBalanceWho0                MultiAddress
	AsForceSetBalanceNewFree1            types.UCompact
	IsForceAdjustTotalIssuance           bool
	AsForceAdjustTotalIssuanceDirection0 AdjustmentDirection
	AsForceAdjustTotalIssuanceDelta1     types.UCompact
}

func (ty PalletBalancesPalletCall) Encode(encoder scale.Encoder) (err error) {
	if ty.IsTransferAllowDeath {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferAllowDeathDest0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferAllowDeathValue1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsForceTransfer {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsForceTransferSource0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsForceTransferDest1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsForceTransferValue2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTransferKeepAlive {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferKeepAliveDest0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferKeepAliveValue1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTransferAll {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferAllDest0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferAllKeepAlive1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsForceUnreserve {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsForceUnreserveWho0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsForceUnreserveAmount1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUpgradeAccounts {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpgradeAccountsWho0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsForceSetBalance {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsForceSetBalanceWho0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsForceSetBalanceNewFree1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsForceAdjustTotalIssuance {
		err = encoder.PushByte(9)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsForceAdjustTotalIssuanceDirection0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsForceAdjustTotalIssuanceDelta1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *PalletBalancesPalletCall) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsTransferAllowDeath = true
		err = decoder.Decode(&ty.AsTransferAllowDeathDest0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferAllowDeathValue1)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsForceTransfer = true
		err = decoder.Decode(&ty.AsForceTransferSource0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsForceTransferDest1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsForceTransferValue2)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsTransferKeepAlive = true
		err = decoder.Decode(&ty.AsTransferKeepAliveDest0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferKeepAliveValue1)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsTransferAll = true
		err = decoder.Decode(&ty.AsTransferAllDest0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferAllKeepAlive1)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsForceUnreserve = true
		err = decoder.Decode(&ty.AsForceUnreserveWho0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsForceUnreserveAmount1)
		if err != nil {
			return err
		}
		return
	case 6:
		ty.IsUpgradeAccounts = true
		err = decoder.Decode(&ty.AsUpgradeAccountsWho0)
		if err != nil {
			return err
		}
		return
	case 8:
		ty.IsForceSetBalance = true
		err = decoder.Decode(&ty.AsForceSetBalanceWho0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsForceSetBalanceNewFree1)
		if err != nil {
			return err
		}
		return
	case 9:
		ty.IsForceAdjustTotalIssuance = true
		err = decoder.Decode(&ty.AsForceAdjustTotalIssuanceDirection0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsForceAdjustTotalIssuanceDelta1)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *PalletBalancesPalletCall) Variant() (uint8, error) {
	if ty.IsTransferAllowDeath {
		return 0, nil
	}
	if ty.IsForceTransfer {
		return 2, nil
	}
	if ty.IsTransferKeepAlive {
		return 3, nil
	}
	if ty.IsTransferAll {
		return 4, nil
	}
	if ty.IsForceUnreserve {
		return 5, nil
	}
	if ty.IsUpgradeAccounts {
		return 6, nil
	}
	if ty.IsForceSetBalance {
		return 8, nil
	}
	if ty.IsForceAdjustTotalIssuance {
		return 9, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty PalletBalancesPalletCall) MarshalJSON() ([]byte, error) {
	if ty.IsTransferAllowDeath {
		m := map[string]interface{}{"PalletBalancesPalletCall::transfer_allow_death": map[string]interface{}{
			"AsTransferAllowDeathDest0":  ty.AsTransferAllowDeathDest0,
			"AsTransferAllowDeathValue1": ty.AsTransferAllowDeathValue1,
		}}
		return json.Marshal(m)
	}
	if ty.IsForceTransfer {
		m := map[string]interface{}{"PalletBalancesPalletCall::force_transfer": map[string]interface{}{
			"AsForceTransferDest1":   ty.AsForceTransferDest1,
			"AsForceTransferSource0": ty.AsForceTransferSource0,
			"AsForceTransferValue2":  ty.AsForceTransferValue2,
		}}
		return json.Marshal(m)
	}
	if ty.IsTransferKeepAlive {
		m := map[string]interface{}{"PalletBalancesPalletCall::transfer_keep_alive": map[string]interface{}{
			"AsTransferKeepAliveDest0":  ty.AsTransferKeepAliveDest0,
			"AsTransferKeepAliveValue1": ty.AsTransferKeepAliveValue1,
		}}
		return json.Marshal(m)
	}
	if ty.IsTransferAll {
		m := map[string]interface{}{"PalletBalancesPalletCall::transfer_all": map[string]interface{}{
			"AsTransferAllDest0":      ty.AsTransferAllDest0,
			"AsTransferAllKeepAlive1": ty.AsTransferAllKeepAlive1,
		}}
		return json.Marshal(m)
	}
	if ty.IsForceUnreserve {
		m := map[string]interface{}{"PalletBalancesPalletCall::force_unreserve": map[string]interface{}{
			"AsForceUnreserveAmount1": ty.AsForceUnreserveAmount1,
			"AsForceUnreserveWho0":    ty.AsForceUnreserveWho0,
		}}
		return json.Marshal(m)
	}
	if ty.IsUpgradeAccounts {
		m := map[string]interface{}{"PalletBalancesPalletCall::upgrade_accounts": ty.AsUpgradeAccountsWho0}
		return json.Marshal(m)
	}
	if ty.IsForceSetBalance {
		m := map[string]interface{}{"PalletBalancesPalletCall::force_set_balance": map[string]interface{}{
			"AsForceSetBalanceNewFree1": ty.AsForceSetBalanceNewFree1,
			"AsForceSetBalanceWho0":     ty.AsForceSetBalanceWho0,
		}}
		return json.Marshal(m)
	}
	if ty.IsForceAdjustTotalIssuance {
		m := map[string]interface{}{"PalletBalancesPalletCall::force_adjust_total_issuance": map[string]interface{}{
			"AsForceAdjustTotalIssuanceDelta1":     ty.AsForceAdjustTotalIssuanceDelta1,
			"AsForceAdjustTotalIssuanceDirection0": ty.AsForceAdjustTotalIssuanceDirection0,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated PalletSudoPalletCall with id=236
type PalletSudoPalletCall struct {
	IsSudo                       bool
	AsSudoCall0                  *RuntimeCall
	IsSudoUncheckedWeight        bool
	AsSudoUncheckedWeightCall0   *RuntimeCall
	AsSudoUncheckedWeightWeight1 Weight
	IsSetKey                     bool
	AsSetKeyNew0                 *MultiAddress
	IsSudoAs                     bool
	AsSudoAsWho0                 MultiAddress
	AsSudoAsCall1                *RuntimeCall
	IsRemoveKey                  bool
}

func (ty PalletSudoPalletCall) Encode(encoder scale.Encoder) (err error) {
	if ty.IsSudo {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSudoCall0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSudoUncheckedWeight {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSudoUncheckedWeightCall0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSudoUncheckedWeightWeight1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetKey {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetKeyNew0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSudoAs {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSudoAsWho0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSudoAsCall1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsRemoveKey {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *PalletSudoPalletCall) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsSudo = true
		var tmp RuntimeCall
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsSudoCall0 = &tmp
		return
	case 1:
		ty.IsSudoUncheckedWeight = true
		err = decoder.Decode(&ty.AsSudoUncheckedWeightCall0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSudoUncheckedWeightWeight1)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsSetKey = true
		var tmp MultiAddress
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsSetKeyNew0 = &tmp
		return
	case 3:
		ty.IsSudoAs = true
		err = decoder.Decode(&ty.AsSudoAsWho0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSudoAsCall1)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsRemoveKey = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *PalletSudoPalletCall) Variant() (uint8, error) {
	if ty.IsSudo {
		return 0, nil
	}
	if ty.IsSudoUncheckedWeight {
		return 1, nil
	}
	if ty.IsSetKey {
		return 2, nil
	}
	if ty.IsSudoAs {
		return 3, nil
	}
	if ty.IsRemoveKey {
		return 4, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty PalletSudoPalletCall) MarshalJSON() ([]byte, error) {
	if ty.IsSudo {
		m := map[string]interface{}{"PalletSudoPalletCall::sudo": ty.AsSudoCall0}
		return json.Marshal(m)
	}
	if ty.IsSudoUncheckedWeight {
		m := map[string]interface{}{"PalletSudoPalletCall::sudo_unchecked_weight": map[string]interface{}{
			"AsSudoUncheckedWeightCall0":   ty.AsSudoUncheckedWeightCall0,
			"AsSudoUncheckedWeightWeight1": ty.AsSudoUncheckedWeightWeight1,
		}}
		return json.Marshal(m)
	}
	if ty.IsSetKey {
		m := map[string]interface{}{"PalletSudoPalletCall::set_key": ty.AsSetKeyNew0}
		return json.Marshal(m)
	}
	if ty.IsSudoAs {
		m := map[string]interface{}{"PalletSudoPalletCall::sudo_as": map[string]interface{}{
			"AsSudoAsCall1": ty.AsSudoAsCall1,
			"AsSudoAsWho0":  ty.AsSudoAsWho0,
		}}
		return json.Marshal(m)
	}
	if ty.IsRemoveKey {
		return json.Marshal("PalletSudoPalletCall::remove_key")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated PalletCollatorSelectionPalletCall with id=238
type PalletCollatorSelectionPalletCall struct {
	IsSetInvulnerables          bool
	AsSetInvulnerablesNew0      [][32]byte
	IsSetDesiredCandidates      bool
	AsSetDesiredCandidatesMax0  uint32
	IsSetCandidacyBond          bool
	AsSetCandidacyBondBond0     types.U128
	IsRegisterAsCandidate       bool
	IsLeaveIntent               bool
	IsAddInvulnerable           bool
	AsAddInvulnerableWho0       [32]byte
	IsRemoveInvulnerable        bool
	AsRemoveInvulnerableWho0    [32]byte
	IsUpdateBond                bool
	AsUpdateBondNewDeposit0     types.U128
	IsTakeCandidateSlot         bool
	AsTakeCandidateSlotDeposit0 types.U128
	AsTakeCandidateSlotTarget1  [32]byte
}

func (ty PalletCollatorSelectionPalletCall) Encode(encoder scale.Encoder) (err error) {
	if ty.IsSetInvulnerables {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetInvulnerablesNew0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetDesiredCandidates {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetDesiredCandidatesMax0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetCandidacyBond {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetCandidacyBondBond0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsRegisterAsCandidate {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsLeaveIntent {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAddInvulnerable {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAddInvulnerableWho0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsRemoveInvulnerable {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsRemoveInvulnerableWho0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUpdateBond {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateBondNewDeposit0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTakeCandidateSlot {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTakeCandidateSlotDeposit0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTakeCandidateSlotTarget1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *PalletCollatorSelectionPalletCall) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsSetInvulnerables = true
		err = decoder.Decode(&ty.AsSetInvulnerablesNew0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsSetDesiredCandidates = true
		err = decoder.Decode(&ty.AsSetDesiredCandidatesMax0)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsSetCandidacyBond = true
		err = decoder.Decode(&ty.AsSetCandidacyBondBond0)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsRegisterAsCandidate = true
		return
	case 4:
		ty.IsLeaveIntent = true
		return
	case 5:
		ty.IsAddInvulnerable = true
		err = decoder.Decode(&ty.AsAddInvulnerableWho0)
		if err != nil {
			return err
		}
		return
	case 6:
		ty.IsRemoveInvulnerable = true
		err = decoder.Decode(&ty.AsRemoveInvulnerableWho0)
		if err != nil {
			return err
		}
		return
	case 7:
		ty.IsUpdateBond = true
		err = decoder.Decode(&ty.AsUpdateBondNewDeposit0)
		if err != nil {
			return err
		}
		return
	case 8:
		ty.IsTakeCandidateSlot = true
		err = decoder.Decode(&ty.AsTakeCandidateSlotDeposit0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTakeCandidateSlotTarget1)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *PalletCollatorSelectionPalletCall) Variant() (uint8, error) {
	if ty.IsSetInvulnerables {
		return 0, nil
	}
	if ty.IsSetDesiredCandidates {
		return 1, nil
	}
	if ty.IsSetCandidacyBond {
		return 2, nil
	}
	if ty.IsRegisterAsCandidate {
		return 3, nil
	}
	if ty.IsLeaveIntent {
		return 4, nil
	}
	if ty.IsAddInvulnerable {
		return 5, nil
	}
	if ty.IsRemoveInvulnerable {
		return 6, nil
	}
	if ty.IsUpdateBond {
		return 7, nil
	}
	if ty.IsTakeCandidateSlot {
		return 8, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty PalletCollatorSelectionPalletCall) MarshalJSON() ([]byte, error) {
	if ty.IsSetInvulnerables {
		m := map[string]interface{}{"PalletCollatorSelectionPalletCall::set_invulnerables": ty.AsSetInvulnerablesNew0}
		return json.Marshal(m)
	}
	if ty.IsSetDesiredCandidates {
		m := map[string]interface{}{"PalletCollatorSelectionPalletCall::set_desired_candidates": ty.AsSetDesiredCandidatesMax0}
		return json.Marshal(m)
	}
	if ty.IsSetCandidacyBond {
		m := map[string]interface{}{"PalletCollatorSelectionPalletCall::set_candidacy_bond": ty.AsSetCandidacyBondBond0}
		return json.Marshal(m)
	}
	if ty.IsRegisterAsCandidate {
		return json.Marshal("PalletCollatorSelectionPalletCall::register_as_candidate")
	}
	if ty.IsLeaveIntent {
		return json.Marshal("PalletCollatorSelectionPalletCall::leave_intent")
	}
	if ty.IsAddInvulnerable {
		m := map[string]interface{}{"PalletCollatorSelectionPalletCall::add_invulnerable": ty.AsAddInvulnerableWho0}
		return json.Marshal(m)
	}
	if ty.IsRemoveInvulnerable {
		m := map[string]interface{}{"PalletCollatorSelectionPalletCall::remove_invulnerable": ty.AsRemoveInvulnerableWho0}
		return json.Marshal(m)
	}
	if ty.IsUpdateBond {
		m := map[string]interface{}{"PalletCollatorSelectionPalletCall::update_bond": ty.AsUpdateBondNewDeposit0}
		return json.Marshal(m)
	}
	if ty.IsTakeCandidateSlot {
		m := map[string]interface{}{"PalletCollatorSelectionPalletCall::take_candidate_slot": map[string]interface{}{
			"AsTakeCandidateSlotDeposit0": ty.AsTakeCandidateSlotDeposit0,
			"AsTakeCandidateSlotTarget1":  ty.AsTakeCandidateSlotTarget1,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated PalletSessionPalletCall with id=239
type PalletSessionPalletCall struct {
	IsSetKeys       bool
	AsSetKeysKeys0  [32]byte
	AsSetKeysProof1 []byte
	IsPurgeKeys     bool
}

func (ty PalletSessionPalletCall) Encode(encoder scale.Encoder) (err error) {
	if ty.IsSetKeys {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetKeysKeys0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetKeysProof1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsPurgeKeys {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *PalletSessionPalletCall) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsSetKeys = true
		err = decoder.Decode(&ty.AsSetKeysKeys0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSetKeysProof1)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsPurgeKeys = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *PalletSessionPalletCall) Variant() (uint8, error) {
	if ty.IsSetKeys {
		return 0, nil
	}
	if ty.IsPurgeKeys {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty PalletSessionPalletCall) MarshalJSON() ([]byte, error) {
	if ty.IsSetKeys {
		m := map[string]interface{}{"PalletSessionPalletCall::set_keys": map[string]interface{}{
			"AsSetKeysKeys0":  ty.AsSetKeysKeys0,
			"AsSetKeysProof1": ty.AsSetKeysProof1,
		}}
		return json.Marshal(m)
	}
	if ty.IsPurgeKeys {
		return json.Marshal("PalletSessionPalletCall::purge_keys")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated CumulusPalletXcmpQueuePalletCall with id=242
type CumulusPalletXcmpQueuePalletCall struct {
	IsSuspendXcmExecution        bool
	IsResumeXcmExecution         bool
	IsUpdateSuspendThreshold     bool
	AsUpdateSuspendThresholdNew0 uint32
	IsUpdateDropThreshold        bool
	AsUpdateDropThresholdNew0    uint32
	IsUpdateResumeThreshold      bool
	AsUpdateResumeThresholdNew0  uint32
}

func (ty CumulusPalletXcmpQueuePalletCall) Encode(encoder scale.Encoder) (err error) {
	if ty.IsSuspendXcmExecution {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsResumeXcmExecution {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUpdateSuspendThreshold {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateSuspendThresholdNew0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUpdateDropThreshold {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateDropThresholdNew0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUpdateResumeThreshold {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateResumeThresholdNew0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *CumulusPalletXcmpQueuePalletCall) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 1:
		ty.IsSuspendXcmExecution = true
		return
	case 2:
		ty.IsResumeXcmExecution = true
		return
	case 3:
		ty.IsUpdateSuspendThreshold = true
		err = decoder.Decode(&ty.AsUpdateSuspendThresholdNew0)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsUpdateDropThreshold = true
		err = decoder.Decode(&ty.AsUpdateDropThresholdNew0)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsUpdateResumeThreshold = true
		err = decoder.Decode(&ty.AsUpdateResumeThresholdNew0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *CumulusPalletXcmpQueuePalletCall) Variant() (uint8, error) {
	if ty.IsSuspendXcmExecution {
		return 1, nil
	}
	if ty.IsResumeXcmExecution {
		return 2, nil
	}
	if ty.IsUpdateSuspendThreshold {
		return 3, nil
	}
	if ty.IsUpdateDropThreshold {
		return 4, nil
	}
	if ty.IsUpdateResumeThreshold {
		return 5, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty CumulusPalletXcmpQueuePalletCall) MarshalJSON() ([]byte, error) {
	if ty.IsSuspendXcmExecution {
		return json.Marshal("CumulusPalletXcmpQueuePalletCall::suspend_xcm_execution")
	}
	if ty.IsResumeXcmExecution {
		return json.Marshal("CumulusPalletXcmpQueuePalletCall::resume_xcm_execution")
	}
	if ty.IsUpdateSuspendThreshold {
		m := map[string]interface{}{"CumulusPalletXcmpQueuePalletCall::update_suspend_threshold": ty.AsUpdateSuspendThresholdNew0}
		return json.Marshal(m)
	}
	if ty.IsUpdateDropThreshold {
		m := map[string]interface{}{"CumulusPalletXcmpQueuePalletCall::update_drop_threshold": ty.AsUpdateDropThresholdNew0}
		return json.Marshal(m)
	}
	if ty.IsUpdateResumeThreshold {
		m := map[string]interface{}{"CumulusPalletXcmpQueuePalletCall::update_resume_threshold": ty.AsUpdateResumeThresholdNew0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated XcmV2TraitsError with id=251
type XcmV2TraitsError struct {
	IsOverflow                   bool
	IsUnimplemented              bool
	IsUntrustedReserveLocation   bool
	IsUntrustedTeleportLocation  bool
	IsMultiLocationFull          bool
	IsMultiLocationNotInvertible bool
	IsBadOrigin                  bool
	IsInvalidLocation            bool
	IsAssetNotFound              bool
	IsFailedToTransactAsset      bool
	IsNotWithdrawable            bool
	IsLocationCannotHold         bool
	IsExceedsMaxMessageSize      bool
	IsDestinationUnsupported     bool
	IsTransport                  bool
	IsUnroutable                 bool
	IsUnknownClaim               bool
	IsFailedToDecode             bool
	IsMaxWeightInvalid           bool
	IsNotHoldingFees             bool
	IsTooExpensive               bool
	IsTrap                       bool
	AsTrapField0                 uint64
	IsUnhandledXcmVersion        bool
	IsWeightLimitReached         bool
	AsWeightLimitReachedField0   uint64
	IsBarrier                    bool
	IsWeightNotComputable        bool
}

func (ty XcmV2TraitsError) Encode(encoder scale.Encoder) (err error) {
	if ty.IsOverflow {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnimplemented {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUntrustedReserveLocation {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUntrustedTeleportLocation {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsMultiLocationFull {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsMultiLocationNotInvertible {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBadOrigin {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsInvalidLocation {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAssetNotFound {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsFailedToTransactAsset {
		err = encoder.PushByte(9)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNotWithdrawable {
		err = encoder.PushByte(10)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsLocationCannotHold {
		err = encoder.PushByte(11)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExceedsMaxMessageSize {
		err = encoder.PushByte(12)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDestinationUnsupported {
		err = encoder.PushByte(13)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTransport {
		err = encoder.PushByte(14)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnroutable {
		err = encoder.PushByte(15)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnknownClaim {
		err = encoder.PushByte(16)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsFailedToDecode {
		err = encoder.PushByte(17)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsMaxWeightInvalid {
		err = encoder.PushByte(18)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNotHoldingFees {
		err = encoder.PushByte(19)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTooExpensive {
		err = encoder.PushByte(20)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTrap {
		err = encoder.PushByte(21)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTrapField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnhandledXcmVersion {
		err = encoder.PushByte(22)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWeightLimitReached {
		err = encoder.PushByte(23)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWeightLimitReachedField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBarrier {
		err = encoder.PushByte(24)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWeightNotComputable {
		err = encoder.PushByte(25)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *XcmV2TraitsError) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsOverflow = true
		return
	case 1:
		ty.IsUnimplemented = true
		return
	case 2:
		ty.IsUntrustedReserveLocation = true
		return
	case 3:
		ty.IsUntrustedTeleportLocation = true
		return
	case 4:
		ty.IsMultiLocationFull = true
		return
	case 5:
		ty.IsMultiLocationNotInvertible = true
		return
	case 6:
		ty.IsBadOrigin = true
		return
	case 7:
		ty.IsInvalidLocation = true
		return
	case 8:
		ty.IsAssetNotFound = true
		return
	case 9:
		ty.IsFailedToTransactAsset = true
		return
	case 10:
		ty.IsNotWithdrawable = true
		return
	case 11:
		ty.IsLocationCannotHold = true
		return
	case 12:
		ty.IsExceedsMaxMessageSize = true
		return
	case 13:
		ty.IsDestinationUnsupported = true
		return
	case 14:
		ty.IsTransport = true
		return
	case 15:
		ty.IsUnroutable = true
		return
	case 16:
		ty.IsUnknownClaim = true
		return
	case 17:
		ty.IsFailedToDecode = true
		return
	case 18:
		ty.IsMaxWeightInvalid = true
		return
	case 19:
		ty.IsNotHoldingFees = true
		return
	case 20:
		ty.IsTooExpensive = true
		return
	case 21:
		ty.IsTrap = true
		err = decoder.Decode(&ty.AsTrapField0)
		if err != nil {
			return err
		}
		return
	case 22:
		ty.IsUnhandledXcmVersion = true
		return
	case 23:
		ty.IsWeightLimitReached = true
		err = decoder.Decode(&ty.AsWeightLimitReachedField0)
		if err != nil {
			return err
		}
		return
	case 24:
		ty.IsBarrier = true
		return
	case 25:
		ty.IsWeightNotComputable = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *XcmV2TraitsError) Variant() (uint8, error) {
	if ty.IsOverflow {
		return 0, nil
	}
	if ty.IsUnimplemented {
		return 1, nil
	}
	if ty.IsUntrustedReserveLocation {
		return 2, nil
	}
	if ty.IsUntrustedTeleportLocation {
		return 3, nil
	}
	if ty.IsMultiLocationFull {
		return 4, nil
	}
	if ty.IsMultiLocationNotInvertible {
		return 5, nil
	}
	if ty.IsBadOrigin {
		return 6, nil
	}
	if ty.IsInvalidLocation {
		return 7, nil
	}
	if ty.IsAssetNotFound {
		return 8, nil
	}
	if ty.IsFailedToTransactAsset {
		return 9, nil
	}
	if ty.IsNotWithdrawable {
		return 10, nil
	}
	if ty.IsLocationCannotHold {
		return 11, nil
	}
	if ty.IsExceedsMaxMessageSize {
		return 12, nil
	}
	if ty.IsDestinationUnsupported {
		return 13, nil
	}
	if ty.IsTransport {
		return 14, nil
	}
	if ty.IsUnroutable {
		return 15, nil
	}
	if ty.IsUnknownClaim {
		return 16, nil
	}
	if ty.IsFailedToDecode {
		return 17, nil
	}
	if ty.IsMaxWeightInvalid {
		return 18, nil
	}
	if ty.IsNotHoldingFees {
		return 19, nil
	}
	if ty.IsTooExpensive {
		return 20, nil
	}
	if ty.IsTrap {
		return 21, nil
	}
	if ty.IsUnhandledXcmVersion {
		return 22, nil
	}
	if ty.IsWeightLimitReached {
		return 23, nil
	}
	if ty.IsBarrier {
		return 24, nil
	}
	if ty.IsWeightNotComputable {
		return 25, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty XcmV2TraitsError) MarshalJSON() ([]byte, error) {
	if ty.IsOverflow {
		return json.Marshal("XcmV2TraitsError::Overflow")
	}
	if ty.IsUnimplemented {
		return json.Marshal("XcmV2TraitsError::Unimplemented")
	}
	if ty.IsUntrustedReserveLocation {
		return json.Marshal("XcmV2TraitsError::UntrustedReserveLocation")
	}
	if ty.IsUntrustedTeleportLocation {
		return json.Marshal("XcmV2TraitsError::UntrustedTeleportLocation")
	}
	if ty.IsMultiLocationFull {
		return json.Marshal("XcmV2TraitsError::MultiLocationFull")
	}
	if ty.IsMultiLocationNotInvertible {
		return json.Marshal("XcmV2TraitsError::MultiLocationNotInvertible")
	}
	if ty.IsBadOrigin {
		return json.Marshal("XcmV2TraitsError::BadOrigin")
	}
	if ty.IsInvalidLocation {
		return json.Marshal("XcmV2TraitsError::InvalidLocation")
	}
	if ty.IsAssetNotFound {
		return json.Marshal("XcmV2TraitsError::AssetNotFound")
	}
	if ty.IsFailedToTransactAsset {
		return json.Marshal("XcmV2TraitsError::FailedToTransactAsset")
	}
	if ty.IsNotWithdrawable {
		return json.Marshal("XcmV2TraitsError::NotWithdrawable")
	}
	if ty.IsLocationCannotHold {
		return json.Marshal("XcmV2TraitsError::LocationCannotHold")
	}
	if ty.IsExceedsMaxMessageSize {
		return json.Marshal("XcmV2TraitsError::ExceedsMaxMessageSize")
	}
	if ty.IsDestinationUnsupported {
		return json.Marshal("XcmV2TraitsError::DestinationUnsupported")
	}
	if ty.IsTransport {
		return json.Marshal("XcmV2TraitsError::Transport")
	}
	if ty.IsUnroutable {
		return json.Marshal("XcmV2TraitsError::Unroutable")
	}
	if ty.IsUnknownClaim {
		return json.Marshal("XcmV2TraitsError::UnknownClaim")
	}
	if ty.IsFailedToDecode {
		return json.Marshal("XcmV2TraitsError::FailedToDecode")
	}
	if ty.IsMaxWeightInvalid {
		return json.Marshal("XcmV2TraitsError::MaxWeightInvalid")
	}
	if ty.IsNotHoldingFees {
		return json.Marshal("XcmV2TraitsError::NotHoldingFees")
	}
	if ty.IsTooExpensive {
		return json.Marshal("XcmV2TraitsError::TooExpensive")
	}
	if ty.IsTrap {
		m := map[string]interface{}{"XcmV2TraitsError::Trap": ty.AsTrapField0}
		return json.Marshal(m)
	}
	if ty.IsUnhandledXcmVersion {
		return json.Marshal("XcmV2TraitsError::UnhandledXcmVersion")
	}
	if ty.IsWeightLimitReached {
		m := map[string]interface{}{"XcmV2TraitsError::WeightLimitReached": ty.AsWeightLimitReachedField0}
		return json.Marshal(m)
	}
	if ty.IsBarrier {
		return json.Marshal("XcmV2TraitsError::Barrier")
	}
	if ty.IsWeightNotComputable {
		return json.Marshal("XcmV2TraitsError::WeightNotComputable")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Tuple type generated from metadata id 250
type TupleOfUint32XcmV2TraitsError struct {
	Elem0 uint32
	Elem1 XcmV2TraitsError
}

// Generated Option with id=249
type OptionTTupleOfUint32XcmV2TraitsError struct {
	IsNone       bool
	IsSome       bool
	AsSomeField0 TupleOfUint32XcmV2TraitsError
}

func (ty OptionTTupleOfUint32XcmV2TraitsError) Encode(encoder scale.Encoder) (err error) {
	if ty.IsNone {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSome {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSomeField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *OptionTTupleOfUint32XcmV2TraitsError) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsNone = true
		return
	case 1:
		ty.IsSome = true
		err = decoder.Decode(&ty.AsSomeField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *OptionTTupleOfUint32XcmV2TraitsError) Variant() (uint8, error) {
	if ty.IsNone {
		return 0, nil
	}
	if ty.IsSome {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty OptionTTupleOfUint32XcmV2TraitsError) MarshalJSON() ([]byte, error) {
	if ty.IsNone {
		return json.Marshal("OptionTTupleOfUint32XcmV2TraitsError::None")
	}
	if ty.IsSome {
		m := map[string]interface{}{"OptionTTupleOfUint32XcmV2TraitsError::Some": ty.AsSomeField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated XcmV2Response with id=248
type Response1 struct {
	IsNull                  bool
	IsAssets                bool
	AsAssetsField0          []MultiAsset
	IsExecutionResult       bool
	AsExecutionResultField0 *OptionTTupleOfUint32XcmV2TraitsError
	IsVersion               bool
	AsVersionField0         uint32
}

func (ty Response1) Encode(encoder scale.Encoder) (err error) {
	if ty.IsNull {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAssets {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAssetsField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExecutionResult {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExecutionResultField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsVersion {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsVersionField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Response1) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsNull = true
		return
	case 1:
		ty.IsAssets = true
		err = decoder.Decode(&ty.AsAssetsField0)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsExecutionResult = true
		var tmp OptionTTupleOfUint32XcmV2TraitsError
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsExecutionResultField0 = &tmp
		return
	case 3:
		ty.IsVersion = true
		err = decoder.Decode(&ty.AsVersionField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Response1) Variant() (uint8, error) {
	if ty.IsNull {
		return 0, nil
	}
	if ty.IsAssets {
		return 1, nil
	}
	if ty.IsExecutionResult {
		return 2, nil
	}
	if ty.IsVersion {
		return 3, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Response1) MarshalJSON() ([]byte, error) {
	if ty.IsNull {
		return json.Marshal("Response1::Null")
	}
	if ty.IsAssets {
		m := map[string]interface{}{"Response1::Assets": ty.AsAssetsField0}
		return json.Marshal(m)
	}
	if ty.IsExecutionResult {
		m := map[string]interface{}{"Response1::ExecutionResult": ty.AsExecutionResultField0}
		return json.Marshal(m)
	}
	if ty.IsVersion {
		m := map[string]interface{}{"Response1::Version": ty.AsVersionField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated XcmV2MultiassetWildFungibility with id=254
type WildFungibility1 struct {
	IsFungible    bool
	IsNonFungible bool
}

func (ty WildFungibility1) Encode(encoder scale.Encoder) (err error) {
	if ty.IsFungible {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNonFungible {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *WildFungibility1) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsFungible = true
		return
	case 1:
		ty.IsNonFungible = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *WildFungibility1) Variant() (uint8, error) {
	if ty.IsFungible {
		return 0, nil
	}
	if ty.IsNonFungible {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty WildFungibility1) MarshalJSON() ([]byte, error) {
	if ty.IsFungible {
		return json.Marshal("WildFungibility1::Fungible")
	}
	if ty.IsNonFungible {
		return json.Marshal("WildFungibility1::NonFungible")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated XcmV2MultiassetWildMultiAsset with id=253
type WildMultiAsset struct {
	IsAll       bool
	IsAllOf     bool
	AsAllOfId0  AssetId
	AsAllOfFun1 WildFungibility1
}

func (ty WildMultiAsset) Encode(encoder scale.Encoder) (err error) {
	if ty.IsAll {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAllOf {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAllOfId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAllOfFun1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *WildMultiAsset) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsAll = true
		return
	case 1:
		ty.IsAllOf = true
		err = decoder.Decode(&ty.AsAllOfId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsAllOfFun1)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *WildMultiAsset) Variant() (uint8, error) {
	if ty.IsAll {
		return 0, nil
	}
	if ty.IsAllOf {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty WildMultiAsset) MarshalJSON() ([]byte, error) {
	if ty.IsAll {
		return json.Marshal("WildMultiAsset::All")
	}
	if ty.IsAllOf {
		m := map[string]interface{}{"WildMultiAsset::AllOf": map[string]interface{}{
			"AsAllOfFun1": ty.AsAllOfFun1,
			"AsAllOfId0":  ty.AsAllOfId0,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated XcmV2MultiassetMultiAssetFilter with id=252
type MultiAssetFilter struct {
	IsDefinite       bool
	AsDefiniteField0 []MultiAsset
	IsWild           bool
	AsWildField0     *WildMultiAsset
}

func (ty MultiAssetFilter) Encode(encoder scale.Encoder) (err error) {
	if ty.IsDefinite {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDefiniteField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWild {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWildField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *MultiAssetFilter) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsDefinite = true
		err = decoder.Decode(&ty.AsDefiniteField0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsWild = true
		var tmp WildMultiAsset
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsWildField0 = &tmp
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *MultiAssetFilter) Variant() (uint8, error) {
	if ty.IsDefinite {
		return 0, nil
	}
	if ty.IsWild {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty MultiAssetFilter) MarshalJSON() ([]byte, error) {
	if ty.IsDefinite {
		m := map[string]interface{}{"MultiAssetFilter::Definite": ty.AsDefiniteField0}
		return json.Marshal(m)
	}
	if ty.IsWild {
		m := map[string]interface{}{"MultiAssetFilter::Wild": ty.AsWildField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated XcmV2WeightLimit with id=255
type WeightLimit1 struct {
	IsUnlimited     bool
	IsLimited       bool
	AsLimitedField0 types.UCompact
}

func (ty WeightLimit1) Encode(encoder scale.Encoder) (err error) {
	if ty.IsUnlimited {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsLimited {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLimitedField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *WeightLimit1) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsUnlimited = true
		return
	case 1:
		ty.IsLimited = true
		err = decoder.Decode(&ty.AsLimitedField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *WeightLimit1) Variant() (uint8, error) {
	if ty.IsUnlimited {
		return 0, nil
	}
	if ty.IsLimited {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty WeightLimit1) MarshalJSON() ([]byte, error) {
	if ty.IsUnlimited {
		return json.Marshal("WeightLimit1::Unlimited")
	}
	if ty.IsLimited {
		m := map[string]interface{}{"WeightLimit1::Limited": ty.AsLimitedField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated XcmV2Instruction with id=247
type Instruction1 struct {
	IsWithdrawAsset                            bool
	AsWithdrawAssetField0                      []MultiAsset
	IsReserveAssetDeposited                    bool
	AsReserveAssetDepositedField0              []MultiAsset
	IsReceiveTeleportedAsset                   bool
	AsReceiveTeleportedAssetField0             []MultiAsset
	IsQueryResponse                            bool
	AsQueryResponseQueryId0                    types.UCompact
	AsQueryResponseResponse1                   Response1
	AsQueryResponseMaxWeight2                  types.UCompact
	IsTransferAsset                            bool
	AsTransferAssetAssets0                     []MultiAsset
	AsTransferAssetBeneficiary1                MultiLocation
	IsTransferReserveAsset                     bool
	AsTransferReserveAssetAssets0              []MultiAsset
	AsTransferReserveAssetDest1                MultiLocation
	AsTransferReserveAssetXcm2                 []Instruction1
	IsTransact                                 bool
	AsTransactOriginType0                      OriginKind
	AsTransactRequireWeightAtMost1             types.UCompact
	AsTransactCall2                            []byte
	IsHrmpNewChannelOpenRequest                bool
	AsHrmpNewChannelOpenRequestSender0         types.UCompact
	AsHrmpNewChannelOpenRequestMaxMessageSize1 types.UCompact
	AsHrmpNewChannelOpenRequestMaxCapacity2    types.UCompact
	IsHrmpChannelAccepted                      bool
	AsHrmpChannelAcceptedRecipient0            types.UCompact
	IsHrmpChannelClosing                       bool
	AsHrmpChannelClosingInitiator0             types.UCompact
	AsHrmpChannelClosingSender1                types.UCompact
	AsHrmpChannelClosingRecipient2             types.UCompact
	IsClearOrigin                              bool
	IsDescendOrigin                            bool
	AsDescendOriginField0                      *Junctions1
	IsReportError                              bool
	AsReportErrorQueryId0                      types.UCompact
	AsReportErrorDest1                         MultiLocation
	AsReportErrorMaxResponseWeight2            types.UCompact
	IsDepositAsset                             bool
	AsDepositAssetAssets0                      MultiAssetFilter
	AsDepositAssetMaxAssets1                   types.UCompact
	AsDepositAssetBeneficiary2                 MultiLocation
	IsDepositReserveAsset                      bool
	AsDepositReserveAssetAssets0               MultiAssetFilter
	AsDepositReserveAssetMaxAssets1            types.UCompact
	AsDepositReserveAssetDest2                 MultiLocation
	AsDepositReserveAssetXcm3                  []Instruction1
	IsExchangeAsset                            bool
	AsExchangeAssetGive0                       MultiAssetFilter
	AsExchangeAssetReceive1                    []MultiAsset
	IsInitiateReserveWithdraw                  bool
	AsInitiateReserveWithdrawAssets0           MultiAssetFilter
	AsInitiateReserveWithdrawReserve1          MultiLocation
	AsInitiateReserveWithdrawXcm2              []Instruction1
	IsInitiateTeleport                         bool
	AsInitiateTeleportAssets0                  MultiAssetFilter
	AsInitiateTeleportDest1                    MultiLocation
	AsInitiateTeleportXcm2                     []Instruction1
	IsQueryHolding                             bool
	AsQueryHoldingQueryId0                     types.UCompact
	AsQueryHoldingDest1                        MultiLocation
	AsQueryHoldingAssets2                      MultiAssetFilter
	AsQueryHoldingMaxResponseWeight3           types.UCompact
	IsBuyExecution                             bool
	AsBuyExecutionFees0                        MultiAsset
	AsBuyExecutionWeightLimit1                 WeightLimit1
	IsRefundSurplus                            bool
	IsSetErrorHandler                          bool
	AsSetErrorHandlerField0                    []Instruction1
	IsSetAppendix                              bool
	AsSetAppendixField0                        []Instruction1
	IsClearError                               bool
	IsClaimAsset                               bool
	AsClaimAssetAssets0                        []MultiAsset
	AsClaimAssetTicket1                        MultiLocation
	IsTrap                                     bool
	AsTrapField0                               types.UCompact
	IsSubscribeVersion                         bool
	AsSubscribeVersionQueryId0                 types.UCompact
	AsSubscribeVersionMaxResponseWeight1       types.UCompact
	IsUnsubscribeVersion                       bool
}

func (ty Instruction1) Encode(encoder scale.Encoder) (err error) {
	if ty.IsWithdrawAsset {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWithdrawAssetField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReserveAssetDeposited {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReserveAssetDepositedField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReceiveTeleportedAsset {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReceiveTeleportedAssetField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsQueryResponse {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryResponseQueryId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryResponseResponse1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryResponseMaxWeight2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTransferAsset {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferAssetAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferAssetBeneficiary1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTransferReserveAsset {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferReserveAssetAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferReserveAssetDest1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferReserveAssetXcm2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTransact {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransactOriginType0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransactRequireWeightAtMost1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransactCall2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsHrmpNewChannelOpenRequest {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpNewChannelOpenRequestSender0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpNewChannelOpenRequestMaxMessageSize1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpNewChannelOpenRequestMaxCapacity2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsHrmpChannelAccepted {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpChannelAcceptedRecipient0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsHrmpChannelClosing {
		err = encoder.PushByte(9)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpChannelClosingInitiator0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpChannelClosingSender1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpChannelClosingRecipient2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsClearOrigin {
		err = encoder.PushByte(10)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDescendOrigin {
		err = encoder.PushByte(11)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDescendOriginField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReportError {
		err = encoder.PushByte(12)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReportErrorQueryId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReportErrorDest1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReportErrorMaxResponseWeight2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDepositAsset {
		err = encoder.PushByte(13)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositAssetAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositAssetMaxAssets1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositAssetBeneficiary2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDepositReserveAsset {
		err = encoder.PushByte(14)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositReserveAssetAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositReserveAssetMaxAssets1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositReserveAssetDest2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositReserveAssetXcm3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExchangeAsset {
		err = encoder.PushByte(15)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExchangeAssetGive0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExchangeAssetReceive1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsInitiateReserveWithdraw {
		err = encoder.PushByte(16)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateReserveWithdrawAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateReserveWithdrawReserve1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateReserveWithdrawXcm2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsInitiateTeleport {
		err = encoder.PushByte(17)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateTeleportAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateTeleportDest1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateTeleportXcm2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsQueryHolding {
		err = encoder.PushByte(18)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryHoldingQueryId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryHoldingDest1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryHoldingAssets2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryHoldingMaxResponseWeight3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBuyExecution {
		err = encoder.PushByte(19)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBuyExecutionFees0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBuyExecutionWeightLimit1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsRefundSurplus {
		err = encoder.PushByte(20)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetErrorHandler {
		err = encoder.PushByte(21)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetErrorHandlerField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetAppendix {
		err = encoder.PushByte(22)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetAppendixField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsClearError {
		err = encoder.PushByte(23)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsClaimAsset {
		err = encoder.PushByte(24)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClaimAssetAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClaimAssetTicket1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTrap {
		err = encoder.PushByte(25)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTrapField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSubscribeVersion {
		err = encoder.PushByte(26)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSubscribeVersionQueryId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSubscribeVersionMaxResponseWeight1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnsubscribeVersion {
		err = encoder.PushByte(27)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Instruction1) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsWithdrawAsset = true
		err = decoder.Decode(&ty.AsWithdrawAssetField0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsReserveAssetDeposited = true
		err = decoder.Decode(&ty.AsReserveAssetDepositedField0)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsReceiveTeleportedAsset = true
		err = decoder.Decode(&ty.AsReceiveTeleportedAssetField0)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsQueryResponse = true
		err = decoder.Decode(&ty.AsQueryResponseQueryId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsQueryResponseResponse1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsQueryResponseMaxWeight2)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsTransferAsset = true
		err = decoder.Decode(&ty.AsTransferAssetAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferAssetBeneficiary1)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsTransferReserveAsset = true
		err = decoder.Decode(&ty.AsTransferReserveAssetAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferReserveAssetDest1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferReserveAssetXcm2)
		if err != nil {
			return err
		}
		return
	case 6:
		ty.IsTransact = true
		err = decoder.Decode(&ty.AsTransactOriginType0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransactRequireWeightAtMost1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransactCall2)
		if err != nil {
			return err
		}
		return
	case 7:
		ty.IsHrmpNewChannelOpenRequest = true
		err = decoder.Decode(&ty.AsHrmpNewChannelOpenRequestSender0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsHrmpNewChannelOpenRequestMaxMessageSize1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsHrmpNewChannelOpenRequestMaxCapacity2)
		if err != nil {
			return err
		}
		return
	case 8:
		ty.IsHrmpChannelAccepted = true
		err = decoder.Decode(&ty.AsHrmpChannelAcceptedRecipient0)
		if err != nil {
			return err
		}
		return
	case 9:
		ty.IsHrmpChannelClosing = true
		err = decoder.Decode(&ty.AsHrmpChannelClosingInitiator0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsHrmpChannelClosingSender1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsHrmpChannelClosingRecipient2)
		if err != nil {
			return err
		}
		return
	case 10:
		ty.IsClearOrigin = true
		return
	case 11:
		ty.IsDescendOrigin = true
		var tmp Junctions1
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsDescendOriginField0 = &tmp
		return
	case 12:
		ty.IsReportError = true
		err = decoder.Decode(&ty.AsReportErrorQueryId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsReportErrorDest1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsReportErrorMaxResponseWeight2)
		if err != nil {
			return err
		}
		return
	case 13:
		ty.IsDepositAsset = true
		err = decoder.Decode(&ty.AsDepositAssetAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDepositAssetMaxAssets1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDepositAssetBeneficiary2)
		if err != nil {
			return err
		}
		return
	case 14:
		ty.IsDepositReserveAsset = true
		err = decoder.Decode(&ty.AsDepositReserveAssetAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDepositReserveAssetMaxAssets1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDepositReserveAssetDest2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDepositReserveAssetXcm3)
		if err != nil {
			return err
		}
		return
	case 15:
		ty.IsExchangeAsset = true
		err = decoder.Decode(&ty.AsExchangeAssetGive0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExchangeAssetReceive1)
		if err != nil {
			return err
		}
		return
	case 16:
		ty.IsInitiateReserveWithdraw = true
		err = decoder.Decode(&ty.AsInitiateReserveWithdrawAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInitiateReserveWithdrawReserve1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInitiateReserveWithdrawXcm2)
		if err != nil {
			return err
		}
		return
	case 17:
		ty.IsInitiateTeleport = true
		err = decoder.Decode(&ty.AsInitiateTeleportAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInitiateTeleportDest1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInitiateTeleportXcm2)
		if err != nil {
			return err
		}
		return
	case 18:
		ty.IsQueryHolding = true
		err = decoder.Decode(&ty.AsQueryHoldingQueryId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsQueryHoldingDest1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsQueryHoldingAssets2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsQueryHoldingMaxResponseWeight3)
		if err != nil {
			return err
		}
		return
	case 19:
		ty.IsBuyExecution = true
		err = decoder.Decode(&ty.AsBuyExecutionFees0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsBuyExecutionWeightLimit1)
		if err != nil {
			return err
		}
		return
	case 20:
		ty.IsRefundSurplus = true
		return
	case 21:
		ty.IsSetErrorHandler = true
		err = decoder.Decode(&ty.AsSetErrorHandlerField0)
		if err != nil {
			return err
		}
		return
	case 22:
		ty.IsSetAppendix = true
		err = decoder.Decode(&ty.AsSetAppendixField0)
		if err != nil {
			return err
		}
		return
	case 23:
		ty.IsClearError = true
		return
	case 24:
		ty.IsClaimAsset = true
		err = decoder.Decode(&ty.AsClaimAssetAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsClaimAssetTicket1)
		if err != nil {
			return err
		}
		return
	case 25:
		ty.IsTrap = true
		err = decoder.Decode(&ty.AsTrapField0)
		if err != nil {
			return err
		}
		return
	case 26:
		ty.IsSubscribeVersion = true
		err = decoder.Decode(&ty.AsSubscribeVersionQueryId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSubscribeVersionMaxResponseWeight1)
		if err != nil {
			return err
		}
		return
	case 27:
		ty.IsUnsubscribeVersion = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Instruction1) Variant() (uint8, error) {
	if ty.IsWithdrawAsset {
		return 0, nil
	}
	if ty.IsReserveAssetDeposited {
		return 1, nil
	}
	if ty.IsReceiveTeleportedAsset {
		return 2, nil
	}
	if ty.IsQueryResponse {
		return 3, nil
	}
	if ty.IsTransferAsset {
		return 4, nil
	}
	if ty.IsTransferReserveAsset {
		return 5, nil
	}
	if ty.IsTransact {
		return 6, nil
	}
	if ty.IsHrmpNewChannelOpenRequest {
		return 7, nil
	}
	if ty.IsHrmpChannelAccepted {
		return 8, nil
	}
	if ty.IsHrmpChannelClosing {
		return 9, nil
	}
	if ty.IsClearOrigin {
		return 10, nil
	}
	if ty.IsDescendOrigin {
		return 11, nil
	}
	if ty.IsReportError {
		return 12, nil
	}
	if ty.IsDepositAsset {
		return 13, nil
	}
	if ty.IsDepositReserveAsset {
		return 14, nil
	}
	if ty.IsExchangeAsset {
		return 15, nil
	}
	if ty.IsInitiateReserveWithdraw {
		return 16, nil
	}
	if ty.IsInitiateTeleport {
		return 17, nil
	}
	if ty.IsQueryHolding {
		return 18, nil
	}
	if ty.IsBuyExecution {
		return 19, nil
	}
	if ty.IsRefundSurplus {
		return 20, nil
	}
	if ty.IsSetErrorHandler {
		return 21, nil
	}
	if ty.IsSetAppendix {
		return 22, nil
	}
	if ty.IsClearError {
		return 23, nil
	}
	if ty.IsClaimAsset {
		return 24, nil
	}
	if ty.IsTrap {
		return 25, nil
	}
	if ty.IsSubscribeVersion {
		return 26, nil
	}
	if ty.IsUnsubscribeVersion {
		return 27, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Instruction1) MarshalJSON() ([]byte, error) {
	if ty.IsWithdrawAsset {
		m := map[string]interface{}{"Instruction1::WithdrawAsset": ty.AsWithdrawAssetField0}
		return json.Marshal(m)
	}
	if ty.IsReserveAssetDeposited {
		m := map[string]interface{}{"Instruction1::ReserveAssetDeposited": ty.AsReserveAssetDepositedField0}
		return json.Marshal(m)
	}
	if ty.IsReceiveTeleportedAsset {
		m := map[string]interface{}{"Instruction1::ReceiveTeleportedAsset": ty.AsReceiveTeleportedAssetField0}
		return json.Marshal(m)
	}
	if ty.IsQueryResponse {
		m := map[string]interface{}{"Instruction1::QueryResponse": map[string]interface{}{
			"AsQueryResponseMaxWeight2": ty.AsQueryResponseMaxWeight2,
			"AsQueryResponseQueryId0":   ty.AsQueryResponseQueryId0,
			"AsQueryResponseResponse1":  ty.AsQueryResponseResponse1,
		}}
		return json.Marshal(m)
	}
	if ty.IsTransferAsset {
		m := map[string]interface{}{"Instruction1::TransferAsset": map[string]interface{}{
			"AsTransferAssetAssets0":      ty.AsTransferAssetAssets0,
			"AsTransferAssetBeneficiary1": ty.AsTransferAssetBeneficiary1,
		}}
		return json.Marshal(m)
	}
	if ty.IsTransferReserveAsset {
		m := map[string]interface{}{"Instruction1::TransferReserveAsset": map[string]interface{}{
			"AsTransferReserveAssetAssets0": ty.AsTransferReserveAssetAssets0,
			"AsTransferReserveAssetDest1":   ty.AsTransferReserveAssetDest1,
			"AsTransferReserveAssetXcm2":    ty.AsTransferReserveAssetXcm2,
		}}
		return json.Marshal(m)
	}
	if ty.IsTransact {
		m := map[string]interface{}{"Instruction1::Transact": map[string]interface{}{
			"AsTransactCall2":                ty.AsTransactCall2,
			"AsTransactOriginType0":          ty.AsTransactOriginType0,
			"AsTransactRequireWeightAtMost1": ty.AsTransactRequireWeightAtMost1,
		}}
		return json.Marshal(m)
	}
	if ty.IsHrmpNewChannelOpenRequest {
		m := map[string]interface{}{"Instruction1::HrmpNewChannelOpenRequest": map[string]interface{}{
			"AsHrmpNewChannelOpenRequestMaxCapacity2":    ty.AsHrmpNewChannelOpenRequestMaxCapacity2,
			"AsHrmpNewChannelOpenRequestMaxMessageSize1": ty.AsHrmpNewChannelOpenRequestMaxMessageSize1,
			"AsHrmpNewChannelOpenRequestSender0":         ty.AsHrmpNewChannelOpenRequestSender0,
		}}
		return json.Marshal(m)
	}
	if ty.IsHrmpChannelAccepted {
		m := map[string]interface{}{"Instruction1::HrmpChannelAccepted": ty.AsHrmpChannelAcceptedRecipient0}
		return json.Marshal(m)
	}
	if ty.IsHrmpChannelClosing {
		m := map[string]interface{}{"Instruction1::HrmpChannelClosing": map[string]interface{}{
			"AsHrmpChannelClosingInitiator0": ty.AsHrmpChannelClosingInitiator0,
			"AsHrmpChannelClosingRecipient2": ty.AsHrmpChannelClosingRecipient2,
			"AsHrmpChannelClosingSender1":    ty.AsHrmpChannelClosingSender1,
		}}
		return json.Marshal(m)
	}
	if ty.IsClearOrigin {
		return json.Marshal("Instruction1::ClearOrigin")
	}
	if ty.IsDescendOrigin {
		m := map[string]interface{}{"Instruction1::DescendOrigin": ty.AsDescendOriginField0}
		return json.Marshal(m)
	}
	if ty.IsReportError {
		m := map[string]interface{}{"Instruction1::ReportError": map[string]interface{}{
			"AsReportErrorDest1":              ty.AsReportErrorDest1,
			"AsReportErrorMaxResponseWeight2": ty.AsReportErrorMaxResponseWeight2,
			"AsReportErrorQueryId0":           ty.AsReportErrorQueryId0,
		}}
		return json.Marshal(m)
	}
	if ty.IsDepositAsset {
		m := map[string]interface{}{"Instruction1::DepositAsset": map[string]interface{}{
			"AsDepositAssetAssets0":      ty.AsDepositAssetAssets0,
			"AsDepositAssetBeneficiary2": ty.AsDepositAssetBeneficiary2,
			"AsDepositAssetMaxAssets1":   ty.AsDepositAssetMaxAssets1,
		}}
		return json.Marshal(m)
	}
	if ty.IsDepositReserveAsset {
		m := map[string]interface{}{"Instruction1::DepositReserveAsset": map[string]interface{}{
			"AsDepositReserveAssetAssets0":    ty.AsDepositReserveAssetAssets0,
			"AsDepositReserveAssetDest2":      ty.AsDepositReserveAssetDest2,
			"AsDepositReserveAssetMaxAssets1": ty.AsDepositReserveAssetMaxAssets1,
			"AsDepositReserveAssetXcm3":       ty.AsDepositReserveAssetXcm3,
		}}
		return json.Marshal(m)
	}
	if ty.IsExchangeAsset {
		m := map[string]interface{}{"Instruction1::ExchangeAsset": map[string]interface{}{
			"AsExchangeAssetGive0":    ty.AsExchangeAssetGive0,
			"AsExchangeAssetReceive1": ty.AsExchangeAssetReceive1,
		}}
		return json.Marshal(m)
	}
	if ty.IsInitiateReserveWithdraw {
		m := map[string]interface{}{"Instruction1::InitiateReserveWithdraw": map[string]interface{}{
			"AsInitiateReserveWithdrawAssets0":  ty.AsInitiateReserveWithdrawAssets0,
			"AsInitiateReserveWithdrawReserve1": ty.AsInitiateReserveWithdrawReserve1,
			"AsInitiateReserveWithdrawXcm2":     ty.AsInitiateReserveWithdrawXcm2,
		}}
		return json.Marshal(m)
	}
	if ty.IsInitiateTeleport {
		m := map[string]interface{}{"Instruction1::InitiateTeleport": map[string]interface{}{
			"AsInitiateTeleportAssets0": ty.AsInitiateTeleportAssets0,
			"AsInitiateTeleportDest1":   ty.AsInitiateTeleportDest1,
			"AsInitiateTeleportXcm2":    ty.AsInitiateTeleportXcm2,
		}}
		return json.Marshal(m)
	}
	if ty.IsQueryHolding {
		m := map[string]interface{}{"Instruction1::QueryHolding": map[string]interface{}{
			"AsQueryHoldingAssets2":            ty.AsQueryHoldingAssets2,
			"AsQueryHoldingDest1":              ty.AsQueryHoldingDest1,
			"AsQueryHoldingMaxResponseWeight3": ty.AsQueryHoldingMaxResponseWeight3,
			"AsQueryHoldingQueryId0":           ty.AsQueryHoldingQueryId0,
		}}
		return json.Marshal(m)
	}
	if ty.IsBuyExecution {
		m := map[string]interface{}{"Instruction1::BuyExecution": map[string]interface{}{
			"AsBuyExecutionFees0":        ty.AsBuyExecutionFees0,
			"AsBuyExecutionWeightLimit1": ty.AsBuyExecutionWeightLimit1,
		}}
		return json.Marshal(m)
	}
	if ty.IsRefundSurplus {
		return json.Marshal("Instruction1::RefundSurplus")
	}
	if ty.IsSetErrorHandler {
		m := map[string]interface{}{"Instruction1::SetErrorHandler": ty.AsSetErrorHandlerField0}
		return json.Marshal(m)
	}
	if ty.IsSetAppendix {
		m := map[string]interface{}{"Instruction1::SetAppendix": ty.AsSetAppendixField0}
		return json.Marshal(m)
	}
	if ty.IsClearError {
		return json.Marshal("Instruction1::ClearError")
	}
	if ty.IsClaimAsset {
		m := map[string]interface{}{"Instruction1::ClaimAsset": map[string]interface{}{
			"AsClaimAssetAssets0": ty.AsClaimAssetAssets0,
			"AsClaimAssetTicket1": ty.AsClaimAssetTicket1,
		}}
		return json.Marshal(m)
	}
	if ty.IsTrap {
		m := map[string]interface{}{"Instruction1::Trap": ty.AsTrapField0}
		return json.Marshal(m)
	}
	if ty.IsSubscribeVersion {
		m := map[string]interface{}{"Instruction1::SubscribeVersion": map[string]interface{}{
			"AsSubscribeVersionMaxResponseWeight1": ty.AsSubscribeVersionMaxResponseWeight1,
			"AsSubscribeVersionQueryId0":           ty.AsSubscribeVersionQueryId0,
		}}
		return json.Marshal(m)
	}
	if ty.IsUnsubscribeVersion {
		return json.Marshal("Instruction1::UnsubscribeVersion")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated xcm_v3_PalletInfo with id={{false [261]}}
type PalletInfo1 struct {
	// Field 0 with TypeId=51
	Index types.UCompact
	// Field 1 with TypeId=262
	Name []byte
	// Field 2 with TypeId=262
	ModuleName []byte
	// Field 3 with TypeId=51
	Major types.UCompact
	// Field 4 with TypeId=51
	Minor types.UCompact
	// Field 5 with TypeId=51
	Patch types.UCompact
}

// Generated XcmV3Response with id=259
type Response2 struct {
	IsNull                  bool
	IsAssets                bool
	AsAssetsField0          []MultiAsset1
	IsExecutionResult       bool
	AsExecutionResultField0 *OptionTTupleOfUint32XcmV3TraitsError
	IsVersion               bool
	AsVersionField0         uint32
	IsPalletsInfo           bool
	AsPalletsInfoField0     []PalletInfo1
	IsDispatchResult        bool
	AsDispatchResultField0  *MaybeErrorCode
}

func (ty Response2) Encode(encoder scale.Encoder) (err error) {
	if ty.IsNull {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAssets {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAssetsField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExecutionResult {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExecutionResultField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsVersion {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsVersionField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsPalletsInfo {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPalletsInfoField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDispatchResult {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDispatchResultField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Response2) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsNull = true
		return
	case 1:
		ty.IsAssets = true
		err = decoder.Decode(&ty.AsAssetsField0)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsExecutionResult = true
		var tmp OptionTTupleOfUint32XcmV3TraitsError
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsExecutionResultField0 = &tmp
		return
	case 3:
		ty.IsVersion = true
		err = decoder.Decode(&ty.AsVersionField0)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsPalletsInfo = true
		err = decoder.Decode(&ty.AsPalletsInfoField0)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsDispatchResult = true
		var tmp MaybeErrorCode
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsDispatchResultField0 = &tmp
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Response2) Variant() (uint8, error) {
	if ty.IsNull {
		return 0, nil
	}
	if ty.IsAssets {
		return 1, nil
	}
	if ty.IsExecutionResult {
		return 2, nil
	}
	if ty.IsVersion {
		return 3, nil
	}
	if ty.IsPalletsInfo {
		return 4, nil
	}
	if ty.IsDispatchResult {
		return 5, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Response2) MarshalJSON() ([]byte, error) {
	if ty.IsNull {
		return json.Marshal("Response2::Null")
	}
	if ty.IsAssets {
		m := map[string]interface{}{"Response2::Assets": ty.AsAssetsField0}
		return json.Marshal(m)
	}
	if ty.IsExecutionResult {
		m := map[string]interface{}{"Response2::ExecutionResult": ty.AsExecutionResultField0}
		return json.Marshal(m)
	}
	if ty.IsVersion {
		m := map[string]interface{}{"Response2::Version": ty.AsVersionField0}
		return json.Marshal(m)
	}
	if ty.IsPalletsInfo {
		m := map[string]interface{}{"Response2::PalletsInfo": ty.AsPalletsInfoField0}
		return json.Marshal(m)
	}
	if ty.IsDispatchResult {
		m := map[string]interface{}{"Response2::DispatchResult": ty.AsDispatchResultField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated Option with id=264
type OptionTMultiLocation1 struct {
	IsNone       bool
	IsSome       bool
	AsSomeField0 MultiLocation1
}

func (ty OptionTMultiLocation1) Encode(encoder scale.Encoder) (err error) {
	if ty.IsNone {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSome {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSomeField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *OptionTMultiLocation1) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsNone = true
		return
	case 1:
		ty.IsSome = true
		err = decoder.Decode(&ty.AsSomeField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *OptionTMultiLocation1) Variant() (uint8, error) {
	if ty.IsNone {
		return 0, nil
	}
	if ty.IsSome {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty OptionTMultiLocation1) MarshalJSON() ([]byte, error) {
	if ty.IsNone {
		return json.Marshal("OptionTMultiLocation1::None")
	}
	if ty.IsSome {
		m := map[string]interface{}{"OptionTMultiLocation1::Some": ty.AsSomeField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated xcm_v3_QueryResponseInfo with id={{false [265]}}
type QueryResponseInfo1 struct {
	// Field 0 with TypeId=111
	Destination MultiLocation1
	// Field 1 with TypeId=11
	QueryId types.UCompact
	// Field 2 with TypeId=10
	MaxWeight Weight
}

// Generated XcmV3MultiassetWildFungibility with id=268
type WildFungibility2 struct {
	IsFungible    bool
	IsNonFungible bool
}

func (ty WildFungibility2) Encode(encoder scale.Encoder) (err error) {
	if ty.IsFungible {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNonFungible {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *WildFungibility2) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsFungible = true
		return
	case 1:
		ty.IsNonFungible = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *WildFungibility2) Variant() (uint8, error) {
	if ty.IsFungible {
		return 0, nil
	}
	if ty.IsNonFungible {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty WildFungibility2) MarshalJSON() ([]byte, error) {
	if ty.IsFungible {
		return json.Marshal("WildFungibility2::Fungible")
	}
	if ty.IsNonFungible {
		return json.Marshal("WildFungibility2::NonFungible")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated XcmV3MultiassetWildMultiAsset with id=267
type WildMultiAsset1 struct {
	IsAll                bool
	IsAllOf              bool
	AsAllOfId0           AssetId1
	AsAllOfFun1          WildFungibility2
	IsAllCounted         bool
	AsAllCountedField0   types.UCompact
	IsAllOfCounted       bool
	AsAllOfCountedId0    AssetId1
	AsAllOfCountedFun1   WildFungibility2
	AsAllOfCountedCount2 types.UCompact
}

func (ty WildMultiAsset1) Encode(encoder scale.Encoder) (err error) {
	if ty.IsAll {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAllOf {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAllOfId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAllOfFun1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAllCounted {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAllCountedField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAllOfCounted {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAllOfCountedId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAllOfCountedFun1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAllOfCountedCount2)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *WildMultiAsset1) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsAll = true
		return
	case 1:
		ty.IsAllOf = true
		err = decoder.Decode(&ty.AsAllOfId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsAllOfFun1)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsAllCounted = true
		err = decoder.Decode(&ty.AsAllCountedField0)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsAllOfCounted = true
		err = decoder.Decode(&ty.AsAllOfCountedId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsAllOfCountedFun1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsAllOfCountedCount2)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *WildMultiAsset1) Variant() (uint8, error) {
	if ty.IsAll {
		return 0, nil
	}
	if ty.IsAllOf {
		return 1, nil
	}
	if ty.IsAllCounted {
		return 2, nil
	}
	if ty.IsAllOfCounted {
		return 3, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty WildMultiAsset1) MarshalJSON() ([]byte, error) {
	if ty.IsAll {
		return json.Marshal("WildMultiAsset1::All")
	}
	if ty.IsAllOf {
		m := map[string]interface{}{"WildMultiAsset1::AllOf": map[string]interface{}{
			"AsAllOfFun1": ty.AsAllOfFun1,
			"AsAllOfId0":  ty.AsAllOfId0,
		}}
		return json.Marshal(m)
	}
	if ty.IsAllCounted {
		m := map[string]interface{}{"WildMultiAsset1::AllCounted": ty.AsAllCountedField0}
		return json.Marshal(m)
	}
	if ty.IsAllOfCounted {
		m := map[string]interface{}{"WildMultiAsset1::AllOfCounted": map[string]interface{}{
			"AsAllOfCountedCount2": ty.AsAllOfCountedCount2,
			"AsAllOfCountedFun1":   ty.AsAllOfCountedFun1,
			"AsAllOfCountedId0":    ty.AsAllOfCountedId0,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated XcmV3MultiassetMultiAssetFilter with id=266
type MultiAssetFilter1 struct {
	IsDefinite       bool
	AsDefiniteField0 []MultiAsset1
	IsWild           bool
	AsWildField0     *WildMultiAsset1
}

func (ty MultiAssetFilter1) Encode(encoder scale.Encoder) (err error) {
	if ty.IsDefinite {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDefiniteField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWild {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWildField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *MultiAssetFilter1) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsDefinite = true
		err = decoder.Decode(&ty.AsDefiniteField0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsWild = true
		var tmp WildMultiAsset1
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsWildField0 = &tmp
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *MultiAssetFilter1) Variant() (uint8, error) {
	if ty.IsDefinite {
		return 0, nil
	}
	if ty.IsWild {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty MultiAssetFilter1) MarshalJSON() ([]byte, error) {
	if ty.IsDefinite {
		m := map[string]interface{}{"MultiAssetFilter1::Definite": ty.AsDefiniteField0}
		return json.Marshal(m)
	}
	if ty.IsWild {
		m := map[string]interface{}{"MultiAssetFilter1::Wild": ty.AsWildField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated XcmV3Instruction with id=258
type Instruction2 struct {
	IsWithdrawAsset                            bool
	AsWithdrawAssetField0                      []MultiAsset1
	IsReserveAssetDeposited                    bool
	AsReserveAssetDepositedField0              []MultiAsset1
	IsReceiveTeleportedAsset                   bool
	AsReceiveTeleportedAssetField0             []MultiAsset1
	IsQueryResponse                            bool
	AsQueryResponseQueryId0                    types.UCompact
	AsQueryResponseResponse1                   Response2
	AsQueryResponseMaxWeight2                  Weight
	AsQueryResponseQuerier3                    OptionTMultiLocation1
	IsTransferAsset                            bool
	AsTransferAssetAssets0                     []MultiAsset1
	AsTransferAssetBeneficiary1                MultiLocation1
	IsTransferReserveAsset                     bool
	AsTransferReserveAssetAssets0              []MultiAsset1
	AsTransferReserveAssetDest1                MultiLocation1
	AsTransferReserveAssetXcm2                 []Instruction2
	IsTransact                                 bool
	AsTransactOriginKind0                      OriginKind
	AsTransactRequireWeightAtMost1             Weight
	AsTransactCall2                            []byte
	IsHrmpNewChannelOpenRequest                bool
	AsHrmpNewChannelOpenRequestSender0         types.UCompact
	AsHrmpNewChannelOpenRequestMaxMessageSize1 types.UCompact
	AsHrmpNewChannelOpenRequestMaxCapacity2    types.UCompact
	IsHrmpChannelAccepted                      bool
	AsHrmpChannelAcceptedRecipient0            types.UCompact
	IsHrmpChannelClosing                       bool
	AsHrmpChannelClosingInitiator0             types.UCompact
	AsHrmpChannelClosingSender1                types.UCompact
	AsHrmpChannelClosingRecipient2             types.UCompact
	IsClearOrigin                              bool
	IsDescendOrigin                            bool
	AsDescendOriginField0                      *Junctions2
	IsReportError                              bool
	AsReportErrorField0                        QueryResponseInfo1
	IsDepositAsset                             bool
	AsDepositAssetAssets0                      MultiAssetFilter1
	AsDepositAssetBeneficiary1                 MultiLocation1
	IsDepositReserveAsset                      bool
	AsDepositReserveAssetAssets0               MultiAssetFilter1
	AsDepositReserveAssetDest1                 MultiLocation1
	AsDepositReserveAssetXcm2                  []Instruction2
	IsExchangeAsset                            bool
	AsExchangeAssetGive0                       MultiAssetFilter1
	AsExchangeAssetWant1                       []MultiAsset1
	AsExchangeAssetMaximal2                    bool
	IsInitiateReserveWithdraw                  bool
	AsInitiateReserveWithdrawAssets0           MultiAssetFilter1
	AsInitiateReserveWithdrawReserve1          MultiLocation1
	AsInitiateReserveWithdrawXcm2              []Instruction2
	IsInitiateTeleport                         bool
	AsInitiateTeleportAssets0                  MultiAssetFilter1
	AsInitiateTeleportDest1                    MultiLocation1
	AsInitiateTeleportXcm2                     []Instruction2
	IsReportHolding                            bool
	AsReportHoldingResponseInfo0               QueryResponseInfo1
	AsReportHoldingAssets1                     MultiAssetFilter1
	IsBuyExecution                             bool
	AsBuyExecutionFees0                        MultiAsset1
	AsBuyExecutionWeightLimit1                 WeightLimit
	IsRefundSurplus                            bool
	IsSetErrorHandler                          bool
	AsSetErrorHandlerField0                    []Instruction2
	IsSetAppendix                              bool
	AsSetAppendixField0                        []Instruction2
	IsClearError                               bool
	IsClaimAsset                               bool
	AsClaimAssetAssets0                        []MultiAsset1
	AsClaimAssetTicket1                        MultiLocation1
	IsTrap                                     bool
	AsTrapField0                               types.UCompact
	IsSubscribeVersion                         bool
	AsSubscribeVersionQueryId0                 types.UCompact
	AsSubscribeVersionMaxResponseWeight1       Weight
	IsUnsubscribeVersion                       bool
	IsBurnAsset                                bool
	AsBurnAssetField0                          []MultiAsset1
	IsExpectAsset                              bool
	AsExpectAssetField0                        []MultiAsset1
	IsExpectOrigin                             bool
	AsExpectOriginField0                       *OptionTMultiLocation1
	IsExpectError                              bool
	AsExpectErrorField0                        *OptionTTupleOfUint32XcmV3TraitsError
	IsExpectTransactStatus                     bool
	AsExpectTransactStatusField0               *MaybeErrorCode
	IsQueryPallet                              bool
	AsQueryPalletModuleName0                   []byte
	AsQueryPalletResponseInfo1                 QueryResponseInfo1
	IsExpectPallet                             bool
	AsExpectPalletIndex0                       types.UCompact
	AsExpectPalletName1                        []byte
	AsExpectPalletModuleName2                  []byte
	AsExpectPalletCrateMajor3                  types.UCompact
	AsExpectPalletMinCrateMinor4               types.UCompact
	IsReportTransactStatus                     bool
	AsReportTransactStatusField0               QueryResponseInfo1
	IsClearTransactStatus                      bool
	IsUniversalOrigin                          bool
	AsUniversalOriginField0                    *Junction2
	IsExportMessage                            bool
	AsExportMessageNetwork0                    NetworkId2
	AsExportMessageDestination1                Junctions2
	AsExportMessageXcm2                        []Instruction2
	IsLockAsset                                bool
	AsLockAssetAsset0                          MultiAsset1
	AsLockAssetUnlocker1                       MultiLocation1
	IsUnlockAsset                              bool
	AsUnlockAssetAsset0                        MultiAsset1
	AsUnlockAssetTarget1                       MultiLocation1
	IsNoteUnlockable                           bool
	AsNoteUnlockableAsset0                     MultiAsset1
	AsNoteUnlockableOwner1                     MultiLocation1
	IsRequestUnlock                            bool
	AsRequestUnlockAsset0                      MultiAsset1
	AsRequestUnlockLocker1                     MultiLocation1
	IsSetFeesMode                              bool
	AsSetFeesModeJitWithdraw0                  bool
	IsSetTopic                                 bool
	AsSetTopicField0                           [32]byte
	IsClearTopic                               bool
	IsAliasOrigin                              bool
	AsAliasOriginField0                        MultiLocation1
	IsUnpaidExecution                          bool
	AsUnpaidExecutionWeightLimit0              WeightLimit
	AsUnpaidExecutionCheckOrigin1              OptionTMultiLocation1
}

func (ty Instruction2) Encode(encoder scale.Encoder) (err error) {
	if ty.IsWithdrawAsset {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWithdrawAssetField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReserveAssetDeposited {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReserveAssetDepositedField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReceiveTeleportedAsset {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReceiveTeleportedAssetField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsQueryResponse {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryResponseQueryId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryResponseResponse1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryResponseMaxWeight2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryResponseQuerier3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTransferAsset {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferAssetAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferAssetBeneficiary1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTransferReserveAsset {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferReserveAssetAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferReserveAssetDest1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferReserveAssetXcm2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTransact {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransactOriginKind0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransactRequireWeightAtMost1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransactCall2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsHrmpNewChannelOpenRequest {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpNewChannelOpenRequestSender0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpNewChannelOpenRequestMaxMessageSize1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpNewChannelOpenRequestMaxCapacity2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsHrmpChannelAccepted {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpChannelAcceptedRecipient0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsHrmpChannelClosing {
		err = encoder.PushByte(9)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpChannelClosingInitiator0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpChannelClosingSender1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpChannelClosingRecipient2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsClearOrigin {
		err = encoder.PushByte(10)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDescendOrigin {
		err = encoder.PushByte(11)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDescendOriginField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReportError {
		err = encoder.PushByte(12)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReportErrorField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDepositAsset {
		err = encoder.PushByte(13)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositAssetAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositAssetBeneficiary1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDepositReserveAsset {
		err = encoder.PushByte(14)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositReserveAssetAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositReserveAssetDest1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositReserveAssetXcm2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExchangeAsset {
		err = encoder.PushByte(15)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExchangeAssetGive0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExchangeAssetWant1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExchangeAssetMaximal2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsInitiateReserveWithdraw {
		err = encoder.PushByte(16)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateReserveWithdrawAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateReserveWithdrawReserve1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateReserveWithdrawXcm2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsInitiateTeleport {
		err = encoder.PushByte(17)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateTeleportAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateTeleportDest1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateTeleportXcm2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReportHolding {
		err = encoder.PushByte(18)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReportHoldingResponseInfo0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReportHoldingAssets1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBuyExecution {
		err = encoder.PushByte(19)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBuyExecutionFees0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBuyExecutionWeightLimit1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsRefundSurplus {
		err = encoder.PushByte(20)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetErrorHandler {
		err = encoder.PushByte(21)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetErrorHandlerField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetAppendix {
		err = encoder.PushByte(22)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetAppendixField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsClearError {
		err = encoder.PushByte(23)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsClaimAsset {
		err = encoder.PushByte(24)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClaimAssetAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClaimAssetTicket1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTrap {
		err = encoder.PushByte(25)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTrapField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSubscribeVersion {
		err = encoder.PushByte(26)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSubscribeVersionQueryId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSubscribeVersionMaxResponseWeight1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnsubscribeVersion {
		err = encoder.PushByte(27)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBurnAsset {
		err = encoder.PushByte(28)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBurnAssetField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExpectAsset {
		err = encoder.PushByte(29)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectAssetField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExpectOrigin {
		err = encoder.PushByte(30)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectOriginField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExpectError {
		err = encoder.PushByte(31)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectErrorField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExpectTransactStatus {
		err = encoder.PushByte(32)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectTransactStatusField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsQueryPallet {
		err = encoder.PushByte(33)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryPalletModuleName0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryPalletResponseInfo1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExpectPallet {
		err = encoder.PushByte(34)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectPalletIndex0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectPalletName1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectPalletModuleName2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectPalletCrateMajor3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectPalletMinCrateMinor4)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReportTransactStatus {
		err = encoder.PushByte(35)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReportTransactStatusField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsClearTransactStatus {
		err = encoder.PushByte(36)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUniversalOrigin {
		err = encoder.PushByte(37)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUniversalOriginField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExportMessage {
		err = encoder.PushByte(38)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExportMessageNetwork0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExportMessageDestination1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExportMessageXcm2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsLockAsset {
		err = encoder.PushByte(39)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLockAssetAsset0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLockAssetUnlocker1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnlockAsset {
		err = encoder.PushByte(40)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnlockAssetAsset0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnlockAssetTarget1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNoteUnlockable {
		err = encoder.PushByte(41)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNoteUnlockableAsset0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNoteUnlockableOwner1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsRequestUnlock {
		err = encoder.PushByte(42)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsRequestUnlockAsset0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsRequestUnlockLocker1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetFeesMode {
		err = encoder.PushByte(43)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetFeesModeJitWithdraw0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetTopic {
		err = encoder.PushByte(44)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetTopicField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsClearTopic {
		err = encoder.PushByte(45)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAliasOrigin {
		err = encoder.PushByte(46)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAliasOriginField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnpaidExecution {
		err = encoder.PushByte(47)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnpaidExecutionWeightLimit0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnpaidExecutionCheckOrigin1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Instruction2) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsWithdrawAsset = true
		err = decoder.Decode(&ty.AsWithdrawAssetField0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsReserveAssetDeposited = true
		err = decoder.Decode(&ty.AsReserveAssetDepositedField0)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsReceiveTeleportedAsset = true
		err = decoder.Decode(&ty.AsReceiveTeleportedAssetField0)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsQueryResponse = true
		err = decoder.Decode(&ty.AsQueryResponseQueryId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsQueryResponseResponse1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsQueryResponseMaxWeight2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsQueryResponseQuerier3)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsTransferAsset = true
		err = decoder.Decode(&ty.AsTransferAssetAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferAssetBeneficiary1)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsTransferReserveAsset = true
		err = decoder.Decode(&ty.AsTransferReserveAssetAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferReserveAssetDest1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferReserveAssetXcm2)
		if err != nil {
			return err
		}
		return
	case 6:
		ty.IsTransact = true
		err = decoder.Decode(&ty.AsTransactOriginKind0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransactRequireWeightAtMost1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransactCall2)
		if err != nil {
			return err
		}
		return
	case 7:
		ty.IsHrmpNewChannelOpenRequest = true
		err = decoder.Decode(&ty.AsHrmpNewChannelOpenRequestSender0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsHrmpNewChannelOpenRequestMaxMessageSize1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsHrmpNewChannelOpenRequestMaxCapacity2)
		if err != nil {
			return err
		}
		return
	case 8:
		ty.IsHrmpChannelAccepted = true
		err = decoder.Decode(&ty.AsHrmpChannelAcceptedRecipient0)
		if err != nil {
			return err
		}
		return
	case 9:
		ty.IsHrmpChannelClosing = true
		err = decoder.Decode(&ty.AsHrmpChannelClosingInitiator0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsHrmpChannelClosingSender1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsHrmpChannelClosingRecipient2)
		if err != nil {
			return err
		}
		return
	case 10:
		ty.IsClearOrigin = true
		return
	case 11:
		ty.IsDescendOrigin = true
		var tmp Junctions2
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsDescendOriginField0 = &tmp
		return
	case 12:
		ty.IsReportError = true
		err = decoder.Decode(&ty.AsReportErrorField0)
		if err != nil {
			return err
		}
		return
	case 13:
		ty.IsDepositAsset = true
		err = decoder.Decode(&ty.AsDepositAssetAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDepositAssetBeneficiary1)
		if err != nil {
			return err
		}
		return
	case 14:
		ty.IsDepositReserveAsset = true
		err = decoder.Decode(&ty.AsDepositReserveAssetAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDepositReserveAssetDest1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDepositReserveAssetXcm2)
		if err != nil {
			return err
		}
		return
	case 15:
		ty.IsExchangeAsset = true
		err = decoder.Decode(&ty.AsExchangeAssetGive0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExchangeAssetWant1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExchangeAssetMaximal2)
		if err != nil {
			return err
		}
		return
	case 16:
		ty.IsInitiateReserveWithdraw = true
		err = decoder.Decode(&ty.AsInitiateReserveWithdrawAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInitiateReserveWithdrawReserve1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInitiateReserveWithdrawXcm2)
		if err != nil {
			return err
		}
		return
	case 17:
		ty.IsInitiateTeleport = true
		err = decoder.Decode(&ty.AsInitiateTeleportAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInitiateTeleportDest1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInitiateTeleportXcm2)
		if err != nil {
			return err
		}
		return
	case 18:
		ty.IsReportHolding = true
		err = decoder.Decode(&ty.AsReportHoldingResponseInfo0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsReportHoldingAssets1)
		if err != nil {
			return err
		}
		return
	case 19:
		ty.IsBuyExecution = true
		err = decoder.Decode(&ty.AsBuyExecutionFees0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsBuyExecutionWeightLimit1)
		if err != nil {
			return err
		}
		return
	case 20:
		ty.IsRefundSurplus = true
		return
	case 21:
		ty.IsSetErrorHandler = true
		err = decoder.Decode(&ty.AsSetErrorHandlerField0)
		if err != nil {
			return err
		}
		return
	case 22:
		ty.IsSetAppendix = true
		err = decoder.Decode(&ty.AsSetAppendixField0)
		if err != nil {
			return err
		}
		return
	case 23:
		ty.IsClearError = true
		return
	case 24:
		ty.IsClaimAsset = true
		err = decoder.Decode(&ty.AsClaimAssetAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsClaimAssetTicket1)
		if err != nil {
			return err
		}
		return
	case 25:
		ty.IsTrap = true
		err = decoder.Decode(&ty.AsTrapField0)
		if err != nil {
			return err
		}
		return
	case 26:
		ty.IsSubscribeVersion = true
		err = decoder.Decode(&ty.AsSubscribeVersionQueryId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSubscribeVersionMaxResponseWeight1)
		if err != nil {
			return err
		}
		return
	case 27:
		ty.IsUnsubscribeVersion = true
		return
	case 28:
		ty.IsBurnAsset = true
		err = decoder.Decode(&ty.AsBurnAssetField0)
		if err != nil {
			return err
		}
		return
	case 29:
		ty.IsExpectAsset = true
		err = decoder.Decode(&ty.AsExpectAssetField0)
		if err != nil {
			return err
		}
		return
	case 30:
		ty.IsExpectOrigin = true
		var tmp OptionTMultiLocation1
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsExpectOriginField0 = &tmp
		return
	case 31:
		ty.IsExpectError = true
		var tmp OptionTTupleOfUint32XcmV3TraitsError
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsExpectErrorField0 = &tmp
		return
	case 32:
		ty.IsExpectTransactStatus = true
		var tmp MaybeErrorCode
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsExpectTransactStatusField0 = &tmp
		return
	case 33:
		ty.IsQueryPallet = true
		err = decoder.Decode(&ty.AsQueryPalletModuleName0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsQueryPalletResponseInfo1)
		if err != nil {
			return err
		}
		return
	case 34:
		ty.IsExpectPallet = true
		err = decoder.Decode(&ty.AsExpectPalletIndex0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExpectPalletName1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExpectPalletModuleName2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExpectPalletCrateMajor3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExpectPalletMinCrateMinor4)
		if err != nil {
			return err
		}
		return
	case 35:
		ty.IsReportTransactStatus = true
		err = decoder.Decode(&ty.AsReportTransactStatusField0)
		if err != nil {
			return err
		}
		return
	case 36:
		ty.IsClearTransactStatus = true
		return
	case 37:
		ty.IsUniversalOrigin = true
		var tmp Junction2
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsUniversalOriginField0 = &tmp
		return
	case 38:
		ty.IsExportMessage = true
		err = decoder.Decode(&ty.AsExportMessageNetwork0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExportMessageDestination1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExportMessageXcm2)
		if err != nil {
			return err
		}
		return
	case 39:
		ty.IsLockAsset = true
		err = decoder.Decode(&ty.AsLockAssetAsset0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsLockAssetUnlocker1)
		if err != nil {
			return err
		}
		return
	case 40:
		ty.IsUnlockAsset = true
		err = decoder.Decode(&ty.AsUnlockAssetAsset0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUnlockAssetTarget1)
		if err != nil {
			return err
		}
		return
	case 41:
		ty.IsNoteUnlockable = true
		err = decoder.Decode(&ty.AsNoteUnlockableAsset0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsNoteUnlockableOwner1)
		if err != nil {
			return err
		}
		return
	case 42:
		ty.IsRequestUnlock = true
		err = decoder.Decode(&ty.AsRequestUnlockAsset0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsRequestUnlockLocker1)
		if err != nil {
			return err
		}
		return
	case 43:
		ty.IsSetFeesMode = true
		err = decoder.Decode(&ty.AsSetFeesModeJitWithdraw0)
		if err != nil {
			return err
		}
		return
	case 44:
		ty.IsSetTopic = true
		err = decoder.Decode(&ty.AsSetTopicField0)
		if err != nil {
			return err
		}
		return
	case 45:
		ty.IsClearTopic = true
		return
	case 46:
		ty.IsAliasOrigin = true
		err = decoder.Decode(&ty.AsAliasOriginField0)
		if err != nil {
			return err
		}
		return
	case 47:
		ty.IsUnpaidExecution = true
		err = decoder.Decode(&ty.AsUnpaidExecutionWeightLimit0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUnpaidExecutionCheckOrigin1)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Instruction2) Variant() (uint8, error) {
	if ty.IsWithdrawAsset {
		return 0, nil
	}
	if ty.IsReserveAssetDeposited {
		return 1, nil
	}
	if ty.IsReceiveTeleportedAsset {
		return 2, nil
	}
	if ty.IsQueryResponse {
		return 3, nil
	}
	if ty.IsTransferAsset {
		return 4, nil
	}
	if ty.IsTransferReserveAsset {
		return 5, nil
	}
	if ty.IsTransact {
		return 6, nil
	}
	if ty.IsHrmpNewChannelOpenRequest {
		return 7, nil
	}
	if ty.IsHrmpChannelAccepted {
		return 8, nil
	}
	if ty.IsHrmpChannelClosing {
		return 9, nil
	}
	if ty.IsClearOrigin {
		return 10, nil
	}
	if ty.IsDescendOrigin {
		return 11, nil
	}
	if ty.IsReportError {
		return 12, nil
	}
	if ty.IsDepositAsset {
		return 13, nil
	}
	if ty.IsDepositReserveAsset {
		return 14, nil
	}
	if ty.IsExchangeAsset {
		return 15, nil
	}
	if ty.IsInitiateReserveWithdraw {
		return 16, nil
	}
	if ty.IsInitiateTeleport {
		return 17, nil
	}
	if ty.IsReportHolding {
		return 18, nil
	}
	if ty.IsBuyExecution {
		return 19, nil
	}
	if ty.IsRefundSurplus {
		return 20, nil
	}
	if ty.IsSetErrorHandler {
		return 21, nil
	}
	if ty.IsSetAppendix {
		return 22, nil
	}
	if ty.IsClearError {
		return 23, nil
	}
	if ty.IsClaimAsset {
		return 24, nil
	}
	if ty.IsTrap {
		return 25, nil
	}
	if ty.IsSubscribeVersion {
		return 26, nil
	}
	if ty.IsUnsubscribeVersion {
		return 27, nil
	}
	if ty.IsBurnAsset {
		return 28, nil
	}
	if ty.IsExpectAsset {
		return 29, nil
	}
	if ty.IsExpectOrigin {
		return 30, nil
	}
	if ty.IsExpectError {
		return 31, nil
	}
	if ty.IsExpectTransactStatus {
		return 32, nil
	}
	if ty.IsQueryPallet {
		return 33, nil
	}
	if ty.IsExpectPallet {
		return 34, nil
	}
	if ty.IsReportTransactStatus {
		return 35, nil
	}
	if ty.IsClearTransactStatus {
		return 36, nil
	}
	if ty.IsUniversalOrigin {
		return 37, nil
	}
	if ty.IsExportMessage {
		return 38, nil
	}
	if ty.IsLockAsset {
		return 39, nil
	}
	if ty.IsUnlockAsset {
		return 40, nil
	}
	if ty.IsNoteUnlockable {
		return 41, nil
	}
	if ty.IsRequestUnlock {
		return 42, nil
	}
	if ty.IsSetFeesMode {
		return 43, nil
	}
	if ty.IsSetTopic {
		return 44, nil
	}
	if ty.IsClearTopic {
		return 45, nil
	}
	if ty.IsAliasOrigin {
		return 46, nil
	}
	if ty.IsUnpaidExecution {
		return 47, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Instruction2) MarshalJSON() ([]byte, error) {
	if ty.IsWithdrawAsset {
		m := map[string]interface{}{"Instruction2::WithdrawAsset": ty.AsWithdrawAssetField0}
		return json.Marshal(m)
	}
	if ty.IsReserveAssetDeposited {
		m := map[string]interface{}{"Instruction2::ReserveAssetDeposited": ty.AsReserveAssetDepositedField0}
		return json.Marshal(m)
	}
	if ty.IsReceiveTeleportedAsset {
		m := map[string]interface{}{"Instruction2::ReceiveTeleportedAsset": ty.AsReceiveTeleportedAssetField0}
		return json.Marshal(m)
	}
	if ty.IsQueryResponse {
		m := map[string]interface{}{"Instruction2::QueryResponse": map[string]interface{}{
			"AsQueryResponseMaxWeight2": ty.AsQueryResponseMaxWeight2,
			"AsQueryResponseQuerier3":   ty.AsQueryResponseQuerier3,
			"AsQueryResponseQueryId0":   ty.AsQueryResponseQueryId0,
			"AsQueryResponseResponse1":  ty.AsQueryResponseResponse1,
		}}
		return json.Marshal(m)
	}
	if ty.IsTransferAsset {
		m := map[string]interface{}{"Instruction2::TransferAsset": map[string]interface{}{
			"AsTransferAssetAssets0":      ty.AsTransferAssetAssets0,
			"AsTransferAssetBeneficiary1": ty.AsTransferAssetBeneficiary1,
		}}
		return json.Marshal(m)
	}
	if ty.IsTransferReserveAsset {
		m := map[string]interface{}{"Instruction2::TransferReserveAsset": map[string]interface{}{
			"AsTransferReserveAssetAssets0": ty.AsTransferReserveAssetAssets0,
			"AsTransferReserveAssetDest1":   ty.AsTransferReserveAssetDest1,
			"AsTransferReserveAssetXcm2":    ty.AsTransferReserveAssetXcm2,
		}}
		return json.Marshal(m)
	}
	if ty.IsTransact {
		m := map[string]interface{}{"Instruction2::Transact": map[string]interface{}{
			"AsTransactCall2":                ty.AsTransactCall2,
			"AsTransactOriginKind0":          ty.AsTransactOriginKind0,
			"AsTransactRequireWeightAtMost1": ty.AsTransactRequireWeightAtMost1,
		}}
		return json.Marshal(m)
	}
	if ty.IsHrmpNewChannelOpenRequest {
		m := map[string]interface{}{"Instruction2::HrmpNewChannelOpenRequest": map[string]interface{}{
			"AsHrmpNewChannelOpenRequestMaxCapacity2":    ty.AsHrmpNewChannelOpenRequestMaxCapacity2,
			"AsHrmpNewChannelOpenRequestMaxMessageSize1": ty.AsHrmpNewChannelOpenRequestMaxMessageSize1,
			"AsHrmpNewChannelOpenRequestSender0":         ty.AsHrmpNewChannelOpenRequestSender0,
		}}
		return json.Marshal(m)
	}
	if ty.IsHrmpChannelAccepted {
		m := map[string]interface{}{"Instruction2::HrmpChannelAccepted": ty.AsHrmpChannelAcceptedRecipient0}
		return json.Marshal(m)
	}
	if ty.IsHrmpChannelClosing {
		m := map[string]interface{}{"Instruction2::HrmpChannelClosing": map[string]interface{}{
			"AsHrmpChannelClosingInitiator0": ty.AsHrmpChannelClosingInitiator0,
			"AsHrmpChannelClosingRecipient2": ty.AsHrmpChannelClosingRecipient2,
			"AsHrmpChannelClosingSender1":    ty.AsHrmpChannelClosingSender1,
		}}
		return json.Marshal(m)
	}
	if ty.IsClearOrigin {
		return json.Marshal("Instruction2::ClearOrigin")
	}
	if ty.IsDescendOrigin {
		m := map[string]interface{}{"Instruction2::DescendOrigin": ty.AsDescendOriginField0}
		return json.Marshal(m)
	}
	if ty.IsReportError {
		m := map[string]interface{}{"Instruction2::ReportError": ty.AsReportErrorField0}
		return json.Marshal(m)
	}
	if ty.IsDepositAsset {
		m := map[string]interface{}{"Instruction2::DepositAsset": map[string]interface{}{
			"AsDepositAssetAssets0":      ty.AsDepositAssetAssets0,
			"AsDepositAssetBeneficiary1": ty.AsDepositAssetBeneficiary1,
		}}
		return json.Marshal(m)
	}
	if ty.IsDepositReserveAsset {
		m := map[string]interface{}{"Instruction2::DepositReserveAsset": map[string]interface{}{
			"AsDepositReserveAssetAssets0": ty.AsDepositReserveAssetAssets0,
			"AsDepositReserveAssetDest1":   ty.AsDepositReserveAssetDest1,
			"AsDepositReserveAssetXcm2":    ty.AsDepositReserveAssetXcm2,
		}}
		return json.Marshal(m)
	}
	if ty.IsExchangeAsset {
		m := map[string]interface{}{"Instruction2::ExchangeAsset": map[string]interface{}{
			"AsExchangeAssetGive0":    ty.AsExchangeAssetGive0,
			"AsExchangeAssetMaximal2": ty.AsExchangeAssetMaximal2,
			"AsExchangeAssetWant1":    ty.AsExchangeAssetWant1,
		}}
		return json.Marshal(m)
	}
	if ty.IsInitiateReserveWithdraw {
		m := map[string]interface{}{"Instruction2::InitiateReserveWithdraw": map[string]interface{}{
			"AsInitiateReserveWithdrawAssets0":  ty.AsInitiateReserveWithdrawAssets0,
			"AsInitiateReserveWithdrawReserve1": ty.AsInitiateReserveWithdrawReserve1,
			"AsInitiateReserveWithdrawXcm2":     ty.AsInitiateReserveWithdrawXcm2,
		}}
		return json.Marshal(m)
	}
	if ty.IsInitiateTeleport {
		m := map[string]interface{}{"Instruction2::InitiateTeleport": map[string]interface{}{
			"AsInitiateTeleportAssets0": ty.AsInitiateTeleportAssets0,
			"AsInitiateTeleportDest1":   ty.AsInitiateTeleportDest1,
			"AsInitiateTeleportXcm2":    ty.AsInitiateTeleportXcm2,
		}}
		return json.Marshal(m)
	}
	if ty.IsReportHolding {
		m := map[string]interface{}{"Instruction2::ReportHolding": map[string]interface{}{
			"AsReportHoldingAssets1":       ty.AsReportHoldingAssets1,
			"AsReportHoldingResponseInfo0": ty.AsReportHoldingResponseInfo0,
		}}
		return json.Marshal(m)
	}
	if ty.IsBuyExecution {
		m := map[string]interface{}{"Instruction2::BuyExecution": map[string]interface{}{
			"AsBuyExecutionFees0":        ty.AsBuyExecutionFees0,
			"AsBuyExecutionWeightLimit1": ty.AsBuyExecutionWeightLimit1,
		}}
		return json.Marshal(m)
	}
	if ty.IsRefundSurplus {
		return json.Marshal("Instruction2::RefundSurplus")
	}
	if ty.IsSetErrorHandler {
		m := map[string]interface{}{"Instruction2::SetErrorHandler": ty.AsSetErrorHandlerField0}
		return json.Marshal(m)
	}
	if ty.IsSetAppendix {
		m := map[string]interface{}{"Instruction2::SetAppendix": ty.AsSetAppendixField0}
		return json.Marshal(m)
	}
	if ty.IsClearError {
		return json.Marshal("Instruction2::ClearError")
	}
	if ty.IsClaimAsset {
		m := map[string]interface{}{"Instruction2::ClaimAsset": map[string]interface{}{
			"AsClaimAssetAssets0": ty.AsClaimAssetAssets0,
			"AsClaimAssetTicket1": ty.AsClaimAssetTicket1,
		}}
		return json.Marshal(m)
	}
	if ty.IsTrap {
		m := map[string]interface{}{"Instruction2::Trap": ty.AsTrapField0}
		return json.Marshal(m)
	}
	if ty.IsSubscribeVersion {
		m := map[string]interface{}{"Instruction2::SubscribeVersion": map[string]interface{}{
			"AsSubscribeVersionMaxResponseWeight1": ty.AsSubscribeVersionMaxResponseWeight1,
			"AsSubscribeVersionQueryId0":           ty.AsSubscribeVersionQueryId0,
		}}
		return json.Marshal(m)
	}
	if ty.IsUnsubscribeVersion {
		return json.Marshal("Instruction2::UnsubscribeVersion")
	}
	if ty.IsBurnAsset {
		m := map[string]interface{}{"Instruction2::BurnAsset": ty.AsBurnAssetField0}
		return json.Marshal(m)
	}
	if ty.IsExpectAsset {
		m := map[string]interface{}{"Instruction2::ExpectAsset": ty.AsExpectAssetField0}
		return json.Marshal(m)
	}
	if ty.IsExpectOrigin {
		m := map[string]interface{}{"Instruction2::ExpectOrigin": ty.AsExpectOriginField0}
		return json.Marshal(m)
	}
	if ty.IsExpectError {
		m := map[string]interface{}{"Instruction2::ExpectError": ty.AsExpectErrorField0}
		return json.Marshal(m)
	}
	if ty.IsExpectTransactStatus {
		m := map[string]interface{}{"Instruction2::ExpectTransactStatus": ty.AsExpectTransactStatusField0}
		return json.Marshal(m)
	}
	if ty.IsQueryPallet {
		m := map[string]interface{}{"Instruction2::QueryPallet": map[string]interface{}{
			"AsQueryPalletModuleName0":   ty.AsQueryPalletModuleName0,
			"AsQueryPalletResponseInfo1": ty.AsQueryPalletResponseInfo1,
		}}
		return json.Marshal(m)
	}
	if ty.IsExpectPallet {
		m := map[string]interface{}{"Instruction2::ExpectPallet": map[string]interface{}{
			"AsExpectPalletCrateMajor3":    ty.AsExpectPalletCrateMajor3,
			"AsExpectPalletIndex0":         ty.AsExpectPalletIndex0,
			"AsExpectPalletMinCrateMinor4": ty.AsExpectPalletMinCrateMinor4,
			"AsExpectPalletModuleName2":    ty.AsExpectPalletModuleName2,
			"AsExpectPalletName1":          ty.AsExpectPalletName1,
		}}
		return json.Marshal(m)
	}
	if ty.IsReportTransactStatus {
		m := map[string]interface{}{"Instruction2::ReportTransactStatus": ty.AsReportTransactStatusField0}
		return json.Marshal(m)
	}
	if ty.IsClearTransactStatus {
		return json.Marshal("Instruction2::ClearTransactStatus")
	}
	if ty.IsUniversalOrigin {
		m := map[string]interface{}{"Instruction2::UniversalOrigin": ty.AsUniversalOriginField0}
		return json.Marshal(m)
	}
	if ty.IsExportMessage {
		m := map[string]interface{}{"Instruction2::ExportMessage": map[string]interface{}{
			"AsExportMessageDestination1": ty.AsExportMessageDestination1,
			"AsExportMessageNetwork0":     ty.AsExportMessageNetwork0,
			"AsExportMessageXcm2":         ty.AsExportMessageXcm2,
		}}
		return json.Marshal(m)
	}
	if ty.IsLockAsset {
		m := map[string]interface{}{"Instruction2::LockAsset": map[string]interface{}{
			"AsLockAssetAsset0":    ty.AsLockAssetAsset0,
			"AsLockAssetUnlocker1": ty.AsLockAssetUnlocker1,
		}}
		return json.Marshal(m)
	}
	if ty.IsUnlockAsset {
		m := map[string]interface{}{"Instruction2::UnlockAsset": map[string]interface{}{
			"AsUnlockAssetAsset0":  ty.AsUnlockAssetAsset0,
			"AsUnlockAssetTarget1": ty.AsUnlockAssetTarget1,
		}}
		return json.Marshal(m)
	}
	if ty.IsNoteUnlockable {
		m := map[string]interface{}{"Instruction2::NoteUnlockable": map[string]interface{}{
			"AsNoteUnlockableAsset0": ty.AsNoteUnlockableAsset0,
			"AsNoteUnlockableOwner1": ty.AsNoteUnlockableOwner1,
		}}
		return json.Marshal(m)
	}
	if ty.IsRequestUnlock {
		m := map[string]interface{}{"Instruction2::RequestUnlock": map[string]interface{}{
			"AsRequestUnlockAsset0":  ty.AsRequestUnlockAsset0,
			"AsRequestUnlockLocker1": ty.AsRequestUnlockLocker1,
		}}
		return json.Marshal(m)
	}
	if ty.IsSetFeesMode {
		m := map[string]interface{}{"Instruction2::SetFeesMode": ty.AsSetFeesModeJitWithdraw0}
		return json.Marshal(m)
	}
	if ty.IsSetTopic {
		m := map[string]interface{}{"Instruction2::SetTopic": ty.AsSetTopicField0}
		return json.Marshal(m)
	}
	if ty.IsClearTopic {
		return json.Marshal("Instruction2::ClearTopic")
	}
	if ty.IsAliasOrigin {
		m := map[string]interface{}{"Instruction2::AliasOrigin": ty.AsAliasOriginField0}
		return json.Marshal(m)
	}
	if ty.IsUnpaidExecution {
		m := map[string]interface{}{"Instruction2::UnpaidExecution": map[string]interface{}{
			"AsUnpaidExecutionCheckOrigin1": ty.AsUnpaidExecutionCheckOrigin1,
			"AsUnpaidExecutionWeightLimit0": ty.AsUnpaidExecutionWeightLimit0,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated XcmVersionedXcm with id=244
type VersionedXcm struct {
	IsV2       bool
	AsV2Field0 []Instruction1
	IsV3       bool
	AsV3Field0 []Instruction2
	IsV4       bool
	AsV4Field0 []Instruction
}

func (ty VersionedXcm) Encode(encoder scale.Encoder) (err error) {
	if ty.IsV2 {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsV2Field0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsV3 {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsV3Field0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsV4 {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsV4Field0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *VersionedXcm) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 2:
		ty.IsV2 = true
		err = decoder.Decode(&ty.AsV2Field0)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsV3 = true
		err = decoder.Decode(&ty.AsV3Field0)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsV4 = true
		err = decoder.Decode(&ty.AsV4Field0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *VersionedXcm) Variant() (uint8, error) {
	if ty.IsV2 {
		return 2, nil
	}
	if ty.IsV3 {
		return 3, nil
	}
	if ty.IsV4 {
		return 4, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty VersionedXcm) MarshalJSON() ([]byte, error) {
	if ty.IsV2 {
		m := map[string]interface{}{"VersionedXcm::V2": ty.AsV2Field0}
		return json.Marshal(m)
	}
	if ty.IsV3 {
		m := map[string]interface{}{"VersionedXcm::V3": ty.AsV3Field0}
		return json.Marshal(m)
	}
	if ty.IsV4 {
		m := map[string]interface{}{"VersionedXcm::V4": ty.AsV4Field0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated XcmV2Instruction with id=272
type Instruction3 struct {
	IsWithdrawAsset                            bool
	AsWithdrawAssetField0                      []MultiAsset
	IsReserveAssetDeposited                    bool
	AsReserveAssetDepositedField0              []MultiAsset
	IsReceiveTeleportedAsset                   bool
	AsReceiveTeleportedAssetField0             []MultiAsset
	IsQueryResponse                            bool
	AsQueryResponseQueryId0                    types.UCompact
	AsQueryResponseResponse1                   Response1
	AsQueryResponseMaxWeight2                  types.UCompact
	IsTransferAsset                            bool
	AsTransferAssetAssets0                     []MultiAsset
	AsTransferAssetBeneficiary1                MultiLocation
	IsTransferReserveAsset                     bool
	AsTransferReserveAssetAssets0              []MultiAsset
	AsTransferReserveAssetDest1                MultiLocation
	AsTransferReserveAssetXcm2                 []Instruction1
	IsTransact                                 bool
	AsTransactOriginType0                      OriginKind
	AsTransactRequireWeightAtMost1             types.UCompact
	AsTransactCall2                            []byte
	IsHrmpNewChannelOpenRequest                bool
	AsHrmpNewChannelOpenRequestSender0         types.UCompact
	AsHrmpNewChannelOpenRequestMaxMessageSize1 types.UCompact
	AsHrmpNewChannelOpenRequestMaxCapacity2    types.UCompact
	IsHrmpChannelAccepted                      bool
	AsHrmpChannelAcceptedRecipient0            types.UCompact
	IsHrmpChannelClosing                       bool
	AsHrmpChannelClosingInitiator0             types.UCompact
	AsHrmpChannelClosingSender1                types.UCompact
	AsHrmpChannelClosingRecipient2             types.UCompact
	IsClearOrigin                              bool
	IsDescendOrigin                            bool
	AsDescendOriginField0                      *Junctions1
	IsReportError                              bool
	AsReportErrorQueryId0                      types.UCompact
	AsReportErrorDest1                         MultiLocation
	AsReportErrorMaxResponseWeight2            types.UCompact
	IsDepositAsset                             bool
	AsDepositAssetAssets0                      MultiAssetFilter
	AsDepositAssetMaxAssets1                   types.UCompact
	AsDepositAssetBeneficiary2                 MultiLocation
	IsDepositReserveAsset                      bool
	AsDepositReserveAssetAssets0               MultiAssetFilter
	AsDepositReserveAssetMaxAssets1            types.UCompact
	AsDepositReserveAssetDest2                 MultiLocation
	AsDepositReserveAssetXcm3                  []Instruction1
	IsExchangeAsset                            bool
	AsExchangeAssetGive0                       MultiAssetFilter
	AsExchangeAssetReceive1                    []MultiAsset
	IsInitiateReserveWithdraw                  bool
	AsInitiateReserveWithdrawAssets0           MultiAssetFilter
	AsInitiateReserveWithdrawReserve1          MultiLocation
	AsInitiateReserveWithdrawXcm2              []Instruction1
	IsInitiateTeleport                         bool
	AsInitiateTeleportAssets0                  MultiAssetFilter
	AsInitiateTeleportDest1                    MultiLocation
	AsInitiateTeleportXcm2                     []Instruction1
	IsQueryHolding                             bool
	AsQueryHoldingQueryId0                     types.UCompact
	AsQueryHoldingDest1                        MultiLocation
	AsQueryHoldingAssets2                      MultiAssetFilter
	AsQueryHoldingMaxResponseWeight3           types.UCompact
	IsBuyExecution                             bool
	AsBuyExecutionFees0                        MultiAsset
	AsBuyExecutionWeightLimit1                 WeightLimit1
	IsRefundSurplus                            bool
	IsSetErrorHandler                          bool
	AsSetErrorHandlerField0                    []Instruction3
	IsSetAppendix                              bool
	AsSetAppendixField0                        []Instruction3
	IsClearError                               bool
	IsClaimAsset                               bool
	AsClaimAssetAssets0                        []MultiAsset
	AsClaimAssetTicket1                        MultiLocation
	IsTrap                                     bool
	AsTrapField0                               types.UCompact
	IsSubscribeVersion                         bool
	AsSubscribeVersionQueryId0                 types.UCompact
	AsSubscribeVersionMaxResponseWeight1       types.UCompact
	IsUnsubscribeVersion                       bool
}

func (ty Instruction3) Encode(encoder scale.Encoder) (err error) {
	if ty.IsWithdrawAsset {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWithdrawAssetField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReserveAssetDeposited {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReserveAssetDepositedField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReceiveTeleportedAsset {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReceiveTeleportedAssetField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsQueryResponse {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryResponseQueryId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryResponseResponse1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryResponseMaxWeight2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTransferAsset {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferAssetAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferAssetBeneficiary1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTransferReserveAsset {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferReserveAssetAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferReserveAssetDest1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferReserveAssetXcm2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTransact {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransactOriginType0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransactRequireWeightAtMost1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransactCall2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsHrmpNewChannelOpenRequest {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpNewChannelOpenRequestSender0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpNewChannelOpenRequestMaxMessageSize1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpNewChannelOpenRequestMaxCapacity2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsHrmpChannelAccepted {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpChannelAcceptedRecipient0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsHrmpChannelClosing {
		err = encoder.PushByte(9)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpChannelClosingInitiator0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpChannelClosingSender1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpChannelClosingRecipient2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsClearOrigin {
		err = encoder.PushByte(10)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDescendOrigin {
		err = encoder.PushByte(11)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDescendOriginField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReportError {
		err = encoder.PushByte(12)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReportErrorQueryId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReportErrorDest1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReportErrorMaxResponseWeight2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDepositAsset {
		err = encoder.PushByte(13)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositAssetAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositAssetMaxAssets1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositAssetBeneficiary2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDepositReserveAsset {
		err = encoder.PushByte(14)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositReserveAssetAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositReserveAssetMaxAssets1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositReserveAssetDest2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositReserveAssetXcm3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExchangeAsset {
		err = encoder.PushByte(15)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExchangeAssetGive0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExchangeAssetReceive1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsInitiateReserveWithdraw {
		err = encoder.PushByte(16)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateReserveWithdrawAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateReserveWithdrawReserve1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateReserveWithdrawXcm2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsInitiateTeleport {
		err = encoder.PushByte(17)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateTeleportAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateTeleportDest1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateTeleportXcm2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsQueryHolding {
		err = encoder.PushByte(18)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryHoldingQueryId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryHoldingDest1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryHoldingAssets2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryHoldingMaxResponseWeight3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBuyExecution {
		err = encoder.PushByte(19)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBuyExecutionFees0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBuyExecutionWeightLimit1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsRefundSurplus {
		err = encoder.PushByte(20)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetErrorHandler {
		err = encoder.PushByte(21)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetErrorHandlerField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetAppendix {
		err = encoder.PushByte(22)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetAppendixField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsClearError {
		err = encoder.PushByte(23)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsClaimAsset {
		err = encoder.PushByte(24)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClaimAssetAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClaimAssetTicket1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTrap {
		err = encoder.PushByte(25)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTrapField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSubscribeVersion {
		err = encoder.PushByte(26)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSubscribeVersionQueryId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSubscribeVersionMaxResponseWeight1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnsubscribeVersion {
		err = encoder.PushByte(27)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Instruction3) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsWithdrawAsset = true
		err = decoder.Decode(&ty.AsWithdrawAssetField0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsReserveAssetDeposited = true
		err = decoder.Decode(&ty.AsReserveAssetDepositedField0)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsReceiveTeleportedAsset = true
		err = decoder.Decode(&ty.AsReceiveTeleportedAssetField0)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsQueryResponse = true
		err = decoder.Decode(&ty.AsQueryResponseQueryId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsQueryResponseResponse1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsQueryResponseMaxWeight2)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsTransferAsset = true
		err = decoder.Decode(&ty.AsTransferAssetAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferAssetBeneficiary1)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsTransferReserveAsset = true
		err = decoder.Decode(&ty.AsTransferReserveAssetAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferReserveAssetDest1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferReserveAssetXcm2)
		if err != nil {
			return err
		}
		return
	case 6:
		ty.IsTransact = true
		err = decoder.Decode(&ty.AsTransactOriginType0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransactRequireWeightAtMost1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransactCall2)
		if err != nil {
			return err
		}
		return
	case 7:
		ty.IsHrmpNewChannelOpenRequest = true
		err = decoder.Decode(&ty.AsHrmpNewChannelOpenRequestSender0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsHrmpNewChannelOpenRequestMaxMessageSize1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsHrmpNewChannelOpenRequestMaxCapacity2)
		if err != nil {
			return err
		}
		return
	case 8:
		ty.IsHrmpChannelAccepted = true
		err = decoder.Decode(&ty.AsHrmpChannelAcceptedRecipient0)
		if err != nil {
			return err
		}
		return
	case 9:
		ty.IsHrmpChannelClosing = true
		err = decoder.Decode(&ty.AsHrmpChannelClosingInitiator0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsHrmpChannelClosingSender1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsHrmpChannelClosingRecipient2)
		if err != nil {
			return err
		}
		return
	case 10:
		ty.IsClearOrigin = true
		return
	case 11:
		ty.IsDescendOrigin = true
		var tmp Junctions1
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsDescendOriginField0 = &tmp
		return
	case 12:
		ty.IsReportError = true
		err = decoder.Decode(&ty.AsReportErrorQueryId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsReportErrorDest1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsReportErrorMaxResponseWeight2)
		if err != nil {
			return err
		}
		return
	case 13:
		ty.IsDepositAsset = true
		err = decoder.Decode(&ty.AsDepositAssetAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDepositAssetMaxAssets1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDepositAssetBeneficiary2)
		if err != nil {
			return err
		}
		return
	case 14:
		ty.IsDepositReserveAsset = true
		err = decoder.Decode(&ty.AsDepositReserveAssetAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDepositReserveAssetMaxAssets1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDepositReserveAssetDest2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDepositReserveAssetXcm3)
		if err != nil {
			return err
		}
		return
	case 15:
		ty.IsExchangeAsset = true
		err = decoder.Decode(&ty.AsExchangeAssetGive0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExchangeAssetReceive1)
		if err != nil {
			return err
		}
		return
	case 16:
		ty.IsInitiateReserveWithdraw = true
		err = decoder.Decode(&ty.AsInitiateReserveWithdrawAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInitiateReserveWithdrawReserve1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInitiateReserveWithdrawXcm2)
		if err != nil {
			return err
		}
		return
	case 17:
		ty.IsInitiateTeleport = true
		err = decoder.Decode(&ty.AsInitiateTeleportAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInitiateTeleportDest1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInitiateTeleportXcm2)
		if err != nil {
			return err
		}
		return
	case 18:
		ty.IsQueryHolding = true
		err = decoder.Decode(&ty.AsQueryHoldingQueryId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsQueryHoldingDest1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsQueryHoldingAssets2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsQueryHoldingMaxResponseWeight3)
		if err != nil {
			return err
		}
		return
	case 19:
		ty.IsBuyExecution = true
		err = decoder.Decode(&ty.AsBuyExecutionFees0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsBuyExecutionWeightLimit1)
		if err != nil {
			return err
		}
		return
	case 20:
		ty.IsRefundSurplus = true
		return
	case 21:
		ty.IsSetErrorHandler = true
		err = decoder.Decode(&ty.AsSetErrorHandlerField0)
		if err != nil {
			return err
		}
		return
	case 22:
		ty.IsSetAppendix = true
		err = decoder.Decode(&ty.AsSetAppendixField0)
		if err != nil {
			return err
		}
		return
	case 23:
		ty.IsClearError = true
		return
	case 24:
		ty.IsClaimAsset = true
		err = decoder.Decode(&ty.AsClaimAssetAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsClaimAssetTicket1)
		if err != nil {
			return err
		}
		return
	case 25:
		ty.IsTrap = true
		err = decoder.Decode(&ty.AsTrapField0)
		if err != nil {
			return err
		}
		return
	case 26:
		ty.IsSubscribeVersion = true
		err = decoder.Decode(&ty.AsSubscribeVersionQueryId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSubscribeVersionMaxResponseWeight1)
		if err != nil {
			return err
		}
		return
	case 27:
		ty.IsUnsubscribeVersion = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Instruction3) Variant() (uint8, error) {
	if ty.IsWithdrawAsset {
		return 0, nil
	}
	if ty.IsReserveAssetDeposited {
		return 1, nil
	}
	if ty.IsReceiveTeleportedAsset {
		return 2, nil
	}
	if ty.IsQueryResponse {
		return 3, nil
	}
	if ty.IsTransferAsset {
		return 4, nil
	}
	if ty.IsTransferReserveAsset {
		return 5, nil
	}
	if ty.IsTransact {
		return 6, nil
	}
	if ty.IsHrmpNewChannelOpenRequest {
		return 7, nil
	}
	if ty.IsHrmpChannelAccepted {
		return 8, nil
	}
	if ty.IsHrmpChannelClosing {
		return 9, nil
	}
	if ty.IsClearOrigin {
		return 10, nil
	}
	if ty.IsDescendOrigin {
		return 11, nil
	}
	if ty.IsReportError {
		return 12, nil
	}
	if ty.IsDepositAsset {
		return 13, nil
	}
	if ty.IsDepositReserveAsset {
		return 14, nil
	}
	if ty.IsExchangeAsset {
		return 15, nil
	}
	if ty.IsInitiateReserveWithdraw {
		return 16, nil
	}
	if ty.IsInitiateTeleport {
		return 17, nil
	}
	if ty.IsQueryHolding {
		return 18, nil
	}
	if ty.IsBuyExecution {
		return 19, nil
	}
	if ty.IsRefundSurplus {
		return 20, nil
	}
	if ty.IsSetErrorHandler {
		return 21, nil
	}
	if ty.IsSetAppendix {
		return 22, nil
	}
	if ty.IsClearError {
		return 23, nil
	}
	if ty.IsClaimAsset {
		return 24, nil
	}
	if ty.IsTrap {
		return 25, nil
	}
	if ty.IsSubscribeVersion {
		return 26, nil
	}
	if ty.IsUnsubscribeVersion {
		return 27, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Instruction3) MarshalJSON() ([]byte, error) {
	if ty.IsWithdrawAsset {
		m := map[string]interface{}{"Instruction3::WithdrawAsset": ty.AsWithdrawAssetField0}
		return json.Marshal(m)
	}
	if ty.IsReserveAssetDeposited {
		m := map[string]interface{}{"Instruction3::ReserveAssetDeposited": ty.AsReserveAssetDepositedField0}
		return json.Marshal(m)
	}
	if ty.IsReceiveTeleportedAsset {
		m := map[string]interface{}{"Instruction3::ReceiveTeleportedAsset": ty.AsReceiveTeleportedAssetField0}
		return json.Marshal(m)
	}
	if ty.IsQueryResponse {
		m := map[string]interface{}{"Instruction3::QueryResponse": map[string]interface{}{
			"AsQueryResponseMaxWeight2": ty.AsQueryResponseMaxWeight2,
			"AsQueryResponseQueryId0":   ty.AsQueryResponseQueryId0,
			"AsQueryResponseResponse1":  ty.AsQueryResponseResponse1,
		}}
		return json.Marshal(m)
	}
	if ty.IsTransferAsset {
		m := map[string]interface{}{"Instruction3::TransferAsset": map[string]interface{}{
			"AsTransferAssetAssets0":      ty.AsTransferAssetAssets0,
			"AsTransferAssetBeneficiary1": ty.AsTransferAssetBeneficiary1,
		}}
		return json.Marshal(m)
	}
	if ty.IsTransferReserveAsset {
		m := map[string]interface{}{"Instruction3::TransferReserveAsset": map[string]interface{}{
			"AsTransferReserveAssetAssets0": ty.AsTransferReserveAssetAssets0,
			"AsTransferReserveAssetDest1":   ty.AsTransferReserveAssetDest1,
			"AsTransferReserveAssetXcm2":    ty.AsTransferReserveAssetXcm2,
		}}
		return json.Marshal(m)
	}
	if ty.IsTransact {
		m := map[string]interface{}{"Instruction3::Transact": map[string]interface{}{
			"AsTransactCall2":                ty.AsTransactCall2,
			"AsTransactOriginType0":          ty.AsTransactOriginType0,
			"AsTransactRequireWeightAtMost1": ty.AsTransactRequireWeightAtMost1,
		}}
		return json.Marshal(m)
	}
	if ty.IsHrmpNewChannelOpenRequest {
		m := map[string]interface{}{"Instruction3::HrmpNewChannelOpenRequest": map[string]interface{}{
			"AsHrmpNewChannelOpenRequestMaxCapacity2":    ty.AsHrmpNewChannelOpenRequestMaxCapacity2,
			"AsHrmpNewChannelOpenRequestMaxMessageSize1": ty.AsHrmpNewChannelOpenRequestMaxMessageSize1,
			"AsHrmpNewChannelOpenRequestSender0":         ty.AsHrmpNewChannelOpenRequestSender0,
		}}
		return json.Marshal(m)
	}
	if ty.IsHrmpChannelAccepted {
		m := map[string]interface{}{"Instruction3::HrmpChannelAccepted": ty.AsHrmpChannelAcceptedRecipient0}
		return json.Marshal(m)
	}
	if ty.IsHrmpChannelClosing {
		m := map[string]interface{}{"Instruction3::HrmpChannelClosing": map[string]interface{}{
			"AsHrmpChannelClosingInitiator0": ty.AsHrmpChannelClosingInitiator0,
			"AsHrmpChannelClosingRecipient2": ty.AsHrmpChannelClosingRecipient2,
			"AsHrmpChannelClosingSender1":    ty.AsHrmpChannelClosingSender1,
		}}
		return json.Marshal(m)
	}
	if ty.IsClearOrigin {
		return json.Marshal("Instruction3::ClearOrigin")
	}
	if ty.IsDescendOrigin {
		m := map[string]interface{}{"Instruction3::DescendOrigin": ty.AsDescendOriginField0}
		return json.Marshal(m)
	}
	if ty.IsReportError {
		m := map[string]interface{}{"Instruction3::ReportError": map[string]interface{}{
			"AsReportErrorDest1":              ty.AsReportErrorDest1,
			"AsReportErrorMaxResponseWeight2": ty.AsReportErrorMaxResponseWeight2,
			"AsReportErrorQueryId0":           ty.AsReportErrorQueryId0,
		}}
		return json.Marshal(m)
	}
	if ty.IsDepositAsset {
		m := map[string]interface{}{"Instruction3::DepositAsset": map[string]interface{}{
			"AsDepositAssetAssets0":      ty.AsDepositAssetAssets0,
			"AsDepositAssetBeneficiary2": ty.AsDepositAssetBeneficiary2,
			"AsDepositAssetMaxAssets1":   ty.AsDepositAssetMaxAssets1,
		}}
		return json.Marshal(m)
	}
	if ty.IsDepositReserveAsset {
		m := map[string]interface{}{"Instruction3::DepositReserveAsset": map[string]interface{}{
			"AsDepositReserveAssetAssets0":    ty.AsDepositReserveAssetAssets0,
			"AsDepositReserveAssetDest2":      ty.AsDepositReserveAssetDest2,
			"AsDepositReserveAssetMaxAssets1": ty.AsDepositReserveAssetMaxAssets1,
			"AsDepositReserveAssetXcm3":       ty.AsDepositReserveAssetXcm3,
		}}
		return json.Marshal(m)
	}
	if ty.IsExchangeAsset {
		m := map[string]interface{}{"Instruction3::ExchangeAsset": map[string]interface{}{
			"AsExchangeAssetGive0":    ty.AsExchangeAssetGive0,
			"AsExchangeAssetReceive1": ty.AsExchangeAssetReceive1,
		}}
		return json.Marshal(m)
	}
	if ty.IsInitiateReserveWithdraw {
		m := map[string]interface{}{"Instruction3::InitiateReserveWithdraw": map[string]interface{}{
			"AsInitiateReserveWithdrawAssets0":  ty.AsInitiateReserveWithdrawAssets0,
			"AsInitiateReserveWithdrawReserve1": ty.AsInitiateReserveWithdrawReserve1,
			"AsInitiateReserveWithdrawXcm2":     ty.AsInitiateReserveWithdrawXcm2,
		}}
		return json.Marshal(m)
	}
	if ty.IsInitiateTeleport {
		m := map[string]interface{}{"Instruction3::InitiateTeleport": map[string]interface{}{
			"AsInitiateTeleportAssets0": ty.AsInitiateTeleportAssets0,
			"AsInitiateTeleportDest1":   ty.AsInitiateTeleportDest1,
			"AsInitiateTeleportXcm2":    ty.AsInitiateTeleportXcm2,
		}}
		return json.Marshal(m)
	}
	if ty.IsQueryHolding {
		m := map[string]interface{}{"Instruction3::QueryHolding": map[string]interface{}{
			"AsQueryHoldingAssets2":            ty.AsQueryHoldingAssets2,
			"AsQueryHoldingDest1":              ty.AsQueryHoldingDest1,
			"AsQueryHoldingMaxResponseWeight3": ty.AsQueryHoldingMaxResponseWeight3,
			"AsQueryHoldingQueryId0":           ty.AsQueryHoldingQueryId0,
		}}
		return json.Marshal(m)
	}
	if ty.IsBuyExecution {
		m := map[string]interface{}{"Instruction3::BuyExecution": map[string]interface{}{
			"AsBuyExecutionFees0":        ty.AsBuyExecutionFees0,
			"AsBuyExecutionWeightLimit1": ty.AsBuyExecutionWeightLimit1,
		}}
		return json.Marshal(m)
	}
	if ty.IsRefundSurplus {
		return json.Marshal("Instruction3::RefundSurplus")
	}
	if ty.IsSetErrorHandler {
		m := map[string]interface{}{"Instruction3::SetErrorHandler": ty.AsSetErrorHandlerField0}
		return json.Marshal(m)
	}
	if ty.IsSetAppendix {
		m := map[string]interface{}{"Instruction3::SetAppendix": ty.AsSetAppendixField0}
		return json.Marshal(m)
	}
	if ty.IsClearError {
		return json.Marshal("Instruction3::ClearError")
	}
	if ty.IsClaimAsset {
		m := map[string]interface{}{"Instruction3::ClaimAsset": map[string]interface{}{
			"AsClaimAssetAssets0": ty.AsClaimAssetAssets0,
			"AsClaimAssetTicket1": ty.AsClaimAssetTicket1,
		}}
		return json.Marshal(m)
	}
	if ty.IsTrap {
		m := map[string]interface{}{"Instruction3::Trap": ty.AsTrapField0}
		return json.Marshal(m)
	}
	if ty.IsSubscribeVersion {
		m := map[string]interface{}{"Instruction3::SubscribeVersion": map[string]interface{}{
			"AsSubscribeVersionMaxResponseWeight1": ty.AsSubscribeVersionMaxResponseWeight1,
			"AsSubscribeVersionQueryId0":           ty.AsSubscribeVersionQueryId0,
		}}
		return json.Marshal(m)
	}
	if ty.IsUnsubscribeVersion {
		return json.Marshal("Instruction3::UnsubscribeVersion")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated XcmV3Instruction with id=276
type Instruction4 struct {
	IsWithdrawAsset                            bool
	AsWithdrawAssetField0                      []MultiAsset1
	IsReserveAssetDeposited                    bool
	AsReserveAssetDepositedField0              []MultiAsset1
	IsReceiveTeleportedAsset                   bool
	AsReceiveTeleportedAssetField0             []MultiAsset1
	IsQueryResponse                            bool
	AsQueryResponseQueryId0                    types.UCompact
	AsQueryResponseResponse1                   Response2
	AsQueryResponseMaxWeight2                  Weight
	AsQueryResponseQuerier3                    OptionTMultiLocation1
	IsTransferAsset                            bool
	AsTransferAssetAssets0                     []MultiAsset1
	AsTransferAssetBeneficiary1                MultiLocation1
	IsTransferReserveAsset                     bool
	AsTransferReserveAssetAssets0              []MultiAsset1
	AsTransferReserveAssetDest1                MultiLocation1
	AsTransferReserveAssetXcm2                 []Instruction2
	IsTransact                                 bool
	AsTransactOriginKind0                      OriginKind
	AsTransactRequireWeightAtMost1             Weight
	AsTransactCall2                            []byte
	IsHrmpNewChannelOpenRequest                bool
	AsHrmpNewChannelOpenRequestSender0         types.UCompact
	AsHrmpNewChannelOpenRequestMaxMessageSize1 types.UCompact
	AsHrmpNewChannelOpenRequestMaxCapacity2    types.UCompact
	IsHrmpChannelAccepted                      bool
	AsHrmpChannelAcceptedRecipient0            types.UCompact
	IsHrmpChannelClosing                       bool
	AsHrmpChannelClosingInitiator0             types.UCompact
	AsHrmpChannelClosingSender1                types.UCompact
	AsHrmpChannelClosingRecipient2             types.UCompact
	IsClearOrigin                              bool
	IsDescendOrigin                            bool
	AsDescendOriginField0                      *Junctions2
	IsReportError                              bool
	AsReportErrorField0                        QueryResponseInfo1
	IsDepositAsset                             bool
	AsDepositAssetAssets0                      MultiAssetFilter1
	AsDepositAssetBeneficiary1                 MultiLocation1
	IsDepositReserveAsset                      bool
	AsDepositReserveAssetAssets0               MultiAssetFilter1
	AsDepositReserveAssetDest1                 MultiLocation1
	AsDepositReserveAssetXcm2                  []Instruction2
	IsExchangeAsset                            bool
	AsExchangeAssetGive0                       MultiAssetFilter1
	AsExchangeAssetWant1                       []MultiAsset1
	AsExchangeAssetMaximal2                    bool
	IsInitiateReserveWithdraw                  bool
	AsInitiateReserveWithdrawAssets0           MultiAssetFilter1
	AsInitiateReserveWithdrawReserve1          MultiLocation1
	AsInitiateReserveWithdrawXcm2              []Instruction2
	IsInitiateTeleport                         bool
	AsInitiateTeleportAssets0                  MultiAssetFilter1
	AsInitiateTeleportDest1                    MultiLocation1
	AsInitiateTeleportXcm2                     []Instruction2
	IsReportHolding                            bool
	AsReportHoldingResponseInfo0               QueryResponseInfo1
	AsReportHoldingAssets1                     MultiAssetFilter1
	IsBuyExecution                             bool
	AsBuyExecutionFees0                        MultiAsset1
	AsBuyExecutionWeightLimit1                 WeightLimit
	IsRefundSurplus                            bool
	IsSetErrorHandler                          bool
	AsSetErrorHandlerField0                    []Instruction4
	IsSetAppendix                              bool
	AsSetAppendixField0                        []Instruction4
	IsClearError                               bool
	IsClaimAsset                               bool
	AsClaimAssetAssets0                        []MultiAsset1
	AsClaimAssetTicket1                        MultiLocation1
	IsTrap                                     bool
	AsTrapField0                               types.UCompact
	IsSubscribeVersion                         bool
	AsSubscribeVersionQueryId0                 types.UCompact
	AsSubscribeVersionMaxResponseWeight1       Weight
	IsUnsubscribeVersion                       bool
	IsBurnAsset                                bool
	AsBurnAssetField0                          []MultiAsset1
	IsExpectAsset                              bool
	AsExpectAssetField0                        []MultiAsset1
	IsExpectOrigin                             bool
	AsExpectOriginField0                       *OptionTMultiLocation1
	IsExpectError                              bool
	AsExpectErrorField0                        *OptionTTupleOfUint32XcmV3TraitsError
	IsExpectTransactStatus                     bool
	AsExpectTransactStatusField0               *MaybeErrorCode
	IsQueryPallet                              bool
	AsQueryPalletModuleName0                   []byte
	AsQueryPalletResponseInfo1                 QueryResponseInfo1
	IsExpectPallet                             bool
	AsExpectPalletIndex0                       types.UCompact
	AsExpectPalletName1                        []byte
	AsExpectPalletModuleName2                  []byte
	AsExpectPalletCrateMajor3                  types.UCompact
	AsExpectPalletMinCrateMinor4               types.UCompact
	IsReportTransactStatus                     bool
	AsReportTransactStatusField0               QueryResponseInfo1
	IsClearTransactStatus                      bool
	IsUniversalOrigin                          bool
	AsUniversalOriginField0                    *Junction2
	IsExportMessage                            bool
	AsExportMessageNetwork0                    NetworkId2
	AsExportMessageDestination1                Junctions2
	AsExportMessageXcm2                        []Instruction2
	IsLockAsset                                bool
	AsLockAssetAsset0                          MultiAsset1
	AsLockAssetUnlocker1                       MultiLocation1
	IsUnlockAsset                              bool
	AsUnlockAssetAsset0                        MultiAsset1
	AsUnlockAssetTarget1                       MultiLocation1
	IsNoteUnlockable                           bool
	AsNoteUnlockableAsset0                     MultiAsset1
	AsNoteUnlockableOwner1                     MultiLocation1
	IsRequestUnlock                            bool
	AsRequestUnlockAsset0                      MultiAsset1
	AsRequestUnlockLocker1                     MultiLocation1
	IsSetFeesMode                              bool
	AsSetFeesModeJitWithdraw0                  bool
	IsSetTopic                                 bool
	AsSetTopicField0                           [32]byte
	IsClearTopic                               bool
	IsAliasOrigin                              bool
	AsAliasOriginField0                        MultiLocation1
	IsUnpaidExecution                          bool
	AsUnpaidExecutionWeightLimit0              WeightLimit
	AsUnpaidExecutionCheckOrigin1              OptionTMultiLocation1
}

func (ty Instruction4) Encode(encoder scale.Encoder) (err error) {
	if ty.IsWithdrawAsset {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWithdrawAssetField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReserveAssetDeposited {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReserveAssetDepositedField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReceiveTeleportedAsset {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReceiveTeleportedAssetField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsQueryResponse {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryResponseQueryId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryResponseResponse1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryResponseMaxWeight2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryResponseQuerier3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTransferAsset {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferAssetAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferAssetBeneficiary1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTransferReserveAsset {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferReserveAssetAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferReserveAssetDest1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferReserveAssetXcm2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTransact {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransactOriginKind0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransactRequireWeightAtMost1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransactCall2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsHrmpNewChannelOpenRequest {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpNewChannelOpenRequestSender0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpNewChannelOpenRequestMaxMessageSize1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpNewChannelOpenRequestMaxCapacity2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsHrmpChannelAccepted {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpChannelAcceptedRecipient0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsHrmpChannelClosing {
		err = encoder.PushByte(9)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpChannelClosingInitiator0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpChannelClosingSender1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpChannelClosingRecipient2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsClearOrigin {
		err = encoder.PushByte(10)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDescendOrigin {
		err = encoder.PushByte(11)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDescendOriginField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReportError {
		err = encoder.PushByte(12)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReportErrorField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDepositAsset {
		err = encoder.PushByte(13)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositAssetAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositAssetBeneficiary1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDepositReserveAsset {
		err = encoder.PushByte(14)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositReserveAssetAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositReserveAssetDest1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositReserveAssetXcm2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExchangeAsset {
		err = encoder.PushByte(15)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExchangeAssetGive0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExchangeAssetWant1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExchangeAssetMaximal2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsInitiateReserveWithdraw {
		err = encoder.PushByte(16)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateReserveWithdrawAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateReserveWithdrawReserve1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateReserveWithdrawXcm2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsInitiateTeleport {
		err = encoder.PushByte(17)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateTeleportAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateTeleportDest1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateTeleportXcm2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReportHolding {
		err = encoder.PushByte(18)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReportHoldingResponseInfo0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReportHoldingAssets1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBuyExecution {
		err = encoder.PushByte(19)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBuyExecutionFees0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBuyExecutionWeightLimit1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsRefundSurplus {
		err = encoder.PushByte(20)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetErrorHandler {
		err = encoder.PushByte(21)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetErrorHandlerField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetAppendix {
		err = encoder.PushByte(22)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetAppendixField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsClearError {
		err = encoder.PushByte(23)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsClaimAsset {
		err = encoder.PushByte(24)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClaimAssetAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClaimAssetTicket1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTrap {
		err = encoder.PushByte(25)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTrapField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSubscribeVersion {
		err = encoder.PushByte(26)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSubscribeVersionQueryId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSubscribeVersionMaxResponseWeight1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnsubscribeVersion {
		err = encoder.PushByte(27)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBurnAsset {
		err = encoder.PushByte(28)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBurnAssetField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExpectAsset {
		err = encoder.PushByte(29)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectAssetField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExpectOrigin {
		err = encoder.PushByte(30)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectOriginField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExpectError {
		err = encoder.PushByte(31)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectErrorField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExpectTransactStatus {
		err = encoder.PushByte(32)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectTransactStatusField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsQueryPallet {
		err = encoder.PushByte(33)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryPalletModuleName0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryPalletResponseInfo1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExpectPallet {
		err = encoder.PushByte(34)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectPalletIndex0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectPalletName1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectPalletModuleName2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectPalletCrateMajor3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectPalletMinCrateMinor4)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReportTransactStatus {
		err = encoder.PushByte(35)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReportTransactStatusField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsClearTransactStatus {
		err = encoder.PushByte(36)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUniversalOrigin {
		err = encoder.PushByte(37)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUniversalOriginField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExportMessage {
		err = encoder.PushByte(38)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExportMessageNetwork0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExportMessageDestination1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExportMessageXcm2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsLockAsset {
		err = encoder.PushByte(39)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLockAssetAsset0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLockAssetUnlocker1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnlockAsset {
		err = encoder.PushByte(40)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnlockAssetAsset0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnlockAssetTarget1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNoteUnlockable {
		err = encoder.PushByte(41)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNoteUnlockableAsset0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNoteUnlockableOwner1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsRequestUnlock {
		err = encoder.PushByte(42)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsRequestUnlockAsset0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsRequestUnlockLocker1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetFeesMode {
		err = encoder.PushByte(43)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetFeesModeJitWithdraw0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetTopic {
		err = encoder.PushByte(44)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetTopicField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsClearTopic {
		err = encoder.PushByte(45)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAliasOrigin {
		err = encoder.PushByte(46)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAliasOriginField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnpaidExecution {
		err = encoder.PushByte(47)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnpaidExecutionWeightLimit0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnpaidExecutionCheckOrigin1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Instruction4) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsWithdrawAsset = true
		err = decoder.Decode(&ty.AsWithdrawAssetField0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsReserveAssetDeposited = true
		err = decoder.Decode(&ty.AsReserveAssetDepositedField0)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsReceiveTeleportedAsset = true
		err = decoder.Decode(&ty.AsReceiveTeleportedAssetField0)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsQueryResponse = true
		err = decoder.Decode(&ty.AsQueryResponseQueryId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsQueryResponseResponse1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsQueryResponseMaxWeight2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsQueryResponseQuerier3)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsTransferAsset = true
		err = decoder.Decode(&ty.AsTransferAssetAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferAssetBeneficiary1)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsTransferReserveAsset = true
		err = decoder.Decode(&ty.AsTransferReserveAssetAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferReserveAssetDest1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferReserveAssetXcm2)
		if err != nil {
			return err
		}
		return
	case 6:
		ty.IsTransact = true
		err = decoder.Decode(&ty.AsTransactOriginKind0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransactRequireWeightAtMost1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransactCall2)
		if err != nil {
			return err
		}
		return
	case 7:
		ty.IsHrmpNewChannelOpenRequest = true
		err = decoder.Decode(&ty.AsHrmpNewChannelOpenRequestSender0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsHrmpNewChannelOpenRequestMaxMessageSize1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsHrmpNewChannelOpenRequestMaxCapacity2)
		if err != nil {
			return err
		}
		return
	case 8:
		ty.IsHrmpChannelAccepted = true
		err = decoder.Decode(&ty.AsHrmpChannelAcceptedRecipient0)
		if err != nil {
			return err
		}
		return
	case 9:
		ty.IsHrmpChannelClosing = true
		err = decoder.Decode(&ty.AsHrmpChannelClosingInitiator0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsHrmpChannelClosingSender1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsHrmpChannelClosingRecipient2)
		if err != nil {
			return err
		}
		return
	case 10:
		ty.IsClearOrigin = true
		return
	case 11:
		ty.IsDescendOrigin = true
		var tmp Junctions2
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsDescendOriginField0 = &tmp
		return
	case 12:
		ty.IsReportError = true
		err = decoder.Decode(&ty.AsReportErrorField0)
		if err != nil {
			return err
		}
		return
	case 13:
		ty.IsDepositAsset = true
		err = decoder.Decode(&ty.AsDepositAssetAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDepositAssetBeneficiary1)
		if err != nil {
			return err
		}
		return
	case 14:
		ty.IsDepositReserveAsset = true
		err = decoder.Decode(&ty.AsDepositReserveAssetAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDepositReserveAssetDest1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDepositReserveAssetXcm2)
		if err != nil {
			return err
		}
		return
	case 15:
		ty.IsExchangeAsset = true
		err = decoder.Decode(&ty.AsExchangeAssetGive0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExchangeAssetWant1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExchangeAssetMaximal2)
		if err != nil {
			return err
		}
		return
	case 16:
		ty.IsInitiateReserveWithdraw = true
		err = decoder.Decode(&ty.AsInitiateReserveWithdrawAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInitiateReserveWithdrawReserve1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInitiateReserveWithdrawXcm2)
		if err != nil {
			return err
		}
		return
	case 17:
		ty.IsInitiateTeleport = true
		err = decoder.Decode(&ty.AsInitiateTeleportAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInitiateTeleportDest1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInitiateTeleportXcm2)
		if err != nil {
			return err
		}
		return
	case 18:
		ty.IsReportHolding = true
		err = decoder.Decode(&ty.AsReportHoldingResponseInfo0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsReportHoldingAssets1)
		if err != nil {
			return err
		}
		return
	case 19:
		ty.IsBuyExecution = true
		err = decoder.Decode(&ty.AsBuyExecutionFees0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsBuyExecutionWeightLimit1)
		if err != nil {
			return err
		}
		return
	case 20:
		ty.IsRefundSurplus = true
		return
	case 21:
		ty.IsSetErrorHandler = true
		err = decoder.Decode(&ty.AsSetErrorHandlerField0)
		if err != nil {
			return err
		}
		return
	case 22:
		ty.IsSetAppendix = true
		err = decoder.Decode(&ty.AsSetAppendixField0)
		if err != nil {
			return err
		}
		return
	case 23:
		ty.IsClearError = true
		return
	case 24:
		ty.IsClaimAsset = true
		err = decoder.Decode(&ty.AsClaimAssetAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsClaimAssetTicket1)
		if err != nil {
			return err
		}
		return
	case 25:
		ty.IsTrap = true
		err = decoder.Decode(&ty.AsTrapField0)
		if err != nil {
			return err
		}
		return
	case 26:
		ty.IsSubscribeVersion = true
		err = decoder.Decode(&ty.AsSubscribeVersionQueryId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSubscribeVersionMaxResponseWeight1)
		if err != nil {
			return err
		}
		return
	case 27:
		ty.IsUnsubscribeVersion = true
		return
	case 28:
		ty.IsBurnAsset = true
		err = decoder.Decode(&ty.AsBurnAssetField0)
		if err != nil {
			return err
		}
		return
	case 29:
		ty.IsExpectAsset = true
		err = decoder.Decode(&ty.AsExpectAssetField0)
		if err != nil {
			return err
		}
		return
	case 30:
		ty.IsExpectOrigin = true
		var tmp OptionTMultiLocation1
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsExpectOriginField0 = &tmp
		return
	case 31:
		ty.IsExpectError = true
		var tmp OptionTTupleOfUint32XcmV3TraitsError
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsExpectErrorField0 = &tmp
		return
	case 32:
		ty.IsExpectTransactStatus = true
		var tmp MaybeErrorCode
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsExpectTransactStatusField0 = &tmp
		return
	case 33:
		ty.IsQueryPallet = true
		err = decoder.Decode(&ty.AsQueryPalletModuleName0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsQueryPalletResponseInfo1)
		if err != nil {
			return err
		}
		return
	case 34:
		ty.IsExpectPallet = true
		err = decoder.Decode(&ty.AsExpectPalletIndex0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExpectPalletName1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExpectPalletModuleName2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExpectPalletCrateMajor3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExpectPalletMinCrateMinor4)
		if err != nil {
			return err
		}
		return
	case 35:
		ty.IsReportTransactStatus = true
		err = decoder.Decode(&ty.AsReportTransactStatusField0)
		if err != nil {
			return err
		}
		return
	case 36:
		ty.IsClearTransactStatus = true
		return
	case 37:
		ty.IsUniversalOrigin = true
		var tmp Junction2
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsUniversalOriginField0 = &tmp
		return
	case 38:
		ty.IsExportMessage = true
		err = decoder.Decode(&ty.AsExportMessageNetwork0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExportMessageDestination1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExportMessageXcm2)
		if err != nil {
			return err
		}
		return
	case 39:
		ty.IsLockAsset = true
		err = decoder.Decode(&ty.AsLockAssetAsset0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsLockAssetUnlocker1)
		if err != nil {
			return err
		}
		return
	case 40:
		ty.IsUnlockAsset = true
		err = decoder.Decode(&ty.AsUnlockAssetAsset0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUnlockAssetTarget1)
		if err != nil {
			return err
		}
		return
	case 41:
		ty.IsNoteUnlockable = true
		err = decoder.Decode(&ty.AsNoteUnlockableAsset0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsNoteUnlockableOwner1)
		if err != nil {
			return err
		}
		return
	case 42:
		ty.IsRequestUnlock = true
		err = decoder.Decode(&ty.AsRequestUnlockAsset0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsRequestUnlockLocker1)
		if err != nil {
			return err
		}
		return
	case 43:
		ty.IsSetFeesMode = true
		err = decoder.Decode(&ty.AsSetFeesModeJitWithdraw0)
		if err != nil {
			return err
		}
		return
	case 44:
		ty.IsSetTopic = true
		err = decoder.Decode(&ty.AsSetTopicField0)
		if err != nil {
			return err
		}
		return
	case 45:
		ty.IsClearTopic = true
		return
	case 46:
		ty.IsAliasOrigin = true
		err = decoder.Decode(&ty.AsAliasOriginField0)
		if err != nil {
			return err
		}
		return
	case 47:
		ty.IsUnpaidExecution = true
		err = decoder.Decode(&ty.AsUnpaidExecutionWeightLimit0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUnpaidExecutionCheckOrigin1)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Instruction4) Variant() (uint8, error) {
	if ty.IsWithdrawAsset {
		return 0, nil
	}
	if ty.IsReserveAssetDeposited {
		return 1, nil
	}
	if ty.IsReceiveTeleportedAsset {
		return 2, nil
	}
	if ty.IsQueryResponse {
		return 3, nil
	}
	if ty.IsTransferAsset {
		return 4, nil
	}
	if ty.IsTransferReserveAsset {
		return 5, nil
	}
	if ty.IsTransact {
		return 6, nil
	}
	if ty.IsHrmpNewChannelOpenRequest {
		return 7, nil
	}
	if ty.IsHrmpChannelAccepted {
		return 8, nil
	}
	if ty.IsHrmpChannelClosing {
		return 9, nil
	}
	if ty.IsClearOrigin {
		return 10, nil
	}
	if ty.IsDescendOrigin {
		return 11, nil
	}
	if ty.IsReportError {
		return 12, nil
	}
	if ty.IsDepositAsset {
		return 13, nil
	}
	if ty.IsDepositReserveAsset {
		return 14, nil
	}
	if ty.IsExchangeAsset {
		return 15, nil
	}
	if ty.IsInitiateReserveWithdraw {
		return 16, nil
	}
	if ty.IsInitiateTeleport {
		return 17, nil
	}
	if ty.IsReportHolding {
		return 18, nil
	}
	if ty.IsBuyExecution {
		return 19, nil
	}
	if ty.IsRefundSurplus {
		return 20, nil
	}
	if ty.IsSetErrorHandler {
		return 21, nil
	}
	if ty.IsSetAppendix {
		return 22, nil
	}
	if ty.IsClearError {
		return 23, nil
	}
	if ty.IsClaimAsset {
		return 24, nil
	}
	if ty.IsTrap {
		return 25, nil
	}
	if ty.IsSubscribeVersion {
		return 26, nil
	}
	if ty.IsUnsubscribeVersion {
		return 27, nil
	}
	if ty.IsBurnAsset {
		return 28, nil
	}
	if ty.IsExpectAsset {
		return 29, nil
	}
	if ty.IsExpectOrigin {
		return 30, nil
	}
	if ty.IsExpectError {
		return 31, nil
	}
	if ty.IsExpectTransactStatus {
		return 32, nil
	}
	if ty.IsQueryPallet {
		return 33, nil
	}
	if ty.IsExpectPallet {
		return 34, nil
	}
	if ty.IsReportTransactStatus {
		return 35, nil
	}
	if ty.IsClearTransactStatus {
		return 36, nil
	}
	if ty.IsUniversalOrigin {
		return 37, nil
	}
	if ty.IsExportMessage {
		return 38, nil
	}
	if ty.IsLockAsset {
		return 39, nil
	}
	if ty.IsUnlockAsset {
		return 40, nil
	}
	if ty.IsNoteUnlockable {
		return 41, nil
	}
	if ty.IsRequestUnlock {
		return 42, nil
	}
	if ty.IsSetFeesMode {
		return 43, nil
	}
	if ty.IsSetTopic {
		return 44, nil
	}
	if ty.IsClearTopic {
		return 45, nil
	}
	if ty.IsAliasOrigin {
		return 46, nil
	}
	if ty.IsUnpaidExecution {
		return 47, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Instruction4) MarshalJSON() ([]byte, error) {
	if ty.IsWithdrawAsset {
		m := map[string]interface{}{"Instruction4::WithdrawAsset": ty.AsWithdrawAssetField0}
		return json.Marshal(m)
	}
	if ty.IsReserveAssetDeposited {
		m := map[string]interface{}{"Instruction4::ReserveAssetDeposited": ty.AsReserveAssetDepositedField0}
		return json.Marshal(m)
	}
	if ty.IsReceiveTeleportedAsset {
		m := map[string]interface{}{"Instruction4::ReceiveTeleportedAsset": ty.AsReceiveTeleportedAssetField0}
		return json.Marshal(m)
	}
	if ty.IsQueryResponse {
		m := map[string]interface{}{"Instruction4::QueryResponse": map[string]interface{}{
			"AsQueryResponseMaxWeight2": ty.AsQueryResponseMaxWeight2,
			"AsQueryResponseQuerier3":   ty.AsQueryResponseQuerier3,
			"AsQueryResponseQueryId0":   ty.AsQueryResponseQueryId0,
			"AsQueryResponseResponse1":  ty.AsQueryResponseResponse1,
		}}
		return json.Marshal(m)
	}
	if ty.IsTransferAsset {
		m := map[string]interface{}{"Instruction4::TransferAsset": map[string]interface{}{
			"AsTransferAssetAssets0":      ty.AsTransferAssetAssets0,
			"AsTransferAssetBeneficiary1": ty.AsTransferAssetBeneficiary1,
		}}
		return json.Marshal(m)
	}
	if ty.IsTransferReserveAsset {
		m := map[string]interface{}{"Instruction4::TransferReserveAsset": map[string]interface{}{
			"AsTransferReserveAssetAssets0": ty.AsTransferReserveAssetAssets0,
			"AsTransferReserveAssetDest1":   ty.AsTransferReserveAssetDest1,
			"AsTransferReserveAssetXcm2":    ty.AsTransferReserveAssetXcm2,
		}}
		return json.Marshal(m)
	}
	if ty.IsTransact {
		m := map[string]interface{}{"Instruction4::Transact": map[string]interface{}{
			"AsTransactCall2":                ty.AsTransactCall2,
			"AsTransactOriginKind0":          ty.AsTransactOriginKind0,
			"AsTransactRequireWeightAtMost1": ty.AsTransactRequireWeightAtMost1,
		}}
		return json.Marshal(m)
	}
	if ty.IsHrmpNewChannelOpenRequest {
		m := map[string]interface{}{"Instruction4::HrmpNewChannelOpenRequest": map[string]interface{}{
			"AsHrmpNewChannelOpenRequestMaxCapacity2":    ty.AsHrmpNewChannelOpenRequestMaxCapacity2,
			"AsHrmpNewChannelOpenRequestMaxMessageSize1": ty.AsHrmpNewChannelOpenRequestMaxMessageSize1,
			"AsHrmpNewChannelOpenRequestSender0":         ty.AsHrmpNewChannelOpenRequestSender0,
		}}
		return json.Marshal(m)
	}
	if ty.IsHrmpChannelAccepted {
		m := map[string]interface{}{"Instruction4::HrmpChannelAccepted": ty.AsHrmpChannelAcceptedRecipient0}
		return json.Marshal(m)
	}
	if ty.IsHrmpChannelClosing {
		m := map[string]interface{}{"Instruction4::HrmpChannelClosing": map[string]interface{}{
			"AsHrmpChannelClosingInitiator0": ty.AsHrmpChannelClosingInitiator0,
			"AsHrmpChannelClosingRecipient2": ty.AsHrmpChannelClosingRecipient2,
			"AsHrmpChannelClosingSender1":    ty.AsHrmpChannelClosingSender1,
		}}
		return json.Marshal(m)
	}
	if ty.IsClearOrigin {
		return json.Marshal("Instruction4::ClearOrigin")
	}
	if ty.IsDescendOrigin {
		m := map[string]interface{}{"Instruction4::DescendOrigin": ty.AsDescendOriginField0}
		return json.Marshal(m)
	}
	if ty.IsReportError {
		m := map[string]interface{}{"Instruction4::ReportError": ty.AsReportErrorField0}
		return json.Marshal(m)
	}
	if ty.IsDepositAsset {
		m := map[string]interface{}{"Instruction4::DepositAsset": map[string]interface{}{
			"AsDepositAssetAssets0":      ty.AsDepositAssetAssets0,
			"AsDepositAssetBeneficiary1": ty.AsDepositAssetBeneficiary1,
		}}
		return json.Marshal(m)
	}
	if ty.IsDepositReserveAsset {
		m := map[string]interface{}{"Instruction4::DepositReserveAsset": map[string]interface{}{
			"AsDepositReserveAssetAssets0": ty.AsDepositReserveAssetAssets0,
			"AsDepositReserveAssetDest1":   ty.AsDepositReserveAssetDest1,
			"AsDepositReserveAssetXcm2":    ty.AsDepositReserveAssetXcm2,
		}}
		return json.Marshal(m)
	}
	if ty.IsExchangeAsset {
		m := map[string]interface{}{"Instruction4::ExchangeAsset": map[string]interface{}{
			"AsExchangeAssetGive0":    ty.AsExchangeAssetGive0,
			"AsExchangeAssetMaximal2": ty.AsExchangeAssetMaximal2,
			"AsExchangeAssetWant1":    ty.AsExchangeAssetWant1,
		}}
		return json.Marshal(m)
	}
	if ty.IsInitiateReserveWithdraw {
		m := map[string]interface{}{"Instruction4::InitiateReserveWithdraw": map[string]interface{}{
			"AsInitiateReserveWithdrawAssets0":  ty.AsInitiateReserveWithdrawAssets0,
			"AsInitiateReserveWithdrawReserve1": ty.AsInitiateReserveWithdrawReserve1,
			"AsInitiateReserveWithdrawXcm2":     ty.AsInitiateReserveWithdrawXcm2,
		}}
		return json.Marshal(m)
	}
	if ty.IsInitiateTeleport {
		m := map[string]interface{}{"Instruction4::InitiateTeleport": map[string]interface{}{
			"AsInitiateTeleportAssets0": ty.AsInitiateTeleportAssets0,
			"AsInitiateTeleportDest1":   ty.AsInitiateTeleportDest1,
			"AsInitiateTeleportXcm2":    ty.AsInitiateTeleportXcm2,
		}}
		return json.Marshal(m)
	}
	if ty.IsReportHolding {
		m := map[string]interface{}{"Instruction4::ReportHolding": map[string]interface{}{
			"AsReportHoldingAssets1":       ty.AsReportHoldingAssets1,
			"AsReportHoldingResponseInfo0": ty.AsReportHoldingResponseInfo0,
		}}
		return json.Marshal(m)
	}
	if ty.IsBuyExecution {
		m := map[string]interface{}{"Instruction4::BuyExecution": map[string]interface{}{
			"AsBuyExecutionFees0":        ty.AsBuyExecutionFees0,
			"AsBuyExecutionWeightLimit1": ty.AsBuyExecutionWeightLimit1,
		}}
		return json.Marshal(m)
	}
	if ty.IsRefundSurplus {
		return json.Marshal("Instruction4::RefundSurplus")
	}
	if ty.IsSetErrorHandler {
		m := map[string]interface{}{"Instruction4::SetErrorHandler": ty.AsSetErrorHandlerField0}
		return json.Marshal(m)
	}
	if ty.IsSetAppendix {
		m := map[string]interface{}{"Instruction4::SetAppendix": ty.AsSetAppendixField0}
		return json.Marshal(m)
	}
	if ty.IsClearError {
		return json.Marshal("Instruction4::ClearError")
	}
	if ty.IsClaimAsset {
		m := map[string]interface{}{"Instruction4::ClaimAsset": map[string]interface{}{
			"AsClaimAssetAssets0": ty.AsClaimAssetAssets0,
			"AsClaimAssetTicket1": ty.AsClaimAssetTicket1,
		}}
		return json.Marshal(m)
	}
	if ty.IsTrap {
		m := map[string]interface{}{"Instruction4::Trap": ty.AsTrapField0}
		return json.Marshal(m)
	}
	if ty.IsSubscribeVersion {
		m := map[string]interface{}{"Instruction4::SubscribeVersion": map[string]interface{}{
			"AsSubscribeVersionMaxResponseWeight1": ty.AsSubscribeVersionMaxResponseWeight1,
			"AsSubscribeVersionQueryId0":           ty.AsSubscribeVersionQueryId0,
		}}
		return json.Marshal(m)
	}
	if ty.IsUnsubscribeVersion {
		return json.Marshal("Instruction4::UnsubscribeVersion")
	}
	if ty.IsBurnAsset {
		m := map[string]interface{}{"Instruction4::BurnAsset": ty.AsBurnAssetField0}
		return json.Marshal(m)
	}
	if ty.IsExpectAsset {
		m := map[string]interface{}{"Instruction4::ExpectAsset": ty.AsExpectAssetField0}
		return json.Marshal(m)
	}
	if ty.IsExpectOrigin {
		m := map[string]interface{}{"Instruction4::ExpectOrigin": ty.AsExpectOriginField0}
		return json.Marshal(m)
	}
	if ty.IsExpectError {
		m := map[string]interface{}{"Instruction4::ExpectError": ty.AsExpectErrorField0}
		return json.Marshal(m)
	}
	if ty.IsExpectTransactStatus {
		m := map[string]interface{}{"Instruction4::ExpectTransactStatus": ty.AsExpectTransactStatusField0}
		return json.Marshal(m)
	}
	if ty.IsQueryPallet {
		m := map[string]interface{}{"Instruction4::QueryPallet": map[string]interface{}{
			"AsQueryPalletModuleName0":   ty.AsQueryPalletModuleName0,
			"AsQueryPalletResponseInfo1": ty.AsQueryPalletResponseInfo1,
		}}
		return json.Marshal(m)
	}
	if ty.IsExpectPallet {
		m := map[string]interface{}{"Instruction4::ExpectPallet": map[string]interface{}{
			"AsExpectPalletCrateMajor3":    ty.AsExpectPalletCrateMajor3,
			"AsExpectPalletIndex0":         ty.AsExpectPalletIndex0,
			"AsExpectPalletMinCrateMinor4": ty.AsExpectPalletMinCrateMinor4,
			"AsExpectPalletModuleName2":    ty.AsExpectPalletModuleName2,
			"AsExpectPalletName1":          ty.AsExpectPalletName1,
		}}
		return json.Marshal(m)
	}
	if ty.IsReportTransactStatus {
		m := map[string]interface{}{"Instruction4::ReportTransactStatus": ty.AsReportTransactStatusField0}
		return json.Marshal(m)
	}
	if ty.IsClearTransactStatus {
		return json.Marshal("Instruction4::ClearTransactStatus")
	}
	if ty.IsUniversalOrigin {
		m := map[string]interface{}{"Instruction4::UniversalOrigin": ty.AsUniversalOriginField0}
		return json.Marshal(m)
	}
	if ty.IsExportMessage {
		m := map[string]interface{}{"Instruction4::ExportMessage": map[string]interface{}{
			"AsExportMessageDestination1": ty.AsExportMessageDestination1,
			"AsExportMessageNetwork0":     ty.AsExportMessageNetwork0,
			"AsExportMessageXcm2":         ty.AsExportMessageXcm2,
		}}
		return json.Marshal(m)
	}
	if ty.IsLockAsset {
		m := map[string]interface{}{"Instruction4::LockAsset": map[string]interface{}{
			"AsLockAssetAsset0":    ty.AsLockAssetAsset0,
			"AsLockAssetUnlocker1": ty.AsLockAssetUnlocker1,
		}}
		return json.Marshal(m)
	}
	if ty.IsUnlockAsset {
		m := map[string]interface{}{"Instruction4::UnlockAsset": map[string]interface{}{
			"AsUnlockAssetAsset0":  ty.AsUnlockAssetAsset0,
			"AsUnlockAssetTarget1": ty.AsUnlockAssetTarget1,
		}}
		return json.Marshal(m)
	}
	if ty.IsNoteUnlockable {
		m := map[string]interface{}{"Instruction4::NoteUnlockable": map[string]interface{}{
			"AsNoteUnlockableAsset0": ty.AsNoteUnlockableAsset0,
			"AsNoteUnlockableOwner1": ty.AsNoteUnlockableOwner1,
		}}
		return json.Marshal(m)
	}
	if ty.IsRequestUnlock {
		m := map[string]interface{}{"Instruction4::RequestUnlock": map[string]interface{}{
			"AsRequestUnlockAsset0":  ty.AsRequestUnlockAsset0,
			"AsRequestUnlockLocker1": ty.AsRequestUnlockLocker1,
		}}
		return json.Marshal(m)
	}
	if ty.IsSetFeesMode {
		m := map[string]interface{}{"Instruction4::SetFeesMode": ty.AsSetFeesModeJitWithdraw0}
		return json.Marshal(m)
	}
	if ty.IsSetTopic {
		m := map[string]interface{}{"Instruction4::SetTopic": ty.AsSetTopicField0}
		return json.Marshal(m)
	}
	if ty.IsClearTopic {
		return json.Marshal("Instruction4::ClearTopic")
	}
	if ty.IsAliasOrigin {
		m := map[string]interface{}{"Instruction4::AliasOrigin": ty.AsAliasOriginField0}
		return json.Marshal(m)
	}
	if ty.IsUnpaidExecution {
		m := map[string]interface{}{"Instruction4::UnpaidExecution": map[string]interface{}{
			"AsUnpaidExecutionCheckOrigin1": ty.AsUnpaidExecutionCheckOrigin1,
			"AsUnpaidExecutionWeightLimit0": ty.AsUnpaidExecutionWeightLimit0,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated StagingXcmV4Instruction with id=279
type Instruction5 struct {
	IsWithdrawAsset                            bool
	AsWithdrawAssetField0                      []Asset
	IsReserveAssetDeposited                    bool
	AsReserveAssetDepositedField0              []Asset
	IsReceiveTeleportedAsset                   bool
	AsReceiveTeleportedAssetField0             []Asset
	IsQueryResponse                            bool
	AsQueryResponseQueryId0                    types.UCompact
	AsQueryResponseResponse1                   Response
	AsQueryResponseMaxWeight2                  Weight
	AsQueryResponseQuerier3                    OptionTLocation
	IsTransferAsset                            bool
	AsTransferAssetAssets0                     []Asset
	AsTransferAssetBeneficiary1                Location
	IsTransferReserveAsset                     bool
	AsTransferReserveAssetAssets0              []Asset
	AsTransferReserveAssetDest1                Location
	AsTransferReserveAssetXcm2                 []Instruction
	IsTransact                                 bool
	AsTransactOriginKind0                      OriginKind
	AsTransactRequireWeightAtMost1             Weight
	AsTransactCall2                            []byte
	IsHrmpNewChannelOpenRequest                bool
	AsHrmpNewChannelOpenRequestSender0         types.UCompact
	AsHrmpNewChannelOpenRequestMaxMessageSize1 types.UCompact
	AsHrmpNewChannelOpenRequestMaxCapacity2    types.UCompact
	IsHrmpChannelAccepted                      bool
	AsHrmpChannelAcceptedRecipient0            types.UCompact
	IsHrmpChannelClosing                       bool
	AsHrmpChannelClosingInitiator0             types.UCompact
	AsHrmpChannelClosingSender1                types.UCompact
	AsHrmpChannelClosingRecipient2             types.UCompact
	IsClearOrigin                              bool
	IsDescendOrigin                            bool
	AsDescendOriginField0                      *Junctions
	IsReportError                              bool
	AsReportErrorField0                        QueryResponseInfo
	IsDepositAsset                             bool
	AsDepositAssetAssets0                      AssetFilter
	AsDepositAssetBeneficiary1                 Location
	IsDepositReserveAsset                      bool
	AsDepositReserveAssetAssets0               AssetFilter
	AsDepositReserveAssetDest1                 Location
	AsDepositReserveAssetXcm2                  []Instruction
	IsExchangeAsset                            bool
	AsExchangeAssetGive0                       AssetFilter
	AsExchangeAssetWant1                       []Asset
	AsExchangeAssetMaximal2                    bool
	IsInitiateReserveWithdraw                  bool
	AsInitiateReserveWithdrawAssets0           AssetFilter
	AsInitiateReserveWithdrawReserve1          Location
	AsInitiateReserveWithdrawXcm2              []Instruction
	IsInitiateTeleport                         bool
	AsInitiateTeleportAssets0                  AssetFilter
	AsInitiateTeleportDest1                    Location
	AsInitiateTeleportXcm2                     []Instruction
	IsReportHolding                            bool
	AsReportHoldingResponseInfo0               QueryResponseInfo
	AsReportHoldingAssets1                     AssetFilter
	IsBuyExecution                             bool
	AsBuyExecutionFees0                        Asset
	AsBuyExecutionWeightLimit1                 WeightLimit
	IsRefundSurplus                            bool
	IsSetErrorHandler                          bool
	AsSetErrorHandlerField0                    []Instruction5
	IsSetAppendix                              bool
	AsSetAppendixField0                        []Instruction5
	IsClearError                               bool
	IsClaimAsset                               bool
	AsClaimAssetAssets0                        []Asset
	AsClaimAssetTicket1                        Location
	IsTrap                                     bool
	AsTrapField0                               types.UCompact
	IsSubscribeVersion                         bool
	AsSubscribeVersionQueryId0                 types.UCompact
	AsSubscribeVersionMaxResponseWeight1       Weight
	IsUnsubscribeVersion                       bool
	IsBurnAsset                                bool
	AsBurnAssetField0                          []Asset
	IsExpectAsset                              bool
	AsExpectAssetField0                        []Asset
	IsExpectOrigin                             bool
	AsExpectOriginField0                       *OptionTLocation
	IsExpectError                              bool
	AsExpectErrorField0                        *OptionTTupleOfUint32XcmV3TraitsError
	IsExpectTransactStatus                     bool
	AsExpectTransactStatusField0               *MaybeErrorCode
	IsQueryPallet                              bool
	AsQueryPalletModuleName0                   []byte
	AsQueryPalletResponseInfo1                 QueryResponseInfo
	IsExpectPallet                             bool
	AsExpectPalletIndex0                       types.UCompact
	AsExpectPalletName1                        []byte
	AsExpectPalletModuleName2                  []byte
	AsExpectPalletCrateMajor3                  types.UCompact
	AsExpectPalletMinCrateMinor4               types.UCompact
	IsReportTransactStatus                     bool
	AsReportTransactStatusField0               QueryResponseInfo
	IsClearTransactStatus                      bool
	IsUniversalOrigin                          bool
	AsUniversalOriginField0                    *Junction
	IsExportMessage                            bool
	AsExportMessageNetwork0                    NetworkId
	AsExportMessageDestination1                Junctions
	AsExportMessageXcm2                        []Instruction
	IsLockAsset                                bool
	AsLockAssetAsset0                          Asset
	AsLockAssetUnlocker1                       Location
	IsUnlockAsset                              bool
	AsUnlockAssetAsset0                        Asset
	AsUnlockAssetTarget1                       Location
	IsNoteUnlockable                           bool
	AsNoteUnlockableAsset0                     Asset
	AsNoteUnlockableOwner1                     Location
	IsRequestUnlock                            bool
	AsRequestUnlockAsset0                      Asset
	AsRequestUnlockLocker1                     Location
	IsSetFeesMode                              bool
	AsSetFeesModeJitWithdraw0                  bool
	IsSetTopic                                 bool
	AsSetTopicField0                           [32]byte
	IsClearTopic                               bool
	IsAliasOrigin                              bool
	AsAliasOriginField0                        Location
	IsUnpaidExecution                          bool
	AsUnpaidExecutionWeightLimit0              WeightLimit
	AsUnpaidExecutionCheckOrigin1              OptionTLocation
}

func (ty Instruction5) Encode(encoder scale.Encoder) (err error) {
	if ty.IsWithdrawAsset {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWithdrawAssetField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReserveAssetDeposited {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReserveAssetDepositedField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReceiveTeleportedAsset {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReceiveTeleportedAssetField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsQueryResponse {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryResponseQueryId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryResponseResponse1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryResponseMaxWeight2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryResponseQuerier3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTransferAsset {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferAssetAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferAssetBeneficiary1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTransferReserveAsset {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferReserveAssetAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferReserveAssetDest1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferReserveAssetXcm2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTransact {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransactOriginKind0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransactRequireWeightAtMost1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransactCall2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsHrmpNewChannelOpenRequest {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpNewChannelOpenRequestSender0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpNewChannelOpenRequestMaxMessageSize1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpNewChannelOpenRequestMaxCapacity2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsHrmpChannelAccepted {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpChannelAcceptedRecipient0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsHrmpChannelClosing {
		err = encoder.PushByte(9)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpChannelClosingInitiator0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpChannelClosingSender1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsHrmpChannelClosingRecipient2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsClearOrigin {
		err = encoder.PushByte(10)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDescendOrigin {
		err = encoder.PushByte(11)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDescendOriginField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReportError {
		err = encoder.PushByte(12)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReportErrorField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDepositAsset {
		err = encoder.PushByte(13)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositAssetAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositAssetBeneficiary1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDepositReserveAsset {
		err = encoder.PushByte(14)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositReserveAssetAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositReserveAssetDest1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositReserveAssetXcm2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExchangeAsset {
		err = encoder.PushByte(15)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExchangeAssetGive0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExchangeAssetWant1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExchangeAssetMaximal2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsInitiateReserveWithdraw {
		err = encoder.PushByte(16)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateReserveWithdrawAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateReserveWithdrawReserve1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateReserveWithdrawXcm2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsInitiateTeleport {
		err = encoder.PushByte(17)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateTeleportAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateTeleportDest1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInitiateTeleportXcm2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReportHolding {
		err = encoder.PushByte(18)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReportHoldingResponseInfo0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReportHoldingAssets1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBuyExecution {
		err = encoder.PushByte(19)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBuyExecutionFees0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBuyExecutionWeightLimit1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsRefundSurplus {
		err = encoder.PushByte(20)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetErrorHandler {
		err = encoder.PushByte(21)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetErrorHandlerField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetAppendix {
		err = encoder.PushByte(22)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetAppendixField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsClearError {
		err = encoder.PushByte(23)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsClaimAsset {
		err = encoder.PushByte(24)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClaimAssetAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClaimAssetTicket1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTrap {
		err = encoder.PushByte(25)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTrapField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSubscribeVersion {
		err = encoder.PushByte(26)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSubscribeVersionQueryId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSubscribeVersionMaxResponseWeight1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnsubscribeVersion {
		err = encoder.PushByte(27)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBurnAsset {
		err = encoder.PushByte(28)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBurnAssetField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExpectAsset {
		err = encoder.PushByte(29)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectAssetField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExpectOrigin {
		err = encoder.PushByte(30)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectOriginField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExpectError {
		err = encoder.PushByte(31)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectErrorField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExpectTransactStatus {
		err = encoder.PushByte(32)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectTransactStatusField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsQueryPallet {
		err = encoder.PushByte(33)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryPalletModuleName0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsQueryPalletResponseInfo1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExpectPallet {
		err = encoder.PushByte(34)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectPalletIndex0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectPalletName1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectPalletModuleName2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectPalletCrateMajor3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExpectPalletMinCrateMinor4)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReportTransactStatus {
		err = encoder.PushByte(35)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReportTransactStatusField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsClearTransactStatus {
		err = encoder.PushByte(36)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUniversalOrigin {
		err = encoder.PushByte(37)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUniversalOriginField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExportMessage {
		err = encoder.PushByte(38)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExportMessageNetwork0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExportMessageDestination1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExportMessageXcm2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsLockAsset {
		err = encoder.PushByte(39)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLockAssetAsset0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLockAssetUnlocker1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnlockAsset {
		err = encoder.PushByte(40)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnlockAssetAsset0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnlockAssetTarget1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNoteUnlockable {
		err = encoder.PushByte(41)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNoteUnlockableAsset0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNoteUnlockableOwner1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsRequestUnlock {
		err = encoder.PushByte(42)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsRequestUnlockAsset0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsRequestUnlockLocker1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetFeesMode {
		err = encoder.PushByte(43)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetFeesModeJitWithdraw0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetTopic {
		err = encoder.PushByte(44)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetTopicField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsClearTopic {
		err = encoder.PushByte(45)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAliasOrigin {
		err = encoder.PushByte(46)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAliasOriginField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnpaidExecution {
		err = encoder.PushByte(47)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnpaidExecutionWeightLimit0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnpaidExecutionCheckOrigin1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Instruction5) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsWithdrawAsset = true
		err = decoder.Decode(&ty.AsWithdrawAssetField0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsReserveAssetDeposited = true
		err = decoder.Decode(&ty.AsReserveAssetDepositedField0)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsReceiveTeleportedAsset = true
		err = decoder.Decode(&ty.AsReceiveTeleportedAssetField0)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsQueryResponse = true
		err = decoder.Decode(&ty.AsQueryResponseQueryId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsQueryResponseResponse1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsQueryResponseMaxWeight2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsQueryResponseQuerier3)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsTransferAsset = true
		err = decoder.Decode(&ty.AsTransferAssetAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferAssetBeneficiary1)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsTransferReserveAsset = true
		err = decoder.Decode(&ty.AsTransferReserveAssetAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferReserveAssetDest1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferReserveAssetXcm2)
		if err != nil {
			return err
		}
		return
	case 6:
		ty.IsTransact = true
		err = decoder.Decode(&ty.AsTransactOriginKind0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransactRequireWeightAtMost1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransactCall2)
		if err != nil {
			return err
		}
		return
	case 7:
		ty.IsHrmpNewChannelOpenRequest = true
		err = decoder.Decode(&ty.AsHrmpNewChannelOpenRequestSender0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsHrmpNewChannelOpenRequestMaxMessageSize1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsHrmpNewChannelOpenRequestMaxCapacity2)
		if err != nil {
			return err
		}
		return
	case 8:
		ty.IsHrmpChannelAccepted = true
		err = decoder.Decode(&ty.AsHrmpChannelAcceptedRecipient0)
		if err != nil {
			return err
		}
		return
	case 9:
		ty.IsHrmpChannelClosing = true
		err = decoder.Decode(&ty.AsHrmpChannelClosingInitiator0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsHrmpChannelClosingSender1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsHrmpChannelClosingRecipient2)
		if err != nil {
			return err
		}
		return
	case 10:
		ty.IsClearOrigin = true
		return
	case 11:
		ty.IsDescendOrigin = true
		var tmp Junctions
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsDescendOriginField0 = &tmp
		return
	case 12:
		ty.IsReportError = true
		err = decoder.Decode(&ty.AsReportErrorField0)
		if err != nil {
			return err
		}
		return
	case 13:
		ty.IsDepositAsset = true
		err = decoder.Decode(&ty.AsDepositAssetAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDepositAssetBeneficiary1)
		if err != nil {
			return err
		}
		return
	case 14:
		ty.IsDepositReserveAsset = true
		err = decoder.Decode(&ty.AsDepositReserveAssetAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDepositReserveAssetDest1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDepositReserveAssetXcm2)
		if err != nil {
			return err
		}
		return
	case 15:
		ty.IsExchangeAsset = true
		err = decoder.Decode(&ty.AsExchangeAssetGive0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExchangeAssetWant1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExchangeAssetMaximal2)
		if err != nil {
			return err
		}
		return
	case 16:
		ty.IsInitiateReserveWithdraw = true
		err = decoder.Decode(&ty.AsInitiateReserveWithdrawAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInitiateReserveWithdrawReserve1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInitiateReserveWithdrawXcm2)
		if err != nil {
			return err
		}
		return
	case 17:
		ty.IsInitiateTeleport = true
		err = decoder.Decode(&ty.AsInitiateTeleportAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInitiateTeleportDest1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInitiateTeleportXcm2)
		if err != nil {
			return err
		}
		return
	case 18:
		ty.IsReportHolding = true
		err = decoder.Decode(&ty.AsReportHoldingResponseInfo0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsReportHoldingAssets1)
		if err != nil {
			return err
		}
		return
	case 19:
		ty.IsBuyExecution = true
		err = decoder.Decode(&ty.AsBuyExecutionFees0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsBuyExecutionWeightLimit1)
		if err != nil {
			return err
		}
		return
	case 20:
		ty.IsRefundSurplus = true
		return
	case 21:
		ty.IsSetErrorHandler = true
		err = decoder.Decode(&ty.AsSetErrorHandlerField0)
		if err != nil {
			return err
		}
		return
	case 22:
		ty.IsSetAppendix = true
		err = decoder.Decode(&ty.AsSetAppendixField0)
		if err != nil {
			return err
		}
		return
	case 23:
		ty.IsClearError = true
		return
	case 24:
		ty.IsClaimAsset = true
		err = decoder.Decode(&ty.AsClaimAssetAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsClaimAssetTicket1)
		if err != nil {
			return err
		}
		return
	case 25:
		ty.IsTrap = true
		err = decoder.Decode(&ty.AsTrapField0)
		if err != nil {
			return err
		}
		return
	case 26:
		ty.IsSubscribeVersion = true
		err = decoder.Decode(&ty.AsSubscribeVersionQueryId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSubscribeVersionMaxResponseWeight1)
		if err != nil {
			return err
		}
		return
	case 27:
		ty.IsUnsubscribeVersion = true
		return
	case 28:
		ty.IsBurnAsset = true
		err = decoder.Decode(&ty.AsBurnAssetField0)
		if err != nil {
			return err
		}
		return
	case 29:
		ty.IsExpectAsset = true
		err = decoder.Decode(&ty.AsExpectAssetField0)
		if err != nil {
			return err
		}
		return
	case 30:
		ty.IsExpectOrigin = true
		var tmp OptionTLocation
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsExpectOriginField0 = &tmp
		return
	case 31:
		ty.IsExpectError = true
		var tmp OptionTTupleOfUint32XcmV3TraitsError
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsExpectErrorField0 = &tmp
		return
	case 32:
		ty.IsExpectTransactStatus = true
		var tmp MaybeErrorCode
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsExpectTransactStatusField0 = &tmp
		return
	case 33:
		ty.IsQueryPallet = true
		err = decoder.Decode(&ty.AsQueryPalletModuleName0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsQueryPalletResponseInfo1)
		if err != nil {
			return err
		}
		return
	case 34:
		ty.IsExpectPallet = true
		err = decoder.Decode(&ty.AsExpectPalletIndex0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExpectPalletName1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExpectPalletModuleName2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExpectPalletCrateMajor3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExpectPalletMinCrateMinor4)
		if err != nil {
			return err
		}
		return
	case 35:
		ty.IsReportTransactStatus = true
		err = decoder.Decode(&ty.AsReportTransactStatusField0)
		if err != nil {
			return err
		}
		return
	case 36:
		ty.IsClearTransactStatus = true
		return
	case 37:
		ty.IsUniversalOrigin = true
		var tmp Junction
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsUniversalOriginField0 = &tmp
		return
	case 38:
		ty.IsExportMessage = true
		err = decoder.Decode(&ty.AsExportMessageNetwork0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExportMessageDestination1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExportMessageXcm2)
		if err != nil {
			return err
		}
		return
	case 39:
		ty.IsLockAsset = true
		err = decoder.Decode(&ty.AsLockAssetAsset0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsLockAssetUnlocker1)
		if err != nil {
			return err
		}
		return
	case 40:
		ty.IsUnlockAsset = true
		err = decoder.Decode(&ty.AsUnlockAssetAsset0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUnlockAssetTarget1)
		if err != nil {
			return err
		}
		return
	case 41:
		ty.IsNoteUnlockable = true
		err = decoder.Decode(&ty.AsNoteUnlockableAsset0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsNoteUnlockableOwner1)
		if err != nil {
			return err
		}
		return
	case 42:
		ty.IsRequestUnlock = true
		err = decoder.Decode(&ty.AsRequestUnlockAsset0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsRequestUnlockLocker1)
		if err != nil {
			return err
		}
		return
	case 43:
		ty.IsSetFeesMode = true
		err = decoder.Decode(&ty.AsSetFeesModeJitWithdraw0)
		if err != nil {
			return err
		}
		return
	case 44:
		ty.IsSetTopic = true
		err = decoder.Decode(&ty.AsSetTopicField0)
		if err != nil {
			return err
		}
		return
	case 45:
		ty.IsClearTopic = true
		return
	case 46:
		ty.IsAliasOrigin = true
		err = decoder.Decode(&ty.AsAliasOriginField0)
		if err != nil {
			return err
		}
		return
	case 47:
		ty.IsUnpaidExecution = true
		err = decoder.Decode(&ty.AsUnpaidExecutionWeightLimit0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUnpaidExecutionCheckOrigin1)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Instruction5) Variant() (uint8, error) {
	if ty.IsWithdrawAsset {
		return 0, nil
	}
	if ty.IsReserveAssetDeposited {
		return 1, nil
	}
	if ty.IsReceiveTeleportedAsset {
		return 2, nil
	}
	if ty.IsQueryResponse {
		return 3, nil
	}
	if ty.IsTransferAsset {
		return 4, nil
	}
	if ty.IsTransferReserveAsset {
		return 5, nil
	}
	if ty.IsTransact {
		return 6, nil
	}
	if ty.IsHrmpNewChannelOpenRequest {
		return 7, nil
	}
	if ty.IsHrmpChannelAccepted {
		return 8, nil
	}
	if ty.IsHrmpChannelClosing {
		return 9, nil
	}
	if ty.IsClearOrigin {
		return 10, nil
	}
	if ty.IsDescendOrigin {
		return 11, nil
	}
	if ty.IsReportError {
		return 12, nil
	}
	if ty.IsDepositAsset {
		return 13, nil
	}
	if ty.IsDepositReserveAsset {
		return 14, nil
	}
	if ty.IsExchangeAsset {
		return 15, nil
	}
	if ty.IsInitiateReserveWithdraw {
		return 16, nil
	}
	if ty.IsInitiateTeleport {
		return 17, nil
	}
	if ty.IsReportHolding {
		return 18, nil
	}
	if ty.IsBuyExecution {
		return 19, nil
	}
	if ty.IsRefundSurplus {
		return 20, nil
	}
	if ty.IsSetErrorHandler {
		return 21, nil
	}
	if ty.IsSetAppendix {
		return 22, nil
	}
	if ty.IsClearError {
		return 23, nil
	}
	if ty.IsClaimAsset {
		return 24, nil
	}
	if ty.IsTrap {
		return 25, nil
	}
	if ty.IsSubscribeVersion {
		return 26, nil
	}
	if ty.IsUnsubscribeVersion {
		return 27, nil
	}
	if ty.IsBurnAsset {
		return 28, nil
	}
	if ty.IsExpectAsset {
		return 29, nil
	}
	if ty.IsExpectOrigin {
		return 30, nil
	}
	if ty.IsExpectError {
		return 31, nil
	}
	if ty.IsExpectTransactStatus {
		return 32, nil
	}
	if ty.IsQueryPallet {
		return 33, nil
	}
	if ty.IsExpectPallet {
		return 34, nil
	}
	if ty.IsReportTransactStatus {
		return 35, nil
	}
	if ty.IsClearTransactStatus {
		return 36, nil
	}
	if ty.IsUniversalOrigin {
		return 37, nil
	}
	if ty.IsExportMessage {
		return 38, nil
	}
	if ty.IsLockAsset {
		return 39, nil
	}
	if ty.IsUnlockAsset {
		return 40, nil
	}
	if ty.IsNoteUnlockable {
		return 41, nil
	}
	if ty.IsRequestUnlock {
		return 42, nil
	}
	if ty.IsSetFeesMode {
		return 43, nil
	}
	if ty.IsSetTopic {
		return 44, nil
	}
	if ty.IsClearTopic {
		return 45, nil
	}
	if ty.IsAliasOrigin {
		return 46, nil
	}
	if ty.IsUnpaidExecution {
		return 47, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Instruction5) MarshalJSON() ([]byte, error) {
	if ty.IsWithdrawAsset {
		m := map[string]interface{}{"Instruction5::WithdrawAsset": ty.AsWithdrawAssetField0}
		return json.Marshal(m)
	}
	if ty.IsReserveAssetDeposited {
		m := map[string]interface{}{"Instruction5::ReserveAssetDeposited": ty.AsReserveAssetDepositedField0}
		return json.Marshal(m)
	}
	if ty.IsReceiveTeleportedAsset {
		m := map[string]interface{}{"Instruction5::ReceiveTeleportedAsset": ty.AsReceiveTeleportedAssetField0}
		return json.Marshal(m)
	}
	if ty.IsQueryResponse {
		m := map[string]interface{}{"Instruction5::QueryResponse": map[string]interface{}{
			"AsQueryResponseMaxWeight2": ty.AsQueryResponseMaxWeight2,
			"AsQueryResponseQuerier3":   ty.AsQueryResponseQuerier3,
			"AsQueryResponseQueryId0":   ty.AsQueryResponseQueryId0,
			"AsQueryResponseResponse1":  ty.AsQueryResponseResponse1,
		}}
		return json.Marshal(m)
	}
	if ty.IsTransferAsset {
		m := map[string]interface{}{"Instruction5::TransferAsset": map[string]interface{}{
			"AsTransferAssetAssets0":      ty.AsTransferAssetAssets0,
			"AsTransferAssetBeneficiary1": ty.AsTransferAssetBeneficiary1,
		}}
		return json.Marshal(m)
	}
	if ty.IsTransferReserveAsset {
		m := map[string]interface{}{"Instruction5::TransferReserveAsset": map[string]interface{}{
			"AsTransferReserveAssetAssets0": ty.AsTransferReserveAssetAssets0,
			"AsTransferReserveAssetDest1":   ty.AsTransferReserveAssetDest1,
			"AsTransferReserveAssetXcm2":    ty.AsTransferReserveAssetXcm2,
		}}
		return json.Marshal(m)
	}
	if ty.IsTransact {
		m := map[string]interface{}{"Instruction5::Transact": map[string]interface{}{
			"AsTransactCall2":                ty.AsTransactCall2,
			"AsTransactOriginKind0":          ty.AsTransactOriginKind0,
			"AsTransactRequireWeightAtMost1": ty.AsTransactRequireWeightAtMost1,
		}}
		return json.Marshal(m)
	}
	if ty.IsHrmpNewChannelOpenRequest {
		m := map[string]interface{}{"Instruction5::HrmpNewChannelOpenRequest": map[string]interface{}{
			"AsHrmpNewChannelOpenRequestMaxCapacity2":    ty.AsHrmpNewChannelOpenRequestMaxCapacity2,
			"AsHrmpNewChannelOpenRequestMaxMessageSize1": ty.AsHrmpNewChannelOpenRequestMaxMessageSize1,
			"AsHrmpNewChannelOpenRequestSender0":         ty.AsHrmpNewChannelOpenRequestSender0,
		}}
		return json.Marshal(m)
	}
	if ty.IsHrmpChannelAccepted {
		m := map[string]interface{}{"Instruction5::HrmpChannelAccepted": ty.AsHrmpChannelAcceptedRecipient0}
		return json.Marshal(m)
	}
	if ty.IsHrmpChannelClosing {
		m := map[string]interface{}{"Instruction5::HrmpChannelClosing": map[string]interface{}{
			"AsHrmpChannelClosingInitiator0": ty.AsHrmpChannelClosingInitiator0,
			"AsHrmpChannelClosingRecipient2": ty.AsHrmpChannelClosingRecipient2,
			"AsHrmpChannelClosingSender1":    ty.AsHrmpChannelClosingSender1,
		}}
		return json.Marshal(m)
	}
	if ty.IsClearOrigin {
		return json.Marshal("Instruction5::ClearOrigin")
	}
	if ty.IsDescendOrigin {
		m := map[string]interface{}{"Instruction5::DescendOrigin": ty.AsDescendOriginField0}
		return json.Marshal(m)
	}
	if ty.IsReportError {
		m := map[string]interface{}{"Instruction5::ReportError": ty.AsReportErrorField0}
		return json.Marshal(m)
	}
	if ty.IsDepositAsset {
		m := map[string]interface{}{"Instruction5::DepositAsset": map[string]interface{}{
			"AsDepositAssetAssets0":      ty.AsDepositAssetAssets0,
			"AsDepositAssetBeneficiary1": ty.AsDepositAssetBeneficiary1,
		}}
		return json.Marshal(m)
	}
	if ty.IsDepositReserveAsset {
		m := map[string]interface{}{"Instruction5::DepositReserveAsset": map[string]interface{}{
			"AsDepositReserveAssetAssets0": ty.AsDepositReserveAssetAssets0,
			"AsDepositReserveAssetDest1":   ty.AsDepositReserveAssetDest1,
			"AsDepositReserveAssetXcm2":    ty.AsDepositReserveAssetXcm2,
		}}
		return json.Marshal(m)
	}
	if ty.IsExchangeAsset {
		m := map[string]interface{}{"Instruction5::ExchangeAsset": map[string]interface{}{
			"AsExchangeAssetGive0":    ty.AsExchangeAssetGive0,
			"AsExchangeAssetMaximal2": ty.AsExchangeAssetMaximal2,
			"AsExchangeAssetWant1":    ty.AsExchangeAssetWant1,
		}}
		return json.Marshal(m)
	}
	if ty.IsInitiateReserveWithdraw {
		m := map[string]interface{}{"Instruction5::InitiateReserveWithdraw": map[string]interface{}{
			"AsInitiateReserveWithdrawAssets0":  ty.AsInitiateReserveWithdrawAssets0,
			"AsInitiateReserveWithdrawReserve1": ty.AsInitiateReserveWithdrawReserve1,
			"AsInitiateReserveWithdrawXcm2":     ty.AsInitiateReserveWithdrawXcm2,
		}}
		return json.Marshal(m)
	}
	if ty.IsInitiateTeleport {
		m := map[string]interface{}{"Instruction5::InitiateTeleport": map[string]interface{}{
			"AsInitiateTeleportAssets0": ty.AsInitiateTeleportAssets0,
			"AsInitiateTeleportDest1":   ty.AsInitiateTeleportDest1,
			"AsInitiateTeleportXcm2":    ty.AsInitiateTeleportXcm2,
		}}
		return json.Marshal(m)
	}
	if ty.IsReportHolding {
		m := map[string]interface{}{"Instruction5::ReportHolding": map[string]interface{}{
			"AsReportHoldingAssets1":       ty.AsReportHoldingAssets1,
			"AsReportHoldingResponseInfo0": ty.AsReportHoldingResponseInfo0,
		}}
		return json.Marshal(m)
	}
	if ty.IsBuyExecution {
		m := map[string]interface{}{"Instruction5::BuyExecution": map[string]interface{}{
			"AsBuyExecutionFees0":        ty.AsBuyExecutionFees0,
			"AsBuyExecutionWeightLimit1": ty.AsBuyExecutionWeightLimit1,
		}}
		return json.Marshal(m)
	}
	if ty.IsRefundSurplus {
		return json.Marshal("Instruction5::RefundSurplus")
	}
	if ty.IsSetErrorHandler {
		m := map[string]interface{}{"Instruction5::SetErrorHandler": ty.AsSetErrorHandlerField0}
		return json.Marshal(m)
	}
	if ty.IsSetAppendix {
		m := map[string]interface{}{"Instruction5::SetAppendix": ty.AsSetAppendixField0}
		return json.Marshal(m)
	}
	if ty.IsClearError {
		return json.Marshal("Instruction5::ClearError")
	}
	if ty.IsClaimAsset {
		m := map[string]interface{}{"Instruction5::ClaimAsset": map[string]interface{}{
			"AsClaimAssetAssets0": ty.AsClaimAssetAssets0,
			"AsClaimAssetTicket1": ty.AsClaimAssetTicket1,
		}}
		return json.Marshal(m)
	}
	if ty.IsTrap {
		m := map[string]interface{}{"Instruction5::Trap": ty.AsTrapField0}
		return json.Marshal(m)
	}
	if ty.IsSubscribeVersion {
		m := map[string]interface{}{"Instruction5::SubscribeVersion": map[string]interface{}{
			"AsSubscribeVersionMaxResponseWeight1": ty.AsSubscribeVersionMaxResponseWeight1,
			"AsSubscribeVersionQueryId0":           ty.AsSubscribeVersionQueryId0,
		}}
		return json.Marshal(m)
	}
	if ty.IsUnsubscribeVersion {
		return json.Marshal("Instruction5::UnsubscribeVersion")
	}
	if ty.IsBurnAsset {
		m := map[string]interface{}{"Instruction5::BurnAsset": ty.AsBurnAssetField0}
		return json.Marshal(m)
	}
	if ty.IsExpectAsset {
		m := map[string]interface{}{"Instruction5::ExpectAsset": ty.AsExpectAssetField0}
		return json.Marshal(m)
	}
	if ty.IsExpectOrigin {
		m := map[string]interface{}{"Instruction5::ExpectOrigin": ty.AsExpectOriginField0}
		return json.Marshal(m)
	}
	if ty.IsExpectError {
		m := map[string]interface{}{"Instruction5::ExpectError": ty.AsExpectErrorField0}
		return json.Marshal(m)
	}
	if ty.IsExpectTransactStatus {
		m := map[string]interface{}{"Instruction5::ExpectTransactStatus": ty.AsExpectTransactStatusField0}
		return json.Marshal(m)
	}
	if ty.IsQueryPallet {
		m := map[string]interface{}{"Instruction5::QueryPallet": map[string]interface{}{
			"AsQueryPalletModuleName0":   ty.AsQueryPalletModuleName0,
			"AsQueryPalletResponseInfo1": ty.AsQueryPalletResponseInfo1,
		}}
		return json.Marshal(m)
	}
	if ty.IsExpectPallet {
		m := map[string]interface{}{"Instruction5::ExpectPallet": map[string]interface{}{
			"AsExpectPalletCrateMajor3":    ty.AsExpectPalletCrateMajor3,
			"AsExpectPalletIndex0":         ty.AsExpectPalletIndex0,
			"AsExpectPalletMinCrateMinor4": ty.AsExpectPalletMinCrateMinor4,
			"AsExpectPalletModuleName2":    ty.AsExpectPalletModuleName2,
			"AsExpectPalletName1":          ty.AsExpectPalletName1,
		}}
		return json.Marshal(m)
	}
	if ty.IsReportTransactStatus {
		m := map[string]interface{}{"Instruction5::ReportTransactStatus": ty.AsReportTransactStatusField0}
		return json.Marshal(m)
	}
	if ty.IsClearTransactStatus {
		return json.Marshal("Instruction5::ClearTransactStatus")
	}
	if ty.IsUniversalOrigin {
		m := map[string]interface{}{"Instruction5::UniversalOrigin": ty.AsUniversalOriginField0}
		return json.Marshal(m)
	}
	if ty.IsExportMessage {
		m := map[string]interface{}{"Instruction5::ExportMessage": map[string]interface{}{
			"AsExportMessageDestination1": ty.AsExportMessageDestination1,
			"AsExportMessageNetwork0":     ty.AsExportMessageNetwork0,
			"AsExportMessageXcm2":         ty.AsExportMessageXcm2,
		}}
		return json.Marshal(m)
	}
	if ty.IsLockAsset {
		m := map[string]interface{}{"Instruction5::LockAsset": map[string]interface{}{
			"AsLockAssetAsset0":    ty.AsLockAssetAsset0,
			"AsLockAssetUnlocker1": ty.AsLockAssetUnlocker1,
		}}
		return json.Marshal(m)
	}
	if ty.IsUnlockAsset {
		m := map[string]interface{}{"Instruction5::UnlockAsset": map[string]interface{}{
			"AsUnlockAssetAsset0":  ty.AsUnlockAssetAsset0,
			"AsUnlockAssetTarget1": ty.AsUnlockAssetTarget1,
		}}
		return json.Marshal(m)
	}
	if ty.IsNoteUnlockable {
		m := map[string]interface{}{"Instruction5::NoteUnlockable": map[string]interface{}{
			"AsNoteUnlockableAsset0": ty.AsNoteUnlockableAsset0,
			"AsNoteUnlockableOwner1": ty.AsNoteUnlockableOwner1,
		}}
		return json.Marshal(m)
	}
	if ty.IsRequestUnlock {
		m := map[string]interface{}{"Instruction5::RequestUnlock": map[string]interface{}{
			"AsRequestUnlockAsset0":  ty.AsRequestUnlockAsset0,
			"AsRequestUnlockLocker1": ty.AsRequestUnlockLocker1,
		}}
		return json.Marshal(m)
	}
	if ty.IsSetFeesMode {
		m := map[string]interface{}{"Instruction5::SetFeesMode": ty.AsSetFeesModeJitWithdraw0}
		return json.Marshal(m)
	}
	if ty.IsSetTopic {
		m := map[string]interface{}{"Instruction5::SetTopic": ty.AsSetTopicField0}
		return json.Marshal(m)
	}
	if ty.IsClearTopic {
		return json.Marshal("Instruction5::ClearTopic")
	}
	if ty.IsAliasOrigin {
		m := map[string]interface{}{"Instruction5::AliasOrigin": ty.AsAliasOriginField0}
		return json.Marshal(m)
	}
	if ty.IsUnpaidExecution {
		m := map[string]interface{}{"Instruction5::UnpaidExecution": map[string]interface{}{
			"AsUnpaidExecutionCheckOrigin1": ty.AsUnpaidExecutionCheckOrigin1,
			"AsUnpaidExecutionWeightLimit0": ty.AsUnpaidExecutionWeightLimit0,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated XcmVersionedXcm with id=269
type VersionedXcm1 struct {
	IsV2       bool
	AsV2Field0 []Instruction3
	IsV3       bool
	AsV3Field0 []Instruction4
	IsV4       bool
	AsV4Field0 []Instruction5
}

func (ty VersionedXcm1) Encode(encoder scale.Encoder) (err error) {
	if ty.IsV2 {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsV2Field0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsV3 {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsV3Field0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsV4 {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsV4Field0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *VersionedXcm1) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 2:
		ty.IsV2 = true
		err = decoder.Decode(&ty.AsV2Field0)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsV3 = true
		err = decoder.Decode(&ty.AsV3Field0)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsV4 = true
		err = decoder.Decode(&ty.AsV4Field0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *VersionedXcm1) Variant() (uint8, error) {
	if ty.IsV2 {
		return 2, nil
	}
	if ty.IsV3 {
		return 3, nil
	}
	if ty.IsV4 {
		return 4, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty VersionedXcm1) MarshalJSON() ([]byte, error) {
	if ty.IsV2 {
		m := map[string]interface{}{"VersionedXcm1::V2": ty.AsV2Field0}
		return json.Marshal(m)
	}
	if ty.IsV3 {
		m := map[string]interface{}{"VersionedXcm1::V3": ty.AsV3Field0}
		return json.Marshal(m)
	}
	if ty.IsV4 {
		m := map[string]interface{}{"VersionedXcm1::V4": ty.AsV4Field0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated Option with id=182
type OptionTUint32 struct {
	IsNone       bool
	IsSome       bool
	AsSomeField0 uint32
}

func (ty OptionTUint32) Encode(encoder scale.Encoder) (err error) {
	if ty.IsNone {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSome {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSomeField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *OptionTUint32) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsNone = true
		return
	case 1:
		ty.IsSome = true
		err = decoder.Decode(&ty.AsSomeField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *OptionTUint32) Variant() (uint8, error) {
	if ty.IsNone {
		return 0, nil
	}
	if ty.IsSome {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty OptionTUint32) MarshalJSON() ([]byte, error) {
	if ty.IsNone {
		return json.Marshal("OptionTUint32::None")
	}
	if ty.IsSome {
		m := map[string]interface{}{"OptionTUint32::Some": ty.AsSomeField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated PalletXcmPalletCall with id=243
type PalletXcmPalletCall struct {
	IsSend                                      bool
	AsSendDest0                                 *VersionedLocation
	AsSendMessage1                              *VersionedXcm
	IsTeleportAssets                            bool
	AsTeleportAssetsDest0                       *VersionedLocation
	AsTeleportAssetsBeneficiary1                *VersionedLocation
	AsTeleportAssetsAssets2                     *VersionedAssets
	AsTeleportAssetsFeeAssetItem3               uint32
	IsReserveTransferAssets                     bool
	AsReserveTransferAssetsDest0                *VersionedLocation
	AsReserveTransferAssetsBeneficiary1         *VersionedLocation
	AsReserveTransferAssetsAssets2              *VersionedAssets
	AsReserveTransferAssetsFeeAssetItem3        uint32
	IsExecute                                   bool
	AsExecuteMessage0                           *VersionedXcm1
	AsExecuteMaxWeight1                         Weight
	IsForceXcmVersion                           bool
	AsForceXcmVersionLocation0                  *Location
	AsForceXcmVersionVersion1                   uint32
	IsForceDefaultXcmVersion                    bool
	AsForceDefaultXcmVersionMaybeXcmVersion0    *OptionTUint32
	IsForceSubscribeVersionNotify               bool
	AsForceSubscribeVersionNotifyLocation0      *VersionedLocation
	IsForceUnsubscribeVersionNotify             bool
	AsForceUnsubscribeVersionNotifyLocation0    *VersionedLocation
	IsLimitedReserveTransferAssets              bool
	AsLimitedReserveTransferAssetsDest0         *VersionedLocation
	AsLimitedReserveTransferAssetsBeneficiary1  *VersionedLocation
	AsLimitedReserveTransferAssetsAssets2       *VersionedAssets
	AsLimitedReserveTransferAssetsFeeAssetItem3 uint32
	AsLimitedReserveTransferAssetsWeightLimit4  WeightLimit
	IsLimitedTeleportAssets                     bool
	AsLimitedTeleportAssetsDest0                *VersionedLocation
	AsLimitedTeleportAssetsBeneficiary1         *VersionedLocation
	AsLimitedTeleportAssetsAssets2              *VersionedAssets
	AsLimitedTeleportAssetsFeeAssetItem3        uint32
	AsLimitedTeleportAssetsWeightLimit4         WeightLimit
	IsForceSuspension                           bool
	AsForceSuspensionSuspended0                 bool
	IsTransferAssets                            bool
	AsTransferAssetsDest0                       *VersionedLocation
	AsTransferAssetsBeneficiary1                *VersionedLocation
	AsTransferAssetsAssets2                     *VersionedAssets
	AsTransferAssetsFeeAssetItem3               uint32
	AsTransferAssetsWeightLimit4                WeightLimit
	IsClaimAssets                               bool
	AsClaimAssetsAssets0                        *VersionedAssets
	AsClaimAssetsBeneficiary1                   *VersionedLocation
	IsExecuteBlob                               bool
	AsExecuteBlobEncodedMessage0                []byte
	AsExecuteBlobMaxWeight1                     Weight
	IsSendBlob                                  bool
	AsSendBlobDest0                             *VersionedLocation
	AsSendBlobEncodedMessage1                   []byte
}

func (ty PalletXcmPalletCall) Encode(encoder scale.Encoder) (err error) {
	if ty.IsSend {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSendDest0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSendMessage1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTeleportAssets {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTeleportAssetsDest0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTeleportAssetsBeneficiary1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTeleportAssetsAssets2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTeleportAssetsFeeAssetItem3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReserveTransferAssets {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReserveTransferAssetsDest0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReserveTransferAssetsBeneficiary1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReserveTransferAssetsAssets2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReserveTransferAssetsFeeAssetItem3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExecute {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExecuteMessage0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExecuteMaxWeight1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsForceXcmVersion {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsForceXcmVersionLocation0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsForceXcmVersionVersion1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsForceDefaultXcmVersion {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsForceDefaultXcmVersionMaybeXcmVersion0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsForceSubscribeVersionNotify {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsForceSubscribeVersionNotifyLocation0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsForceUnsubscribeVersionNotify {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsForceUnsubscribeVersionNotifyLocation0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsLimitedReserveTransferAssets {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLimitedReserveTransferAssetsDest0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLimitedReserveTransferAssetsBeneficiary1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLimitedReserveTransferAssetsAssets2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLimitedReserveTransferAssetsFeeAssetItem3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLimitedReserveTransferAssetsWeightLimit4)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsLimitedTeleportAssets {
		err = encoder.PushByte(9)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLimitedTeleportAssetsDest0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLimitedTeleportAssetsBeneficiary1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLimitedTeleportAssetsAssets2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLimitedTeleportAssetsFeeAssetItem3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLimitedTeleportAssetsWeightLimit4)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsForceSuspension {
		err = encoder.PushByte(10)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsForceSuspensionSuspended0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTransferAssets {
		err = encoder.PushByte(11)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferAssetsDest0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferAssetsBeneficiary1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferAssetsAssets2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferAssetsFeeAssetItem3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferAssetsWeightLimit4)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsClaimAssets {
		err = encoder.PushByte(12)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClaimAssetsAssets0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClaimAssetsBeneficiary1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExecuteBlob {
		err = encoder.PushByte(13)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExecuteBlobEncodedMessage0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExecuteBlobMaxWeight1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSendBlob {
		err = encoder.PushByte(14)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSendBlobDest0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSendBlobEncodedMessage1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *PalletXcmPalletCall) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsSend = true
		err = decoder.Decode(&ty.AsSendDest0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSendMessage1)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsTeleportAssets = true
		err = decoder.Decode(&ty.AsTeleportAssetsDest0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTeleportAssetsBeneficiary1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTeleportAssetsAssets2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTeleportAssetsFeeAssetItem3)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsReserveTransferAssets = true
		err = decoder.Decode(&ty.AsReserveTransferAssetsDest0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsReserveTransferAssetsBeneficiary1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsReserveTransferAssetsAssets2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsReserveTransferAssetsFeeAssetItem3)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsExecute = true
		err = decoder.Decode(&ty.AsExecuteMessage0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExecuteMaxWeight1)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsForceXcmVersion = true
		err = decoder.Decode(&ty.AsForceXcmVersionLocation0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsForceXcmVersionVersion1)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsForceDefaultXcmVersion = true
		var tmp OptionTUint32
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsForceDefaultXcmVersionMaybeXcmVersion0 = &tmp
		return
	case 6:
		ty.IsForceSubscribeVersionNotify = true
		var tmp VersionedLocation
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsForceSubscribeVersionNotifyLocation0 = &tmp
		return
	case 7:
		ty.IsForceUnsubscribeVersionNotify = true
		var tmp VersionedLocation
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsForceUnsubscribeVersionNotifyLocation0 = &tmp
		return
	case 8:
		ty.IsLimitedReserveTransferAssets = true
		err = decoder.Decode(&ty.AsLimitedReserveTransferAssetsDest0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsLimitedReserveTransferAssetsBeneficiary1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsLimitedReserveTransferAssetsAssets2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsLimitedReserveTransferAssetsFeeAssetItem3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsLimitedReserveTransferAssetsWeightLimit4)
		if err != nil {
			return err
		}
		return
	case 9:
		ty.IsLimitedTeleportAssets = true
		err = decoder.Decode(&ty.AsLimitedTeleportAssetsDest0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsLimitedTeleportAssetsBeneficiary1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsLimitedTeleportAssetsAssets2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsLimitedTeleportAssetsFeeAssetItem3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsLimitedTeleportAssetsWeightLimit4)
		if err != nil {
			return err
		}
		return
	case 10:
		ty.IsForceSuspension = true
		err = decoder.Decode(&ty.AsForceSuspensionSuspended0)
		if err != nil {
			return err
		}
		return
	case 11:
		ty.IsTransferAssets = true
		err = decoder.Decode(&ty.AsTransferAssetsDest0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferAssetsBeneficiary1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferAssetsAssets2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferAssetsFeeAssetItem3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferAssetsWeightLimit4)
		if err != nil {
			return err
		}
		return
	case 12:
		ty.IsClaimAssets = true
		err = decoder.Decode(&ty.AsClaimAssetsAssets0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsClaimAssetsBeneficiary1)
		if err != nil {
			return err
		}
		return
	case 13:
		ty.IsExecuteBlob = true
		err = decoder.Decode(&ty.AsExecuteBlobEncodedMessage0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExecuteBlobMaxWeight1)
		if err != nil {
			return err
		}
		return
	case 14:
		ty.IsSendBlob = true
		err = decoder.Decode(&ty.AsSendBlobDest0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSendBlobEncodedMessage1)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *PalletXcmPalletCall) Variant() (uint8, error) {
	if ty.IsSend {
		return 0, nil
	}
	if ty.IsTeleportAssets {
		return 1, nil
	}
	if ty.IsReserveTransferAssets {
		return 2, nil
	}
	if ty.IsExecute {
		return 3, nil
	}
	if ty.IsForceXcmVersion {
		return 4, nil
	}
	if ty.IsForceDefaultXcmVersion {
		return 5, nil
	}
	if ty.IsForceSubscribeVersionNotify {
		return 6, nil
	}
	if ty.IsForceUnsubscribeVersionNotify {
		return 7, nil
	}
	if ty.IsLimitedReserveTransferAssets {
		return 8, nil
	}
	if ty.IsLimitedTeleportAssets {
		return 9, nil
	}
	if ty.IsForceSuspension {
		return 10, nil
	}
	if ty.IsTransferAssets {
		return 11, nil
	}
	if ty.IsClaimAssets {
		return 12, nil
	}
	if ty.IsExecuteBlob {
		return 13, nil
	}
	if ty.IsSendBlob {
		return 14, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty PalletXcmPalletCall) MarshalJSON() ([]byte, error) {
	if ty.IsSend {
		m := map[string]interface{}{"PalletXcmPalletCall::send": map[string]interface{}{
			"AsSendDest0":    ty.AsSendDest0,
			"AsSendMessage1": ty.AsSendMessage1,
		}}
		return json.Marshal(m)
	}
	if ty.IsTeleportAssets {
		m := map[string]interface{}{"PalletXcmPalletCall::teleport_assets": map[string]interface{}{
			"AsTeleportAssetsAssets2":       ty.AsTeleportAssetsAssets2,
			"AsTeleportAssetsBeneficiary1":  ty.AsTeleportAssetsBeneficiary1,
			"AsTeleportAssetsDest0":         ty.AsTeleportAssetsDest0,
			"AsTeleportAssetsFeeAssetItem3": ty.AsTeleportAssetsFeeAssetItem3,
		}}
		return json.Marshal(m)
	}
	if ty.IsReserveTransferAssets {
		m := map[string]interface{}{"PalletXcmPalletCall::reserve_transfer_assets": map[string]interface{}{
			"AsReserveTransferAssetsAssets2":       ty.AsReserveTransferAssetsAssets2,
			"AsReserveTransferAssetsBeneficiary1":  ty.AsReserveTransferAssetsBeneficiary1,
			"AsReserveTransferAssetsDest0":         ty.AsReserveTransferAssetsDest0,
			"AsReserveTransferAssetsFeeAssetItem3": ty.AsReserveTransferAssetsFeeAssetItem3,
		}}
		return json.Marshal(m)
	}
	if ty.IsExecute {
		m := map[string]interface{}{"PalletXcmPalletCall::execute": map[string]interface{}{
			"AsExecuteMaxWeight1": ty.AsExecuteMaxWeight1,
			"AsExecuteMessage0":   ty.AsExecuteMessage0,
		}}
		return json.Marshal(m)
	}
	if ty.IsForceXcmVersion {
		m := map[string]interface{}{"PalletXcmPalletCall::force_xcm_version": map[string]interface{}{
			"AsForceXcmVersionLocation0": ty.AsForceXcmVersionLocation0,
			"AsForceXcmVersionVersion1":  ty.AsForceXcmVersionVersion1,
		}}
		return json.Marshal(m)
	}
	if ty.IsForceDefaultXcmVersion {
		m := map[string]interface{}{"PalletXcmPalletCall::force_default_xcm_version": ty.AsForceDefaultXcmVersionMaybeXcmVersion0}
		return json.Marshal(m)
	}
	if ty.IsForceSubscribeVersionNotify {
		m := map[string]interface{}{"PalletXcmPalletCall::force_subscribe_version_notify": ty.AsForceSubscribeVersionNotifyLocation0}
		return json.Marshal(m)
	}
	if ty.IsForceUnsubscribeVersionNotify {
		m := map[string]interface{}{"PalletXcmPalletCall::force_unsubscribe_version_notify": ty.AsForceUnsubscribeVersionNotifyLocation0}
		return json.Marshal(m)
	}
	if ty.IsLimitedReserveTransferAssets {
		m := map[string]interface{}{"PalletXcmPalletCall::limited_reserve_transfer_assets": map[string]interface{}{
			"AsLimitedReserveTransferAssetsAssets2":       ty.AsLimitedReserveTransferAssetsAssets2,
			"AsLimitedReserveTransferAssetsBeneficiary1":  ty.AsLimitedReserveTransferAssetsBeneficiary1,
			"AsLimitedReserveTransferAssetsDest0":         ty.AsLimitedReserveTransferAssetsDest0,
			"AsLimitedReserveTransferAssetsFeeAssetItem3": ty.AsLimitedReserveTransferAssetsFeeAssetItem3,
			"AsLimitedReserveTransferAssetsWeightLimit4":  ty.AsLimitedReserveTransferAssetsWeightLimit4,
		}}
		return json.Marshal(m)
	}
	if ty.IsLimitedTeleportAssets {
		m := map[string]interface{}{"PalletXcmPalletCall::limited_teleport_assets": map[string]interface{}{
			"AsLimitedTeleportAssetsAssets2":       ty.AsLimitedTeleportAssetsAssets2,
			"AsLimitedTeleportAssetsBeneficiary1":  ty.AsLimitedTeleportAssetsBeneficiary1,
			"AsLimitedTeleportAssetsDest0":         ty.AsLimitedTeleportAssetsDest0,
			"AsLimitedTeleportAssetsFeeAssetItem3": ty.AsLimitedTeleportAssetsFeeAssetItem3,
			"AsLimitedTeleportAssetsWeightLimit4":  ty.AsLimitedTeleportAssetsWeightLimit4,
		}}
		return json.Marshal(m)
	}
	if ty.IsForceSuspension {
		m := map[string]interface{}{"PalletXcmPalletCall::force_suspension": ty.AsForceSuspensionSuspended0}
		return json.Marshal(m)
	}
	if ty.IsTransferAssets {
		m := map[string]interface{}{"PalletXcmPalletCall::transfer_assets": map[string]interface{}{
			"AsTransferAssetsAssets2":       ty.AsTransferAssetsAssets2,
			"AsTransferAssetsBeneficiary1":  ty.AsTransferAssetsBeneficiary1,
			"AsTransferAssetsDest0":         ty.AsTransferAssetsDest0,
			"AsTransferAssetsFeeAssetItem3": ty.AsTransferAssetsFeeAssetItem3,
			"AsTransferAssetsWeightLimit4":  ty.AsTransferAssetsWeightLimit4,
		}}
		return json.Marshal(m)
	}
	if ty.IsClaimAssets {
		m := map[string]interface{}{"PalletXcmPalletCall::claim_assets": map[string]interface{}{
			"AsClaimAssetsAssets0":      ty.AsClaimAssetsAssets0,
			"AsClaimAssetsBeneficiary1": ty.AsClaimAssetsBeneficiary1,
		}}
		return json.Marshal(m)
	}
	if ty.IsExecuteBlob {
		m := map[string]interface{}{"PalletXcmPalletCall::execute_blob": map[string]interface{}{
			"AsExecuteBlobEncodedMessage0": ty.AsExecuteBlobEncodedMessage0,
			"AsExecuteBlobMaxWeight1":      ty.AsExecuteBlobMaxWeight1,
		}}
		return json.Marshal(m)
	}
	if ty.IsSendBlob {
		m := map[string]interface{}{"PalletXcmPalletCall::send_blob": map[string]interface{}{
			"AsSendBlobDest0":           ty.AsSendBlobDest0,
			"AsSendBlobEncodedMessage1": ty.AsSendBlobEncodedMessage1,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated PalletMessageQueuePalletCall with id=282
type PalletMessageQueuePalletCall struct {
	IsReapPage                        bool
	AsReapPageMessageOrigin0          AggregateMessageOrigin
	AsReapPagePageIndex1              uint32
	IsExecuteOverweight               bool
	AsExecuteOverweightMessageOrigin0 AggregateMessageOrigin
	AsExecuteOverweightPage1          uint32
	AsExecuteOverweightIndex2         uint32
	AsExecuteOverweightWeightLimit3   Weight
}

func (ty PalletMessageQueuePalletCall) Encode(encoder scale.Encoder) (err error) {
	if ty.IsReapPage {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReapPageMessageOrigin0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReapPagePageIndex1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExecuteOverweight {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExecuteOverweightMessageOrigin0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExecuteOverweightPage1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExecuteOverweightIndex2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExecuteOverweightWeightLimit3)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *PalletMessageQueuePalletCall) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsReapPage = true
		err = decoder.Decode(&ty.AsReapPageMessageOrigin0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsReapPagePageIndex1)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsExecuteOverweight = true
		err = decoder.Decode(&ty.AsExecuteOverweightMessageOrigin0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExecuteOverweightPage1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExecuteOverweightIndex2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExecuteOverweightWeightLimit3)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *PalletMessageQueuePalletCall) Variant() (uint8, error) {
	if ty.IsReapPage {
		return 0, nil
	}
	if ty.IsExecuteOverweight {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty PalletMessageQueuePalletCall) MarshalJSON() ([]byte, error) {
	if ty.IsReapPage {
		m := map[string]interface{}{"PalletMessageQueuePalletCall::reap_page": map[string]interface{}{
			"AsReapPageMessageOrigin0": ty.AsReapPageMessageOrigin0,
			"AsReapPagePageIndex1":     ty.AsReapPagePageIndex1,
		}}
		return json.Marshal(m)
	}
	if ty.IsExecuteOverweight {
		m := map[string]interface{}{"PalletMessageQueuePalletCall::execute_overweight": map[string]interface{}{
			"AsExecuteOverweightIndex2":         ty.AsExecuteOverweightIndex2,
			"AsExecuteOverweightMessageOrigin0": ty.AsExecuteOverweightMessageOrigin0,
			"AsExecuteOverweightPage1":          ty.AsExecuteOverweightPage1,
			"AsExecuteOverweightWeightLimit3":   ty.AsExecuteOverweightWeightLimit3,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated OrmlTokensModuleCall with id=283
type OrmlTokensModuleCall struct {
	IsTransfer                     bool
	AsTransferDest0                MultiAddress
	AsTransferCurrencyId1          uint64
	AsTransferAmount2              types.UCompact
	IsTransferAll                  bool
	AsTransferAllDest0             MultiAddress
	AsTransferAllCurrencyId1       uint64
	AsTransferAllKeepAlive2        bool
	IsTransferKeepAlive            bool
	AsTransferKeepAliveDest0       MultiAddress
	AsTransferKeepAliveCurrencyId1 uint64
	AsTransferKeepAliveAmount2     types.UCompact
	IsForceTransfer                bool
	AsForceTransferSource0         MultiAddress
	AsForceTransferDest1           MultiAddress
	AsForceTransferCurrencyId2     uint64
	AsForceTransferAmount3         types.UCompact
	IsSetBalance                   bool
	AsSetBalanceWho0               MultiAddress
	AsSetBalanceCurrencyId1        uint64
	AsSetBalanceNewFree2           types.UCompact
	AsSetBalanceNewReserved3       types.UCompact
}

func (ty OrmlTokensModuleCall) Encode(encoder scale.Encoder) (err error) {
	if ty.IsTransfer {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferDest0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferCurrencyId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferAmount2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTransferAll {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferAllDest0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferAllCurrencyId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferAllKeepAlive2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTransferKeepAlive {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferKeepAliveDest0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferKeepAliveCurrencyId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferKeepAliveAmount2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsForceTransfer {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsForceTransferSource0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsForceTransferDest1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsForceTransferCurrencyId2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsForceTransferAmount3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetBalance {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetBalanceWho0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetBalanceCurrencyId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetBalanceNewFree2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetBalanceNewReserved3)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *OrmlTokensModuleCall) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsTransfer = true
		err = decoder.Decode(&ty.AsTransferDest0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferCurrencyId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferAmount2)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsTransferAll = true
		err = decoder.Decode(&ty.AsTransferAllDest0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferAllCurrencyId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferAllKeepAlive2)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsTransferKeepAlive = true
		err = decoder.Decode(&ty.AsTransferKeepAliveDest0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferKeepAliveCurrencyId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferKeepAliveAmount2)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsForceTransfer = true
		err = decoder.Decode(&ty.AsForceTransferSource0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsForceTransferDest1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsForceTransferCurrencyId2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsForceTransferAmount3)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsSetBalance = true
		err = decoder.Decode(&ty.AsSetBalanceWho0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSetBalanceCurrencyId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSetBalanceNewFree2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSetBalanceNewReserved3)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *OrmlTokensModuleCall) Variant() (uint8, error) {
	if ty.IsTransfer {
		return 0, nil
	}
	if ty.IsTransferAll {
		return 1, nil
	}
	if ty.IsTransferKeepAlive {
		return 2, nil
	}
	if ty.IsForceTransfer {
		return 3, nil
	}
	if ty.IsSetBalance {
		return 4, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty OrmlTokensModuleCall) MarshalJSON() ([]byte, error) {
	if ty.IsTransfer {
		m := map[string]interface{}{"OrmlTokensModuleCall::transfer": map[string]interface{}{
			"AsTransferAmount2":     ty.AsTransferAmount2,
			"AsTransferCurrencyId1": ty.AsTransferCurrencyId1,
			"AsTransferDest0":       ty.AsTransferDest0,
		}}
		return json.Marshal(m)
	}
	if ty.IsTransferAll {
		m := map[string]interface{}{"OrmlTokensModuleCall::transfer_all": map[string]interface{}{
			"AsTransferAllCurrencyId1": ty.AsTransferAllCurrencyId1,
			"AsTransferAllDest0":       ty.AsTransferAllDest0,
			"AsTransferAllKeepAlive2":  ty.AsTransferAllKeepAlive2,
		}}
		return json.Marshal(m)
	}
	if ty.IsTransferKeepAlive {
		m := map[string]interface{}{"OrmlTokensModuleCall::transfer_keep_alive": map[string]interface{}{
			"AsTransferKeepAliveAmount2":     ty.AsTransferKeepAliveAmount2,
			"AsTransferKeepAliveCurrencyId1": ty.AsTransferKeepAliveCurrencyId1,
			"AsTransferKeepAliveDest0":       ty.AsTransferKeepAliveDest0,
		}}
		return json.Marshal(m)
	}
	if ty.IsForceTransfer {
		m := map[string]interface{}{"OrmlTokensModuleCall::force_transfer": map[string]interface{}{
			"AsForceTransferAmount3":     ty.AsForceTransferAmount3,
			"AsForceTransferCurrencyId2": ty.AsForceTransferCurrencyId2,
			"AsForceTransferDest1":       ty.AsForceTransferDest1,
			"AsForceTransferSource0":     ty.AsForceTransferSource0,
		}}
		return json.Marshal(m)
	}
	if ty.IsSetBalance {
		m := map[string]interface{}{"OrmlTokensModuleCall::set_balance": map[string]interface{}{
			"AsSetBalanceCurrencyId1":  ty.AsSetBalanceCurrencyId1,
			"AsSetBalanceNewFree2":     ty.AsSetBalanceNewFree2,
			"AsSetBalanceNewReserved3": ty.AsSetBalanceNewReserved3,
			"AsSetBalanceWho0":         ty.AsSetBalanceWho0,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated WeteeMessageQueuePalletCall with id=284
type WeteeMessageQueuePalletCall struct {
	IsReapPage                        bool
	AsReapPageMessageOrigin0          MessageOrigin
	AsReapPagePageIndex1              uint32
	IsExecuteOverweight               bool
	AsExecuteOverweightMessageOrigin0 MessageOrigin
	AsExecuteOverweightPage1          uint32
	AsExecuteOverweightIndex2         uint32
	AsExecuteOverweightWeightLimit3   Weight
}

func (ty WeteeMessageQueuePalletCall) Encode(encoder scale.Encoder) (err error) {
	if ty.IsReapPage {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReapPageMessageOrigin0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReapPagePageIndex1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsExecuteOverweight {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExecuteOverweightMessageOrigin0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExecuteOverweightPage1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExecuteOverweightIndex2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsExecuteOverweightWeightLimit3)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *WeteeMessageQueuePalletCall) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsReapPage = true
		err = decoder.Decode(&ty.AsReapPageMessageOrigin0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsReapPagePageIndex1)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsExecuteOverweight = true
		err = decoder.Decode(&ty.AsExecuteOverweightMessageOrigin0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExecuteOverweightPage1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExecuteOverweightIndex2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsExecuteOverweightWeightLimit3)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *WeteeMessageQueuePalletCall) Variant() (uint8, error) {
	if ty.IsReapPage {
		return 0, nil
	}
	if ty.IsExecuteOverweight {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty WeteeMessageQueuePalletCall) MarshalJSON() ([]byte, error) {
	if ty.IsReapPage {
		m := map[string]interface{}{"WeteeMessageQueuePalletCall::reap_page": map[string]interface{}{
			"AsReapPageMessageOrigin0": ty.AsReapPageMessageOrigin0,
			"AsReapPagePageIndex1":     ty.AsReapPagePageIndex1,
		}}
		return json.Marshal(m)
	}
	if ty.IsExecuteOverweight {
		m := map[string]interface{}{"WeteeMessageQueuePalletCall::execute_overweight": map[string]interface{}{
			"AsExecuteOverweightIndex2":         ty.AsExecuteOverweightIndex2,
			"AsExecuteOverweightMessageOrigin0": ty.AsExecuteOverweightMessageOrigin0,
			"AsExecuteOverweightPage1":          ty.AsExecuteOverweightPage1,
			"AsExecuteOverweightWeightLimit3":   ty.AsExecuteOverweightWeightLimit3,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated FrameSupportDispatchRawOrigin with id=288
type RawOrigin struct {
	IsRoot         bool
	IsSigned       bool
	AsSignedField0 [32]byte
	IsNone         bool
}

func (ty RawOrigin) Encode(encoder scale.Encoder) (err error) {
	if ty.IsRoot {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSigned {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSignedField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNone {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *RawOrigin) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsRoot = true
		return
	case 1:
		ty.IsSigned = true
		err = decoder.Decode(&ty.AsSignedField0)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsNone = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *RawOrigin) Variant() (uint8, error) {
	if ty.IsRoot {
		return 0, nil
	}
	if ty.IsSigned {
		return 1, nil
	}
	if ty.IsNone {
		return 2, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty RawOrigin) MarshalJSON() ([]byte, error) {
	if ty.IsRoot {
		return json.Marshal("RawOrigin::Root")
	}
	if ty.IsSigned {
		m := map[string]interface{}{"RawOrigin::Signed": ty.AsSignedField0}
		return json.Marshal(m)
	}
	if ty.IsNone {
		return json.Marshal("RawOrigin::None")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated PalletXcmPalletOrigin with id=289
type Origin1 struct {
	IsXcm            bool
	AsXcmField0      Location
	IsResponse       bool
	AsResponseField0 Location
}

func (ty Origin1) Encode(encoder scale.Encoder) (err error) {
	if ty.IsXcm {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsXcmField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsResponse {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsResponseField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Origin1) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsXcm = true
		err = decoder.Decode(&ty.AsXcmField0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsResponse = true
		err = decoder.Decode(&ty.AsResponseField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Origin1) Variant() (uint8, error) {
	if ty.IsXcm {
		return 0, nil
	}
	if ty.IsResponse {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Origin1) MarshalJSON() ([]byte, error) {
	if ty.IsXcm {
		m := map[string]interface{}{"Origin1::Xcm": ty.AsXcmField0}
		return json.Marshal(m)
	}
	if ty.IsResponse {
		m := map[string]interface{}{"Origin1::Response": ty.AsResponseField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated CumulusPalletXcmPalletOrigin with id=290
type Origin2 struct {
	IsRelay                  bool
	IsSiblingParachain       bool
	AsSiblingParachainField0 uint32
}

func (ty Origin2) Encode(encoder scale.Encoder) (err error) {
	if ty.IsRelay {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSiblingParachain {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSiblingParachainField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Origin2) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsRelay = true
		return
	case 1:
		ty.IsSiblingParachain = true
		err = decoder.Decode(&ty.AsSiblingParachainField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Origin2) Variant() (uint8, error) {
	if ty.IsRelay {
		return 0, nil
	}
	if ty.IsSiblingParachain {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Origin2) MarshalJSON() ([]byte, error) {
	if ty.IsRelay {
		return json.Marshal("Origin2::Relay")
	}
	if ty.IsSiblingParachain {
		m := map[string]interface{}{"Origin2::SiblingParachain": ty.AsSiblingParachainField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated ParachainWeteeRuntimeOriginCaller with id=287
type OriginCaller struct {
	IsSystem            bool
	AsSystemField0      *RawOrigin
	IsPolkadotXcm       bool
	AsPolkadotXcmField0 *Origin1
	IsCumulusXcm        bool
	AsCumulusXcmField0  *Origin2
	IsVoid              bool
	AsVoidField0        *struct{}
}

func (ty OriginCaller) Encode(encoder scale.Encoder) (err error) {
	if ty.IsSystem {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSystemField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsPolkadotXcm {
		err = encoder.PushByte(31)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPolkadotXcmField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCumulusXcm {
		err = encoder.PushByte(32)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCumulusXcmField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsVoid {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsVoidField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *OriginCaller) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsSystem = true
		var tmp RawOrigin
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsSystemField0 = &tmp
		return
	case 31:
		ty.IsPolkadotXcm = true
		var tmp Origin1
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsPolkadotXcmField0 = &tmp
		return
	case 32:
		ty.IsCumulusXcm = true
		var tmp Origin2
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsCumulusXcmField0 = &tmp
		return
	case 3:
		ty.IsVoid = true
		var tmp struct{}
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsVoidField0 = &tmp
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *OriginCaller) Variant() (uint8, error) {
	if ty.IsSystem {
		return 0, nil
	}
	if ty.IsPolkadotXcm {
		return 31, nil
	}
	if ty.IsCumulusXcm {
		return 32, nil
	}
	if ty.IsVoid {
		return 3, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty OriginCaller) MarshalJSON() ([]byte, error) {
	if ty.IsSystem {
		m := map[string]interface{}{"OriginCaller::system": ty.AsSystemField0}
		return json.Marshal(m)
	}
	if ty.IsPolkadotXcm {
		m := map[string]interface{}{"OriginCaller::PolkadotXcm": ty.AsPolkadotXcmField0}
		return json.Marshal(m)
	}
	if ty.IsCumulusXcm {
		m := map[string]interface{}{"OriginCaller::CumulusXcm": ty.AsCumulusXcmField0}
		return json.Marshal(m)
	}
	if ty.IsVoid {
		m := map[string]interface{}{"OriginCaller::Void": ty.AsVoidField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated PalletUtilityPalletCall with id=285
type PalletUtilityPalletCall struct {
	IsBatch               bool
	AsBatchCalls0         []RuntimeCall
	IsAsDerivative        bool
	AsAsDerivativeIndex0  uint16
	AsAsDerivativeCall1   *RuntimeCall
	IsBatchAll            bool
	AsBatchAllCalls0      []RuntimeCall
	IsDispatchAs          bool
	AsDispatchAsAsOrigin0 *OriginCaller
	AsDispatchAsCall1     *RuntimeCall
	IsForceBatch          bool
	AsForceBatchCalls0    []RuntimeCall
	IsWithWeight          bool
	AsWithWeightCall0     *RuntimeCall
	AsWithWeightWeight1   Weight
}

func (ty PalletUtilityPalletCall) Encode(encoder scale.Encoder) (err error) {
	if ty.IsBatch {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBatchCalls0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAsDerivative {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAsDerivativeIndex0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsAsDerivativeCall1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBatchAll {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBatchAllCalls0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDispatchAs {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDispatchAsAsOrigin0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDispatchAsCall1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsForceBatch {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsForceBatchCalls0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWithWeight {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWithWeightCall0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWithWeightWeight1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *PalletUtilityPalletCall) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsBatch = true
		err = decoder.Decode(&ty.AsBatchCalls0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsAsDerivative = true
		err = decoder.Decode(&ty.AsAsDerivativeIndex0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsAsDerivativeCall1)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsBatchAll = true
		err = decoder.Decode(&ty.AsBatchAllCalls0)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsDispatchAs = true
		err = decoder.Decode(&ty.AsDispatchAsAsOrigin0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDispatchAsCall1)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsForceBatch = true
		err = decoder.Decode(&ty.AsForceBatchCalls0)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsWithWeight = true
		err = decoder.Decode(&ty.AsWithWeightCall0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsWithWeightWeight1)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *PalletUtilityPalletCall) Variant() (uint8, error) {
	if ty.IsBatch {
		return 0, nil
	}
	if ty.IsAsDerivative {
		return 1, nil
	}
	if ty.IsBatchAll {
		return 2, nil
	}
	if ty.IsDispatchAs {
		return 3, nil
	}
	if ty.IsForceBatch {
		return 4, nil
	}
	if ty.IsWithWeight {
		return 5, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty PalletUtilityPalletCall) MarshalJSON() ([]byte, error) {
	if ty.IsBatch {
		m := map[string]interface{}{"PalletUtilityPalletCall::batch": ty.AsBatchCalls0}
		return json.Marshal(m)
	}
	if ty.IsAsDerivative {
		m := map[string]interface{}{"PalletUtilityPalletCall::as_derivative": map[string]interface{}{
			"AsAsDerivativeCall1":  ty.AsAsDerivativeCall1,
			"AsAsDerivativeIndex0": ty.AsAsDerivativeIndex0,
		}}
		return json.Marshal(m)
	}
	if ty.IsBatchAll {
		m := map[string]interface{}{"PalletUtilityPalletCall::batch_all": ty.AsBatchAllCalls0}
		return json.Marshal(m)
	}
	if ty.IsDispatchAs {
		m := map[string]interface{}{"PalletUtilityPalletCall::dispatch_as": map[string]interface{}{
			"AsDispatchAsAsOrigin0": ty.AsDispatchAsAsOrigin0,
			"AsDispatchAsCall1":     ty.AsDispatchAsCall1,
		}}
		return json.Marshal(m)
	}
	if ty.IsForceBatch {
		m := map[string]interface{}{"PalletUtilityPalletCall::force_batch": ty.AsForceBatchCalls0}
		return json.Marshal(m)
	}
	if ty.IsWithWeight {
		m := map[string]interface{}{"PalletUtilityPalletCall::with_weight": map[string]interface{}{
			"AsWithWeightCall0":   ty.AsWithWeightCall0,
			"AsWithWeightWeight1": ty.AsWithWeightWeight1,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated Option with id=293
type OptionTByteSlice struct {
	IsNone       bool
	IsSome       bool
	AsSomeField0 []byte
}

func (ty OptionTByteSlice) Encode(encoder scale.Encoder) (err error) {
	if ty.IsNone {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSome {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSomeField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *OptionTByteSlice) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsNone = true
		return
	case 1:
		ty.IsSome = true
		err = decoder.Decode(&ty.AsSomeField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *OptionTByteSlice) Variant() (uint8, error) {
	if ty.IsNone {
		return 0, nil
	}
	if ty.IsSome {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty OptionTByteSlice) MarshalJSON() ([]byte, error) {
	if ty.IsNone {
		return json.Marshal("OptionTByteSlice::None")
	}
	if ty.IsSome {
		m := map[string]interface{}{"OptionTByteSlice::Some": ty.AsSomeField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated WeteeOrgStatus with id=295
type Status struct {
	IsActive   bool
	IsInActive bool
}

func (ty Status) Encode(encoder scale.Encoder) (err error) {
	if ty.IsActive {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsInActive {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Status) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsActive = true
		return
	case 1:
		ty.IsInActive = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Status) Variant() (uint8, error) {
	if ty.IsActive {
		return 0, nil
	}
	if ty.IsInActive {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Status) MarshalJSON() ([]byte, error) {
	if ty.IsActive {
		return json.Marshal("Status::Active")
	}
	if ty.IsInActive {
		return json.Marshal("Status::InActive")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated Option with id=294
type OptionTStatus struct {
	IsNone       bool
	IsSome       bool
	AsSomeField0 *Status
}

func (ty OptionTStatus) Encode(encoder scale.Encoder) (err error) {
	if ty.IsNone {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSome {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSomeField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *OptionTStatus) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsNone = true
		return
	case 1:
		ty.IsSome = true
		var tmp Status
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsSomeField0 = &tmp
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *OptionTStatus) Variant() (uint8, error) {
	if ty.IsNone {
		return 0, nil
	}
	if ty.IsSome {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty OptionTStatus) MarshalJSON() ([]byte, error) {
	if ty.IsNone {
		return json.Marshal("OptionTStatus::None")
	}
	if ty.IsSome {
		m := map[string]interface{}{"OptionTStatus::Some": ty.AsSomeField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated WeteeOrgPalletCall with id=292
type WeteeOrgPalletCall struct {
	IsCreateDao                   bool
	AsCreateDaoName0              []byte
	AsCreateDaoDesc1              []byte
	AsCreateDaoPurpose2           []byte
	AsCreateDaoMetaData3          []byte
	AsCreateDaoImApi4             []byte
	AsCreateDaoBg5                []byte
	AsCreateDaoLogo6              []byte
	AsCreateDaoImg7               []byte
	AsCreateDaoHomeUrl8           []byte
	IsUpdateDao                   bool
	AsUpdateDaoDaoId0             uint64
	AsUpdateDaoName1              OptionTByteSlice
	AsUpdateDaoDesc2              OptionTByteSlice
	AsUpdateDaoPurpose3           OptionTByteSlice
	AsUpdateDaoMetaData4          OptionTByteSlice
	AsUpdateDaoImApi5             OptionTByteSlice
	AsUpdateDaoBg6                OptionTByteSlice
	AsUpdateDaoLogo7              OptionTByteSlice
	AsUpdateDaoImg8               OptionTByteSlice
	AsUpdateDaoHomeUrl9           OptionTByteSlice
	AsUpdateDaoStatus10           OptionTStatus
	IsCreateRoadmapTask           bool
	AsCreateRoadmapTaskDaoId0     uint64
	AsCreateRoadmapTaskRoadmapId1 uint32
	AsCreateRoadmapTaskName2      []byte
	AsCreateRoadmapTaskPriority3  byte
	AsCreateRoadmapTaskTags4      OptionTByteSlice
	IsUpdateRoadmapTask           bool
	AsUpdateRoadmapTaskDaoId0     uint64
	AsUpdateRoadmapTaskRoadmapId1 uint32
	AsUpdateRoadmapTaskTaskId2    uint64
	AsUpdateRoadmapTaskPriority3  byte
	AsUpdateRoadmapTaskStatus4    byte
	AsUpdateRoadmapTaskTags5      OptionTByteSlice
	IsCreateApp                   bool
	AsCreateAppName0              []byte
	AsCreateAppDesc1              []byte
	AsCreateAppIcon2              []byte
	AsCreateAppUrl3               []byte
	IsUpdateAppStatus             bool
	AsUpdateAppStatusAppId0       uint64
	AsUpdateAppStatusStatus1      Status
	IsOrgIntegrateApp             bool
	AsOrgIntegrateAppDaoId0       uint64
	AsOrgIntegrateAppAppId1       uint64
	IsUpdateOrgAppStatus          bool
	AsUpdateOrgAppStatusDaoId0    uint64
	AsUpdateOrgAppStatusAppId1    uint64
	AsUpdateOrgAppStatusStatus2   Status
}

func (ty WeteeOrgPalletCall) Encode(encoder scale.Encoder) (err error) {
	if ty.IsCreateDao {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateDaoName0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateDaoDesc1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateDaoPurpose2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateDaoMetaData3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateDaoImApi4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateDaoBg5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateDaoLogo6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateDaoImg7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateDaoHomeUrl8)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUpdateDao {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateDaoDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateDaoName1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateDaoDesc2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateDaoPurpose3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateDaoMetaData4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateDaoImApi5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateDaoBg6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateDaoLogo7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateDaoImg8)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateDaoHomeUrl9)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateDaoStatus10)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCreateRoadmapTask {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateRoadmapTaskDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateRoadmapTaskRoadmapId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateRoadmapTaskName2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateRoadmapTaskPriority3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateRoadmapTaskTags4)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUpdateRoadmapTask {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateRoadmapTaskDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateRoadmapTaskRoadmapId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateRoadmapTaskTaskId2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateRoadmapTaskPriority3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateRoadmapTaskStatus4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateRoadmapTaskTags5)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCreateApp {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateAppName0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateAppDesc1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateAppIcon2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateAppUrl3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUpdateAppStatus {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateAppStatusAppId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateAppStatusStatus1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsOrgIntegrateApp {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsOrgIntegrateAppDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsOrgIntegrateAppAppId1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUpdateOrgAppStatus {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateOrgAppStatusDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateOrgAppStatusAppId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateOrgAppStatusStatus2)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *WeteeOrgPalletCall) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 1:
		ty.IsCreateDao = true
		err = decoder.Decode(&ty.AsCreateDaoName0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateDaoDesc1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateDaoPurpose2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateDaoMetaData3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateDaoImApi4)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateDaoBg5)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateDaoLogo6)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateDaoImg7)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateDaoHomeUrl8)
		if err != nil {
			return err
		}
		return
	case 8:
		ty.IsUpdateDao = true
		err = decoder.Decode(&ty.AsUpdateDaoDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateDaoName1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateDaoDesc2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateDaoPurpose3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateDaoMetaData4)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateDaoImApi5)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateDaoBg6)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateDaoLogo7)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateDaoImg8)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateDaoHomeUrl9)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateDaoStatus10)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsCreateRoadmapTask = true
		err = decoder.Decode(&ty.AsCreateRoadmapTaskDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateRoadmapTaskRoadmapId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateRoadmapTaskName2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateRoadmapTaskPriority3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateRoadmapTaskTags4)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsUpdateRoadmapTask = true
		err = decoder.Decode(&ty.AsUpdateRoadmapTaskDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateRoadmapTaskRoadmapId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateRoadmapTaskTaskId2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateRoadmapTaskPriority3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateRoadmapTaskStatus4)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateRoadmapTaskTags5)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsCreateApp = true
		err = decoder.Decode(&ty.AsCreateAppName0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateAppDesc1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateAppIcon2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateAppUrl3)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsUpdateAppStatus = true
		err = decoder.Decode(&ty.AsUpdateAppStatusAppId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateAppStatusStatus1)
		if err != nil {
			return err
		}
		return
	case 6:
		ty.IsOrgIntegrateApp = true
		err = decoder.Decode(&ty.AsOrgIntegrateAppDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsOrgIntegrateAppAppId1)
		if err != nil {
			return err
		}
		return
	case 7:
		ty.IsUpdateOrgAppStatus = true
		err = decoder.Decode(&ty.AsUpdateOrgAppStatusDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateOrgAppStatusAppId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateOrgAppStatusStatus2)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *WeteeOrgPalletCall) Variant() (uint8, error) {
	if ty.IsCreateDao {
		return 1, nil
	}
	if ty.IsUpdateDao {
		return 8, nil
	}
	if ty.IsCreateRoadmapTask {
		return 2, nil
	}
	if ty.IsUpdateRoadmapTask {
		return 3, nil
	}
	if ty.IsCreateApp {
		return 4, nil
	}
	if ty.IsUpdateAppStatus {
		return 5, nil
	}
	if ty.IsOrgIntegrateApp {
		return 6, nil
	}
	if ty.IsUpdateOrgAppStatus {
		return 7, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty WeteeOrgPalletCall) MarshalJSON() ([]byte, error) {
	if ty.IsCreateDao {
		m := map[string]interface{}{"WeteeOrgPalletCall::create_dao": map[string]interface{}{
			"AsCreateDaoBg5":       ty.AsCreateDaoBg5,
			"AsCreateDaoDesc1":     ty.AsCreateDaoDesc1,
			"AsCreateDaoHomeUrl8":  ty.AsCreateDaoHomeUrl8,
			"AsCreateDaoImApi4":    ty.AsCreateDaoImApi4,
			"AsCreateDaoImg7":      ty.AsCreateDaoImg7,
			"AsCreateDaoLogo6":     ty.AsCreateDaoLogo6,
			"AsCreateDaoMetaData3": ty.AsCreateDaoMetaData3,
			"AsCreateDaoName0":     ty.AsCreateDaoName0,
			"AsCreateDaoPurpose2":  ty.AsCreateDaoPurpose2,
		}}
		return json.Marshal(m)
	}
	if ty.IsUpdateDao {
		m := map[string]interface{}{"WeteeOrgPalletCall::update_dao": map[string]interface{}{
			"AsUpdateDaoBg6":       ty.AsUpdateDaoBg6,
			"AsUpdateDaoDaoId0":    ty.AsUpdateDaoDaoId0,
			"AsUpdateDaoDesc2":     ty.AsUpdateDaoDesc2,
			"AsUpdateDaoHomeUrl9":  ty.AsUpdateDaoHomeUrl9,
			"AsUpdateDaoImApi5":    ty.AsUpdateDaoImApi5,
			"AsUpdateDaoImg8":      ty.AsUpdateDaoImg8,
			"AsUpdateDaoLogo7":     ty.AsUpdateDaoLogo7,
			"AsUpdateDaoMetaData4": ty.AsUpdateDaoMetaData4,
			"AsUpdateDaoName1":     ty.AsUpdateDaoName1,
			"AsUpdateDaoPurpose3":  ty.AsUpdateDaoPurpose3,
			"AsUpdateDaoStatus10":  ty.AsUpdateDaoStatus10,
		}}
		return json.Marshal(m)
	}
	if ty.IsCreateRoadmapTask {
		m := map[string]interface{}{"WeteeOrgPalletCall::create_roadmap_task": map[string]interface{}{
			"AsCreateRoadmapTaskDaoId0":     ty.AsCreateRoadmapTaskDaoId0,
			"AsCreateRoadmapTaskName2":      ty.AsCreateRoadmapTaskName2,
			"AsCreateRoadmapTaskPriority3":  ty.AsCreateRoadmapTaskPriority3,
			"AsCreateRoadmapTaskRoadmapId1": ty.AsCreateRoadmapTaskRoadmapId1,
			"AsCreateRoadmapTaskTags4":      ty.AsCreateRoadmapTaskTags4,
		}}
		return json.Marshal(m)
	}
	if ty.IsUpdateRoadmapTask {
		m := map[string]interface{}{"WeteeOrgPalletCall::update_roadmap_task": map[string]interface{}{
			"AsUpdateRoadmapTaskDaoId0":     ty.AsUpdateRoadmapTaskDaoId0,
			"AsUpdateRoadmapTaskPriority3":  ty.AsUpdateRoadmapTaskPriority3,
			"AsUpdateRoadmapTaskRoadmapId1": ty.AsUpdateRoadmapTaskRoadmapId1,
			"AsUpdateRoadmapTaskStatus4":    ty.AsUpdateRoadmapTaskStatus4,
			"AsUpdateRoadmapTaskTags5":      ty.AsUpdateRoadmapTaskTags5,
			"AsUpdateRoadmapTaskTaskId2":    ty.AsUpdateRoadmapTaskTaskId2,
		}}
		return json.Marshal(m)
	}
	if ty.IsCreateApp {
		m := map[string]interface{}{"WeteeOrgPalletCall::create_app": map[string]interface{}{
			"AsCreateAppDesc1": ty.AsCreateAppDesc1,
			"AsCreateAppIcon2": ty.AsCreateAppIcon2,
			"AsCreateAppName0": ty.AsCreateAppName0,
			"AsCreateAppUrl3":  ty.AsCreateAppUrl3,
		}}
		return json.Marshal(m)
	}
	if ty.IsUpdateAppStatus {
		m := map[string]interface{}{"WeteeOrgPalletCall::update_app_status": map[string]interface{}{
			"AsUpdateAppStatusAppId0":  ty.AsUpdateAppStatusAppId0,
			"AsUpdateAppStatusStatus1": ty.AsUpdateAppStatusStatus1,
		}}
		return json.Marshal(m)
	}
	if ty.IsOrgIntegrateApp {
		m := map[string]interface{}{"WeteeOrgPalletCall::org_integrate_app": map[string]interface{}{
			"AsOrgIntegrateAppAppId1": ty.AsOrgIntegrateAppAppId1,
			"AsOrgIntegrateAppDaoId0": ty.AsOrgIntegrateAppDaoId0,
		}}
		return json.Marshal(m)
	}
	if ty.IsUpdateOrgAppStatus {
		m := map[string]interface{}{"WeteeOrgPalletCall::update_org_app_status": map[string]interface{}{
			"AsUpdateOrgAppStatusAppId1":  ty.AsUpdateOrgAppStatusAppId1,
			"AsUpdateOrgAppStatusDaoId0":  ty.AsUpdateOrgAppStatusDaoId0,
			"AsUpdateOrgAppStatusStatus2": ty.AsUpdateOrgAppStatusStatus2,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated WeteeAssetsPalletCall with id=296
type WeteeAssetsPalletCall struct {
	IsCreateAsset                            bool
	AsCreateAssetDaoId0                      uint64
	AsCreateAssetMetadata1                   DaoAssetMeta
	AsCreateAssetAmount2                     types.U128
	AsCreateAssetInitDaoAsset3               types.U128
	IsSetExistenialDeposit                   bool
	AsSetExistenialDepositDaoId0             uint64
	AsSetExistenialDepositExistenialDeposit1 types.U128
	IsSetMetadata                            bool
	AsSetMetadataDaoId0                      uint64
	AsSetMetadataMetadata1                   DaoAssetMeta
	IsBurn                                   bool
	AsBurnDaoId0                             uint64
	AsBurnAmount1                            types.U128
	IsTransfer                               bool
	AsTransferDest0                          MultiAddress
	AsTransferDaoId1                         uint64
	AsTransferAmount2                        types.UCompact
	IsJoin                                   bool
	AsJoinDaoId0                             uint64
	AsJoinShareExpect1                       uint32
	AsJoinExistenialDeposit2                 types.UCompact
}

func (ty WeteeAssetsPalletCall) Encode(encoder scale.Encoder) (err error) {
	if ty.IsCreateAsset {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateAssetDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateAssetMetadata1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateAssetAmount2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateAssetInitDaoAsset3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetExistenialDeposit {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetExistenialDepositDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetExistenialDepositExistenialDeposit1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetMetadata {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetMetadataDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetMetadataMetadata1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBurn {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBurnDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBurnAmount1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTransfer {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferDest0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferDaoId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTransferAmount2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsJoin {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsJoinDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsJoinShareExpect1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsJoinExistenialDeposit2)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *WeteeAssetsPalletCall) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 1:
		ty.IsCreateAsset = true
		err = decoder.Decode(&ty.AsCreateAssetDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateAssetMetadata1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateAssetAmount2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateAssetInitDaoAsset3)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsSetExistenialDeposit = true
		err = decoder.Decode(&ty.AsSetExistenialDepositDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSetExistenialDepositExistenialDeposit1)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsSetMetadata = true
		err = decoder.Decode(&ty.AsSetMetadataDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSetMetadataMetadata1)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsBurn = true
		err = decoder.Decode(&ty.AsBurnDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsBurnAmount1)
		if err != nil {
			return err
		}
		return
	case 6:
		ty.IsTransfer = true
		err = decoder.Decode(&ty.AsTransferDest0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferDaoId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTransferAmount2)
		if err != nil {
			return err
		}
		return
	case 7:
		ty.IsJoin = true
		err = decoder.Decode(&ty.AsJoinDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsJoinShareExpect1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsJoinExistenialDeposit2)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *WeteeAssetsPalletCall) Variant() (uint8, error) {
	if ty.IsCreateAsset {
		return 1, nil
	}
	if ty.IsSetExistenialDeposit {
		return 3, nil
	}
	if ty.IsSetMetadata {
		return 4, nil
	}
	if ty.IsBurn {
		return 5, nil
	}
	if ty.IsTransfer {
		return 6, nil
	}
	if ty.IsJoin {
		return 7, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty WeteeAssetsPalletCall) MarshalJSON() ([]byte, error) {
	if ty.IsCreateAsset {
		m := map[string]interface{}{"WeteeAssetsPalletCall::create_asset": map[string]interface{}{
			"AsCreateAssetAmount2":       ty.AsCreateAssetAmount2,
			"AsCreateAssetDaoId0":        ty.AsCreateAssetDaoId0,
			"AsCreateAssetInitDaoAsset3": ty.AsCreateAssetInitDaoAsset3,
			"AsCreateAssetMetadata1":     ty.AsCreateAssetMetadata1,
		}}
		return json.Marshal(m)
	}
	if ty.IsSetExistenialDeposit {
		m := map[string]interface{}{"WeteeAssetsPalletCall::set_existenial_deposit": map[string]interface{}{
			"AsSetExistenialDepositDaoId0":             ty.AsSetExistenialDepositDaoId0,
			"AsSetExistenialDepositExistenialDeposit1": ty.AsSetExistenialDepositExistenialDeposit1,
		}}
		return json.Marshal(m)
	}
	if ty.IsSetMetadata {
		m := map[string]interface{}{"WeteeAssetsPalletCall::set_metadata": map[string]interface{}{
			"AsSetMetadataDaoId0":    ty.AsSetMetadataDaoId0,
			"AsSetMetadataMetadata1": ty.AsSetMetadataMetadata1,
		}}
		return json.Marshal(m)
	}
	if ty.IsBurn {
		m := map[string]interface{}{"WeteeAssetsPalletCall::burn": map[string]interface{}{
			"AsBurnAmount1": ty.AsBurnAmount1,
			"AsBurnDaoId0":  ty.AsBurnDaoId0,
		}}
		return json.Marshal(m)
	}
	if ty.IsTransfer {
		m := map[string]interface{}{"WeteeAssetsPalletCall::transfer": map[string]interface{}{
			"AsTransferAmount2": ty.AsTransferAmount2,
			"AsTransferDaoId1":  ty.AsTransferDaoId1,
			"AsTransferDest0":   ty.AsTransferDest0,
		}}
		return json.Marshal(m)
	}
	if ty.IsJoin {
		m := map[string]interface{}{"WeteeAssetsPalletCall::join": map[string]interface{}{
			"AsJoinDaoId0":             ty.AsJoinDaoId0,
			"AsJoinExistenialDeposit2": ty.AsJoinExistenialDeposit2,
			"AsJoinShareExpect1":       ty.AsJoinShareExpect1,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated WeteeSudoPalletCall with id=297
type WeteeSudoPalletCall struct {
	IsSudo                       bool
	AsSudoDaoId0                 uint64
	AsSudoCall1                  *RuntimeCall
	IsSetSudoAccount             bool
	AsSetSudoAccountDaoId0       uint64
	AsSetSudoAccountSudoAccount1 [32]byte
	IsCloseSudo                  bool
	AsCloseSudoDaoId0            uint64
}

func (ty WeteeSudoPalletCall) Encode(encoder scale.Encoder) (err error) {
	if ty.IsSudo {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSudoDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSudoCall1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetSudoAccount {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetSudoAccountDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetSudoAccountSudoAccount1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCloseSudo {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCloseSudoDaoId0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *WeteeSudoPalletCall) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 1:
		ty.IsSudo = true
		err = decoder.Decode(&ty.AsSudoDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSudoCall1)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsSetSudoAccount = true
		err = decoder.Decode(&ty.AsSetSudoAccountDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSetSudoAccountSudoAccount1)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsCloseSudo = true
		err = decoder.Decode(&ty.AsCloseSudoDaoId0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *WeteeSudoPalletCall) Variant() (uint8, error) {
	if ty.IsSudo {
		return 1, nil
	}
	if ty.IsSetSudoAccount {
		return 2, nil
	}
	if ty.IsCloseSudo {
		return 3, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty WeteeSudoPalletCall) MarshalJSON() ([]byte, error) {
	if ty.IsSudo {
		m := map[string]interface{}{"WeteeSudoPalletCall::sudo": map[string]interface{}{
			"AsSudoCall1":  ty.AsSudoCall1,
			"AsSudoDaoId0": ty.AsSudoDaoId0,
		}}
		return json.Marshal(m)
	}
	if ty.IsSetSudoAccount {
		m := map[string]interface{}{"WeteeSudoPalletCall::set_sudo_account": map[string]interface{}{
			"AsSetSudoAccountDaoId0":       ty.AsSetSudoAccountDaoId0,
			"AsSetSudoAccountSudoAccount1": ty.AsSetSudoAccountSudoAccount1,
		}}
		return json.Marshal(m)
	}
	if ty.IsCloseSudo {
		m := map[string]interface{}{"WeteeSudoPalletCall::close_sudo": ty.AsCloseSudoDaoId0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated WeteeGuildPalletCall with id=298
type WeteeGuildPalletCall struct {
	IsGuildJoin            bool
	AsGuildJoinDaoId0      uint64
	AsGuildJoinGuildId1    uint64
	AsGuildJoinWho2        [32]byte
	IsCreateGuild          bool
	AsCreateGuildDaoId0    uint64
	AsCreateGuildName1     []byte
	AsCreateGuildDesc2     []byte
	AsCreateGuildMetaData3 []byte
	AsCreateGuildCreator4  [32]byte
}

func (ty WeteeGuildPalletCall) Encode(encoder scale.Encoder) (err error) {
	if ty.IsGuildJoin {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsGuildJoinDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsGuildJoinGuildId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsGuildJoinWho2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCreateGuild {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateGuildDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateGuildName1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateGuildDesc2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateGuildMetaData3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateGuildCreator4)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *WeteeGuildPalletCall) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 1:
		ty.IsGuildJoin = true
		err = decoder.Decode(&ty.AsGuildJoinDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsGuildJoinGuildId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsGuildJoinWho2)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsCreateGuild = true
		err = decoder.Decode(&ty.AsCreateGuildDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateGuildName1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateGuildDesc2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateGuildMetaData3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateGuildCreator4)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *WeteeGuildPalletCall) Variant() (uint8, error) {
	if ty.IsGuildJoin {
		return 1, nil
	}
	if ty.IsCreateGuild {
		return 2, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty WeteeGuildPalletCall) MarshalJSON() ([]byte, error) {
	if ty.IsGuildJoin {
		m := map[string]interface{}{"WeteeGuildPalletCall::guild_join": map[string]interface{}{
			"AsGuildJoinDaoId0":   ty.AsGuildJoinDaoId0,
			"AsGuildJoinGuildId1": ty.AsGuildJoinGuildId1,
			"AsGuildJoinWho2":     ty.AsGuildJoinWho2,
		}}
		return json.Marshal(m)
	}
	if ty.IsCreateGuild {
		m := map[string]interface{}{"WeteeGuildPalletCall::create_guild": map[string]interface{}{
			"AsCreateGuildCreator4":  ty.AsCreateGuildCreator4,
			"AsCreateGuildDaoId0":    ty.AsCreateGuildDaoId0,
			"AsCreateGuildDesc2":     ty.AsCreateGuildDesc2,
			"AsCreateGuildMetaData3": ty.AsCreateGuildMetaData3,
			"AsCreateGuildName1":     ty.AsCreateGuildName1,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated Option with id=300
type OptionTByte struct {
	IsNone       bool
	IsSome       bool
	AsSomeField0 byte
}

func (ty OptionTByte) Encode(encoder scale.Encoder) (err error) {
	if ty.IsNone {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSome {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSomeField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *OptionTByte) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsNone = true
		return
	case 1:
		ty.IsSome = true
		err = decoder.Decode(&ty.AsSomeField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *OptionTByte) Variant() (uint8, error) {
	if ty.IsNone {
		return 0, nil
	}
	if ty.IsSome {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty OptionTByte) MarshalJSON() ([]byte, error) {
	if ty.IsNone {
		return json.Marshal("OptionTByte::None")
	}
	if ty.IsSome {
		m := map[string]interface{}{"OptionTByte::Some": ty.AsSomeField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated Option with id=301
type OptionTByteArray32Slice struct {
	IsNone       bool
	IsSome       bool
	AsSomeField0 [][32]byte
}

func (ty OptionTByteArray32Slice) Encode(encoder scale.Encoder) (err error) {
	if ty.IsNone {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSome {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSomeField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *OptionTByteArray32Slice) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsNone = true
		return
	case 1:
		ty.IsSome = true
		err = decoder.Decode(&ty.AsSomeField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *OptionTByteArray32Slice) Variant() (uint8, error) {
	if ty.IsNone {
		return 0, nil
	}
	if ty.IsSome {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty OptionTByteArray32Slice) MarshalJSON() ([]byte, error) {
	if ty.IsNone {
		return json.Marshal("OptionTByteArray32Slice::None")
	}
	if ty.IsSome {
		m := map[string]interface{}{"OptionTByteArray32Slice::Some": ty.AsSomeField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated WeteeProjectReviewOpinion with id=302
type ReviewOpinion struct {
	IsYES bool
	IsNO  bool
}

func (ty ReviewOpinion) Encode(encoder scale.Encoder) (err error) {
	if ty.IsYES {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNO {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *ReviewOpinion) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsYES = true
		return
	case 1:
		ty.IsNO = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *ReviewOpinion) Variant() (uint8, error) {
	if ty.IsYES {
		return 0, nil
	}
	if ty.IsNO {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty ReviewOpinion) MarshalJSON() ([]byte, error) {
	if ty.IsYES {
		return json.Marshal("ReviewOpinion::YES")
	}
	if ty.IsNO {
		return json.Marshal("ReviewOpinion::NO")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated WeteeProjectPalletCall with id=299
type WeteeProjectPalletCall struct {
	IsProjectJoinRequest             bool
	AsProjectJoinRequestDaoId0       uint64
	AsProjectJoinRequestProjectId1   uint64
	AsProjectJoinRequestWho2         [32]byte
	IsCreateProject                  bool
	AsCreateProjectDaoId0            uint64
	AsCreateProjectName1             []byte
	AsCreateProjectDescription2      []byte
	AsCreateProjectCreator3          [32]byte
	IsApplyProjectFunds              bool
	AsApplyProjectFundsDaoId0        uint64
	AsApplyProjectFundsProjectId1    uint64
	AsApplyProjectFundsAmount2       types.U128
	IsCreateTask                     bool
	AsCreateTaskDaoId0               uint64
	AsCreateTaskProjectId1           uint64
	AsCreateTaskName2                []byte
	AsCreateTaskDescription3         []byte
	AsCreateTaskPoint4               uint16
	AsCreateTaskPriority5            byte
	AsCreateTaskMaxAssignee6         OptionTByte
	AsCreateTaskSkills7              OptionTByteSlice
	AsCreateTaskAssignees8           OptionTByteArray32Slice
	AsCreateTaskReviewers9           OptionTByteArray32Slice
	AsCreateTaskAmount10             types.U128
	IsJoinTask                       bool
	AsJoinTaskDaoId0                 uint64
	AsJoinTaskProjectId1             uint64
	AsJoinTaskTaskId2                uint64
	IsLeaveTask                      bool
	AsLeaveTaskDaoId0                uint64
	AsLeaveTaskProjectId1            uint64
	AsLeaveTaskTaskId2               uint64
	IsJoinTaskReview                 bool
	AsJoinTaskReviewDaoId0           uint64
	AsJoinTaskReviewProjectId1       uint64
	AsJoinTaskReviewTaskId2          uint64
	IsLeaveTaskReview                bool
	AsLeaveTaskReviewDaoId0          uint64
	AsLeaveTaskReviewProjectId1      uint64
	AsLeaveTaskReviewTaskId2         uint64
	IsStartTask                      bool
	AsStartTaskDaoId0                uint64
	AsStartTaskProjectId1            uint64
	AsStartTaskTaskId2               uint64
	IsRequestReview                  bool
	AsRequestReviewDaoId0            uint64
	AsRequestReviewProjectId1        uint64
	AsRequestReviewTaskId2           uint64
	IsTaskDone                       bool
	AsTaskDoneDaoId0                 uint64
	AsTaskDoneProjectId1             uint64
	AsTaskDoneTaskId2                uint64
	IsMakeReview                     bool
	AsMakeReviewDaoId0               uint64
	AsMakeReviewProjectId1           uint64
	AsMakeReviewTaskId2              uint64
	AsMakeReviewOpinion3             ReviewOpinion
	AsMakeReviewMeta4                []byte
	IsCreateProxyProject             bool
	AsCreateProxyProjectName0        []byte
	AsCreateProxyProjectDescription1 []byte
	AsCreateProxyProjectDeposit2     types.UCompact
	IsProxyCall                      bool
	AsProxyCallProjectId0            uint64
	AsProxyCallCall1                 *RuntimeCall
}

func (ty WeteeProjectPalletCall) Encode(encoder scale.Encoder) (err error) {
	if ty.IsProjectJoinRequest {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsProjectJoinRequestDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsProjectJoinRequestProjectId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsProjectJoinRequestWho2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCreateProject {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateProjectDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateProjectName1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateProjectDescription2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateProjectCreator3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsApplyProjectFunds {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsApplyProjectFundsDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsApplyProjectFundsProjectId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsApplyProjectFundsAmount2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCreateTask {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateTaskDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateTaskProjectId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateTaskName2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateTaskDescription3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateTaskPoint4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateTaskPriority5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateTaskMaxAssignee6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateTaskSkills7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateTaskAssignees8)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateTaskReviewers9)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateTaskAmount10)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsJoinTask {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsJoinTaskDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsJoinTaskProjectId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsJoinTaskTaskId2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsLeaveTask {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLeaveTaskDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLeaveTaskProjectId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLeaveTaskTaskId2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsJoinTaskReview {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsJoinTaskReviewDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsJoinTaskReviewProjectId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsJoinTaskReviewTaskId2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsLeaveTaskReview {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLeaveTaskReviewDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLeaveTaskReviewProjectId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsLeaveTaskReviewTaskId2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsStartTask {
		err = encoder.PushByte(9)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsStartTaskDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsStartTaskProjectId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsStartTaskTaskId2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsRequestReview {
		err = encoder.PushByte(10)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsRequestReviewDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsRequestReviewProjectId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsRequestReviewTaskId2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTaskDone {
		err = encoder.PushByte(11)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTaskDoneDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTaskDoneProjectId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTaskDoneTaskId2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsMakeReview {
		err = encoder.PushByte(12)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsMakeReviewDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsMakeReviewProjectId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsMakeReviewTaskId2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsMakeReviewOpinion3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsMakeReviewMeta4)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCreateProxyProject {
		err = encoder.PushByte(13)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateProxyProjectName0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateProxyProjectDescription1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateProxyProjectDeposit2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsProxyCall {
		err = encoder.PushByte(14)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsProxyCallProjectId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsProxyCallCall1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *WeteeProjectPalletCall) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 1:
		ty.IsProjectJoinRequest = true
		err = decoder.Decode(&ty.AsProjectJoinRequestDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsProjectJoinRequestProjectId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsProjectJoinRequestWho2)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsCreateProject = true
		err = decoder.Decode(&ty.AsCreateProjectDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateProjectName1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateProjectDescription2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateProjectCreator3)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsApplyProjectFunds = true
		err = decoder.Decode(&ty.AsApplyProjectFundsDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsApplyProjectFundsProjectId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsApplyProjectFundsAmount2)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsCreateTask = true
		err = decoder.Decode(&ty.AsCreateTaskDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateTaskProjectId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateTaskName2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateTaskDescription3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateTaskPoint4)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateTaskPriority5)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateTaskMaxAssignee6)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateTaskSkills7)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateTaskAssignees8)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateTaskReviewers9)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateTaskAmount10)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsJoinTask = true
		err = decoder.Decode(&ty.AsJoinTaskDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsJoinTaskProjectId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsJoinTaskTaskId2)
		if err != nil {
			return err
		}
		return
	case 6:
		ty.IsLeaveTask = true
		err = decoder.Decode(&ty.AsLeaveTaskDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsLeaveTaskProjectId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsLeaveTaskTaskId2)
		if err != nil {
			return err
		}
		return
	case 7:
		ty.IsJoinTaskReview = true
		err = decoder.Decode(&ty.AsJoinTaskReviewDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsJoinTaskReviewProjectId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsJoinTaskReviewTaskId2)
		if err != nil {
			return err
		}
		return
	case 8:
		ty.IsLeaveTaskReview = true
		err = decoder.Decode(&ty.AsLeaveTaskReviewDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsLeaveTaskReviewProjectId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsLeaveTaskReviewTaskId2)
		if err != nil {
			return err
		}
		return
	case 9:
		ty.IsStartTask = true
		err = decoder.Decode(&ty.AsStartTaskDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsStartTaskProjectId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsStartTaskTaskId2)
		if err != nil {
			return err
		}
		return
	case 10:
		ty.IsRequestReview = true
		err = decoder.Decode(&ty.AsRequestReviewDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsRequestReviewProjectId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsRequestReviewTaskId2)
		if err != nil {
			return err
		}
		return
	case 11:
		ty.IsTaskDone = true
		err = decoder.Decode(&ty.AsTaskDoneDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTaskDoneProjectId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsTaskDoneTaskId2)
		if err != nil {
			return err
		}
		return
	case 12:
		ty.IsMakeReview = true
		err = decoder.Decode(&ty.AsMakeReviewDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsMakeReviewProjectId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsMakeReviewTaskId2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsMakeReviewOpinion3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsMakeReviewMeta4)
		if err != nil {
			return err
		}
		return
	case 13:
		ty.IsCreateProxyProject = true
		err = decoder.Decode(&ty.AsCreateProxyProjectName0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateProxyProjectDescription1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateProxyProjectDeposit2)
		if err != nil {
			return err
		}
		return
	case 14:
		ty.IsProxyCall = true
		err = decoder.Decode(&ty.AsProxyCallProjectId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsProxyCallCall1)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *WeteeProjectPalletCall) Variant() (uint8, error) {
	if ty.IsProjectJoinRequest {
		return 1, nil
	}
	if ty.IsCreateProject {
		return 2, nil
	}
	if ty.IsApplyProjectFunds {
		return 3, nil
	}
	if ty.IsCreateTask {
		return 4, nil
	}
	if ty.IsJoinTask {
		return 5, nil
	}
	if ty.IsLeaveTask {
		return 6, nil
	}
	if ty.IsJoinTaskReview {
		return 7, nil
	}
	if ty.IsLeaveTaskReview {
		return 8, nil
	}
	if ty.IsStartTask {
		return 9, nil
	}
	if ty.IsRequestReview {
		return 10, nil
	}
	if ty.IsTaskDone {
		return 11, nil
	}
	if ty.IsMakeReview {
		return 12, nil
	}
	if ty.IsCreateProxyProject {
		return 13, nil
	}
	if ty.IsProxyCall {
		return 14, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty WeteeProjectPalletCall) MarshalJSON() ([]byte, error) {
	if ty.IsProjectJoinRequest {
		m := map[string]interface{}{"WeteeProjectPalletCall::project_join_request": map[string]interface{}{
			"AsProjectJoinRequestDaoId0":     ty.AsProjectJoinRequestDaoId0,
			"AsProjectJoinRequestProjectId1": ty.AsProjectJoinRequestProjectId1,
			"AsProjectJoinRequestWho2":       ty.AsProjectJoinRequestWho2,
		}}
		return json.Marshal(m)
	}
	if ty.IsCreateProject {
		m := map[string]interface{}{"WeteeProjectPalletCall::create_project": map[string]interface{}{
			"AsCreateProjectCreator3":     ty.AsCreateProjectCreator3,
			"AsCreateProjectDaoId0":       ty.AsCreateProjectDaoId0,
			"AsCreateProjectDescription2": ty.AsCreateProjectDescription2,
			"AsCreateProjectName1":        ty.AsCreateProjectName1,
		}}
		return json.Marshal(m)
	}
	if ty.IsApplyProjectFunds {
		m := map[string]interface{}{"WeteeProjectPalletCall::apply_project_funds": map[string]interface{}{
			"AsApplyProjectFundsAmount2":    ty.AsApplyProjectFundsAmount2,
			"AsApplyProjectFundsDaoId0":     ty.AsApplyProjectFundsDaoId0,
			"AsApplyProjectFundsProjectId1": ty.AsApplyProjectFundsProjectId1,
		}}
		return json.Marshal(m)
	}
	if ty.IsCreateTask {
		m := map[string]interface{}{"WeteeProjectPalletCall::create_task": map[string]interface{}{
			"AsCreateTaskAmount10":     ty.AsCreateTaskAmount10,
			"AsCreateTaskAssignees8":   ty.AsCreateTaskAssignees8,
			"AsCreateTaskDaoId0":       ty.AsCreateTaskDaoId0,
			"AsCreateTaskDescription3": ty.AsCreateTaskDescription3,
			"AsCreateTaskMaxAssignee6": ty.AsCreateTaskMaxAssignee6,
			"AsCreateTaskName2":        ty.AsCreateTaskName2,
			"AsCreateTaskPoint4":       ty.AsCreateTaskPoint4,
			"AsCreateTaskPriority5":    ty.AsCreateTaskPriority5,
			"AsCreateTaskProjectId1":   ty.AsCreateTaskProjectId1,
			"AsCreateTaskReviewers9":   ty.AsCreateTaskReviewers9,
			"AsCreateTaskSkills7":      ty.AsCreateTaskSkills7,
		}}
		return json.Marshal(m)
	}
	if ty.IsJoinTask {
		m := map[string]interface{}{"WeteeProjectPalletCall::join_task": map[string]interface{}{
			"AsJoinTaskDaoId0":     ty.AsJoinTaskDaoId0,
			"AsJoinTaskProjectId1": ty.AsJoinTaskProjectId1,
			"AsJoinTaskTaskId2":    ty.AsJoinTaskTaskId2,
		}}
		return json.Marshal(m)
	}
	if ty.IsLeaveTask {
		m := map[string]interface{}{"WeteeProjectPalletCall::leave_task": map[string]interface{}{
			"AsLeaveTaskDaoId0":     ty.AsLeaveTaskDaoId0,
			"AsLeaveTaskProjectId1": ty.AsLeaveTaskProjectId1,
			"AsLeaveTaskTaskId2":    ty.AsLeaveTaskTaskId2,
		}}
		return json.Marshal(m)
	}
	if ty.IsJoinTaskReview {
		m := map[string]interface{}{"WeteeProjectPalletCall::join_task_review": map[string]interface{}{
			"AsJoinTaskReviewDaoId0":     ty.AsJoinTaskReviewDaoId0,
			"AsJoinTaskReviewProjectId1": ty.AsJoinTaskReviewProjectId1,
			"AsJoinTaskReviewTaskId2":    ty.AsJoinTaskReviewTaskId2,
		}}
		return json.Marshal(m)
	}
	if ty.IsLeaveTaskReview {
		m := map[string]interface{}{"WeteeProjectPalletCall::leave_task_review": map[string]interface{}{
			"AsLeaveTaskReviewDaoId0":     ty.AsLeaveTaskReviewDaoId0,
			"AsLeaveTaskReviewProjectId1": ty.AsLeaveTaskReviewProjectId1,
			"AsLeaveTaskReviewTaskId2":    ty.AsLeaveTaskReviewTaskId2,
		}}
		return json.Marshal(m)
	}
	if ty.IsStartTask {
		m := map[string]interface{}{"WeteeProjectPalletCall::start_task": map[string]interface{}{
			"AsStartTaskDaoId0":     ty.AsStartTaskDaoId0,
			"AsStartTaskProjectId1": ty.AsStartTaskProjectId1,
			"AsStartTaskTaskId2":    ty.AsStartTaskTaskId2,
		}}
		return json.Marshal(m)
	}
	if ty.IsRequestReview {
		m := map[string]interface{}{"WeteeProjectPalletCall::request_review": map[string]interface{}{
			"AsRequestReviewDaoId0":     ty.AsRequestReviewDaoId0,
			"AsRequestReviewProjectId1": ty.AsRequestReviewProjectId1,
			"AsRequestReviewTaskId2":    ty.AsRequestReviewTaskId2,
		}}
		return json.Marshal(m)
	}
	if ty.IsTaskDone {
		m := map[string]interface{}{"WeteeProjectPalletCall::task_done": map[string]interface{}{
			"AsTaskDoneDaoId0":     ty.AsTaskDoneDaoId0,
			"AsTaskDoneProjectId1": ty.AsTaskDoneProjectId1,
			"AsTaskDoneTaskId2":    ty.AsTaskDoneTaskId2,
		}}
		return json.Marshal(m)
	}
	if ty.IsMakeReview {
		m := map[string]interface{}{"WeteeProjectPalletCall::make_review": map[string]interface{}{
			"AsMakeReviewDaoId0":     ty.AsMakeReviewDaoId0,
			"AsMakeReviewMeta4":      ty.AsMakeReviewMeta4,
			"AsMakeReviewOpinion3":   ty.AsMakeReviewOpinion3,
			"AsMakeReviewProjectId1": ty.AsMakeReviewProjectId1,
			"AsMakeReviewTaskId2":    ty.AsMakeReviewTaskId2,
		}}
		return json.Marshal(m)
	}
	if ty.IsCreateProxyProject {
		m := map[string]interface{}{"WeteeProjectPalletCall::create_proxy_project": map[string]interface{}{
			"AsCreateProxyProjectDeposit2":     ty.AsCreateProxyProjectDeposit2,
			"AsCreateProxyProjectDescription1": ty.AsCreateProxyProjectDescription1,
			"AsCreateProxyProjectName0":        ty.AsCreateProxyProjectName0,
		}}
		return json.Marshal(m)
	}
	if ty.IsProxyCall {
		m := map[string]interface{}{"WeteeProjectPalletCall::proxy_call": map[string]interface{}{
			"AsProxyCallCall1":      ty.AsProxyCallCall1,
			"AsProxyCallProjectId0": ty.AsProxyCallProjectId0,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated WeteeGovMemberData with id=304
type MemberData struct {
	IsGLOBAL        bool
	IsGUILD         bool
	AsGUILDField0   uint64
	IsPROJECT       bool
	AsPROJECTField0 uint64
}

func (ty MemberData) Encode(encoder scale.Encoder) (err error) {
	if ty.IsGLOBAL {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsGUILD {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsGUILDField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsPROJECT {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPROJECTField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *MemberData) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsGLOBAL = true
		return
	case 1:
		ty.IsGUILD = true
		err = decoder.Decode(&ty.AsGUILDField0)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsPROJECT = true
		err = decoder.Decode(&ty.AsPROJECTField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *MemberData) Variant() (uint8, error) {
	if ty.IsGLOBAL {
		return 0, nil
	}
	if ty.IsGUILD {
		return 1, nil
	}
	if ty.IsPROJECT {
		return 2, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty MemberData) MarshalJSON() ([]byte, error) {
	if ty.IsGLOBAL {
		return json.Marshal("MemberData::GLOBAL")
	}
	if ty.IsGUILD {
		m := map[string]interface{}{"MemberData::GUILD": ty.AsGUILDField0}
		return json.Marshal(m)
	}
	if ty.IsPROJECT {
		m := map[string]interface{}{"MemberData::PROJECT": ty.AsPROJECTField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated WeteeGovOpinion with id=305
type Opinion struct {
	IsYES bool
	IsNO  bool
}

func (ty Opinion) Encode(encoder scale.Encoder) (err error) {
	if ty.IsYES {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNO {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Opinion) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsYES = true
		return
	case 1:
		ty.IsNO = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Opinion) Variant() (uint8, error) {
	if ty.IsYES {
		return 0, nil
	}
	if ty.IsNO {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Opinion) MarshalJSON() ([]byte, error) {
	if ty.IsYES {
		return json.Marshal("Opinion::YES")
	}
	if ty.IsNO {
		return json.Marshal("Opinion::NO")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated wetee_gov_Period with id={{false [307]}}
type Period struct {
	// Field 0 with TypeId=14
	Name []byte
	// Field 1 with TypeId=169
	PalletIndex uint16
	// Field 2 with TypeId=4
	PreparePeriod uint32
	// Field 3 with TypeId=4
	MaxDeciding uint32
	// Field 4 with TypeId=4
	ConfirmPeriod uint32
	// Field 5 with TypeId=4
	DecisionPeriod uint32
	// Field 6 with TypeId=4
	MinEnactmentPeriod uint32
	// Field 7 with TypeId=6
	DecisionDeposit types.U128
	// Field 8 with TypeId=2
	MinApproval byte
	// Field 9 with TypeId=2
	MinSupport byte
	// Field 10 with TypeId=6
	MaxBalance types.U128
}

// Generated WeteeGovPalletCall with id=303
type WeteeGovPalletCall struct {
	IsSubmitProposal             bool
	AsSubmitProposalDaoId0       uint64
	AsSubmitProposalMemberData1  MemberData
	AsSubmitProposalProposal2    *RuntimeCall
	AsSubmitProposalPeriodIndex3 uint32
	IsDepositProposal            bool
	AsDepositProposalDaoId0      uint64
	AsDepositProposalProposeId1  uint32
	AsDepositProposalDeposit2    types.UCompact
	IsVoteForProp                bool
	AsVoteForPropDaoId0          uint64
	AsVoteForPropPropIndex1      uint32
	AsVoteForPropPledge2         Pledge
	AsVoteForPropOpinion3        Opinion
	IsCancelVote                 bool
	AsCancelVoteDaoId0           uint64
	AsCancelVoteIndex1           uint32
	IsRunProposal                bool
	AsRunProposalDaoId0          uint64
	AsRunProposalIndex1          uint32
	IsUnlock                     bool
	AsUnlockDaoId0               uint64
	IsSetMaxPreProps             bool
	AsSetMaxPrePropsDaoId0       uint64
	AsSetMaxPrePropsMax1         uint32
	IsUpdateVoteModel            bool
	AsUpdateVoteModelDaoId0      uint64
	AsUpdateVoteModelModel1      byte
	IsSetPeriods                 bool
	AsSetPeriodsDaoId0           uint64
	AsSetPeriodsPeriods1         []Period
}

func (ty WeteeGovPalletCall) Encode(encoder scale.Encoder) (err error) {
	if ty.IsSubmitProposal {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSubmitProposalDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSubmitProposalMemberData1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSubmitProposalProposal2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSubmitProposalPeriodIndex3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDepositProposal {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositProposalDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositProposalProposeId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsDepositProposalDeposit2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsVoteForProp {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsVoteForPropDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsVoteForPropPropIndex1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsVoteForPropPledge2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsVoteForPropOpinion3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCancelVote {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCancelVoteDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCancelVoteIndex1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsRunProposal {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsRunProposalDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsRunProposalIndex1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUnlock {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUnlockDaoId0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetMaxPreProps {
		err = encoder.PushByte(9)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetMaxPrePropsDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetMaxPrePropsMax1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUpdateVoteModel {
		err = encoder.PushByte(15)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateVoteModelDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateVoteModelModel1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetPeriods {
		err = encoder.PushByte(16)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetPeriodsDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetPeriodsPeriods1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *WeteeGovPalletCall) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 1:
		ty.IsSubmitProposal = true
		err = decoder.Decode(&ty.AsSubmitProposalDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSubmitProposalMemberData1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSubmitProposalProposal2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSubmitProposalPeriodIndex3)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsDepositProposal = true
		err = decoder.Decode(&ty.AsDepositProposalDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDepositProposalProposeId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsDepositProposalDeposit2)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsVoteForProp = true
		err = decoder.Decode(&ty.AsVoteForPropDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsVoteForPropPropIndex1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsVoteForPropPledge2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsVoteForPropOpinion3)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsCancelVote = true
		err = decoder.Decode(&ty.AsCancelVoteDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCancelVoteIndex1)
		if err != nil {
			return err
		}
		return
	case 6:
		ty.IsRunProposal = true
		err = decoder.Decode(&ty.AsRunProposalDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsRunProposalIndex1)
		if err != nil {
			return err
		}
		return
	case 7:
		ty.IsUnlock = true
		err = decoder.Decode(&ty.AsUnlockDaoId0)
		if err != nil {
			return err
		}
		return
	case 9:
		ty.IsSetMaxPreProps = true
		err = decoder.Decode(&ty.AsSetMaxPrePropsDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSetMaxPrePropsMax1)
		if err != nil {
			return err
		}
		return
	case 15:
		ty.IsUpdateVoteModel = true
		err = decoder.Decode(&ty.AsUpdateVoteModelDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateVoteModelModel1)
		if err != nil {
			return err
		}
		return
	case 16:
		ty.IsSetPeriods = true
		err = decoder.Decode(&ty.AsSetPeriodsDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSetPeriodsPeriods1)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *WeteeGovPalletCall) Variant() (uint8, error) {
	if ty.IsSubmitProposal {
		return 1, nil
	}
	if ty.IsDepositProposal {
		return 3, nil
	}
	if ty.IsVoteForProp {
		return 4, nil
	}
	if ty.IsCancelVote {
		return 5, nil
	}
	if ty.IsRunProposal {
		return 6, nil
	}
	if ty.IsUnlock {
		return 7, nil
	}
	if ty.IsSetMaxPreProps {
		return 9, nil
	}
	if ty.IsUpdateVoteModel {
		return 15, nil
	}
	if ty.IsSetPeriods {
		return 16, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty WeteeGovPalletCall) MarshalJSON() ([]byte, error) {
	if ty.IsSubmitProposal {
		m := map[string]interface{}{"WeteeGovPalletCall::submit_proposal": map[string]interface{}{
			"AsSubmitProposalDaoId0":       ty.AsSubmitProposalDaoId0,
			"AsSubmitProposalMemberData1":  ty.AsSubmitProposalMemberData1,
			"AsSubmitProposalPeriodIndex3": ty.AsSubmitProposalPeriodIndex3,
			"AsSubmitProposalProposal2":    ty.AsSubmitProposalProposal2,
		}}
		return json.Marshal(m)
	}
	if ty.IsDepositProposal {
		m := map[string]interface{}{"WeteeGovPalletCall::deposit_proposal": map[string]interface{}{
			"AsDepositProposalDaoId0":     ty.AsDepositProposalDaoId0,
			"AsDepositProposalDeposit2":   ty.AsDepositProposalDeposit2,
			"AsDepositProposalProposeId1": ty.AsDepositProposalProposeId1,
		}}
		return json.Marshal(m)
	}
	if ty.IsVoteForProp {
		m := map[string]interface{}{"WeteeGovPalletCall::vote_for_prop": map[string]interface{}{
			"AsVoteForPropDaoId0":     ty.AsVoteForPropDaoId0,
			"AsVoteForPropOpinion3":   ty.AsVoteForPropOpinion3,
			"AsVoteForPropPledge2":    ty.AsVoteForPropPledge2,
			"AsVoteForPropPropIndex1": ty.AsVoteForPropPropIndex1,
		}}
		return json.Marshal(m)
	}
	if ty.IsCancelVote {
		m := map[string]interface{}{"WeteeGovPalletCall::cancel_vote": map[string]interface{}{
			"AsCancelVoteDaoId0": ty.AsCancelVoteDaoId0,
			"AsCancelVoteIndex1": ty.AsCancelVoteIndex1,
		}}
		return json.Marshal(m)
	}
	if ty.IsRunProposal {
		m := map[string]interface{}{"WeteeGovPalletCall::run_proposal": map[string]interface{}{
			"AsRunProposalDaoId0": ty.AsRunProposalDaoId0,
			"AsRunProposalIndex1": ty.AsRunProposalIndex1,
		}}
		return json.Marshal(m)
	}
	if ty.IsUnlock {
		m := map[string]interface{}{"WeteeGovPalletCall::unlock": ty.AsUnlockDaoId0}
		return json.Marshal(m)
	}
	if ty.IsSetMaxPreProps {
		m := map[string]interface{}{"WeteeGovPalletCall::set_max_pre_props": map[string]interface{}{
			"AsSetMaxPrePropsDaoId0": ty.AsSetMaxPrePropsDaoId0,
			"AsSetMaxPrePropsMax1":   ty.AsSetMaxPrePropsMax1,
		}}
		return json.Marshal(m)
	}
	if ty.IsUpdateVoteModel {
		m := map[string]interface{}{"WeteeGovPalletCall::update_vote_model": map[string]interface{}{
			"AsUpdateVoteModelDaoId0": ty.AsUpdateVoteModelDaoId0,
			"AsUpdateVoteModelModel1": ty.AsUpdateVoteModelModel1,
		}}
		return json.Marshal(m)
	}
	if ty.IsSetPeriods {
		m := map[string]interface{}{"WeteeGovPalletCall::set_periods": map[string]interface{}{
			"AsSetPeriodsDaoId0":   ty.AsSetPeriodsDaoId0,
			"AsSetPeriodsPeriods1": ty.AsSetPeriodsPeriods1,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated WeteeTreasuryPalletCall with id=308
type WeteeTreasuryPalletCall struct {
	IsSpend             bool
	AsSpendDaoId0       uint64
	AsSpendBeneficiary1 [32]byte
	AsSpendAmount2      types.UCompact
}

func (ty WeteeTreasuryPalletCall) Encode(encoder scale.Encoder) (err error) {
	if ty.IsSpend {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSpendDaoId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSpendBeneficiary1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSpendAmount2)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *WeteeTreasuryPalletCall) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 2:
		ty.IsSpend = true
		err = decoder.Decode(&ty.AsSpendDaoId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSpendBeneficiary1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSpendAmount2)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *WeteeTreasuryPalletCall) Variant() (uint8, error) {
	if ty.IsSpend {
		return 2, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty WeteeTreasuryPalletCall) MarshalJSON() ([]byte, error) {
	if ty.IsSpend {
		m := map[string]interface{}{"WeteeTreasuryPalletCall::spend": map[string]interface{}{
			"AsSpendAmount2":      ty.AsSpendAmount2,
			"AsSpendBeneficiary1": ty.AsSpendBeneficiary1,
			"AsSpendDaoId0":       ty.AsSpendDaoId0,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated WeteePrimitivesTypesService with id=311
type Service struct {
	IsTcp              bool
	AsTcpField0        uint16
	IsUdp              bool
	AsUdpField0        uint16
	IsProjectTcp       bool
	AsProjectTcpField0 uint16
	IsProjectUdp       bool
	AsProjectUdpField0 uint16
}

func (ty Service) Encode(encoder scale.Encoder) (err error) {
	if ty.IsTcp {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTcpField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUdp {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUdpField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsProjectTcp {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsProjectTcpField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsProjectUdp {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsProjectUdpField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Service) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsTcp = true
		err = decoder.Decode(&ty.AsTcpField0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsUdp = true
		err = decoder.Decode(&ty.AsUdpField0)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsProjectTcp = true
		err = decoder.Decode(&ty.AsProjectTcpField0)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsProjectUdp = true
		err = decoder.Decode(&ty.AsProjectUdpField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Service) Variant() (uint8, error) {
	if ty.IsTcp {
		return 0, nil
	}
	if ty.IsUdp {
		return 1, nil
	}
	if ty.IsProjectTcp {
		return 2, nil
	}
	if ty.IsProjectUdp {
		return 3, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Service) MarshalJSON() ([]byte, error) {
	if ty.IsTcp {
		m := map[string]interface{}{"Service::Tcp": ty.AsTcpField0}
		return json.Marshal(m)
	}
	if ty.IsUdp {
		m := map[string]interface{}{"Service::Udp": ty.AsUdpField0}
		return json.Marshal(m)
	}
	if ty.IsProjectTcp {
		m := map[string]interface{}{"Service::ProjectTcp": ty.AsProjectTcpField0}
		return json.Marshal(m)
	}
	if ty.IsProjectUdp {
		m := map[string]interface{}{"Service::ProjectUdp": ty.AsProjectUdpField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated WeteePrimitivesTypesCommand with id=312
type Command struct {
	IsSH         bool
	AsSHField0   []byte
	IsBASH       bool
	AsBASHField0 []byte
	IsZSH        bool
	AsZSHField0  []byte
	IsNONE       bool
}

func (ty Command) Encode(encoder scale.Encoder) (err error) {
	if ty.IsSH {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSHField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBASH {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBASHField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsZSH {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsZSHField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNONE {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Command) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsSH = true
		err = decoder.Decode(&ty.AsSHField0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsBASH = true
		err = decoder.Decode(&ty.AsBASHField0)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsZSH = true
		err = decoder.Decode(&ty.AsZSHField0)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsNONE = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Command) Variant() (uint8, error) {
	if ty.IsSH {
		return 0, nil
	}
	if ty.IsBASH {
		return 1, nil
	}
	if ty.IsZSH {
		return 2, nil
	}
	if ty.IsNONE {
		return 3, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Command) MarshalJSON() ([]byte, error) {
	if ty.IsSH {
		m := map[string]interface{}{"Command::SH": ty.AsSHField0}
		return json.Marshal(m)
	}
	if ty.IsBASH {
		m := map[string]interface{}{"Command::BASH": ty.AsBASHField0}
		return json.Marshal(m)
	}
	if ty.IsZSH {
		m := map[string]interface{}{"Command::ZSH": ty.AsZSHField0}
		return json.Marshal(m)
	}
	if ty.IsNONE {
		return json.Marshal("Command::NONE")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated WeteePrimitivesTypesEditType with id=315
type EditType struct {
	IsINSERT       bool
	IsUPDATE       bool
	AsUPDATEField0 uint16
	IsREMOVE       bool
	AsREMOVEField0 uint16
}

func (ty EditType) Encode(encoder scale.Encoder) (err error) {
	if ty.IsINSERT {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUPDATE {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUPDATEField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsREMOVE {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsREMOVEField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *EditType) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsINSERT = true
		return
	case 1:
		ty.IsUPDATE = true
		err = decoder.Decode(&ty.AsUPDATEField0)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsREMOVE = true
		err = decoder.Decode(&ty.AsREMOVEField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *EditType) Variant() (uint8, error) {
	if ty.IsINSERT {
		return 0, nil
	}
	if ty.IsUPDATE {
		return 1, nil
	}
	if ty.IsREMOVE {
		return 2, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty EditType) MarshalJSON() ([]byte, error) {
	if ty.IsINSERT {
		return json.Marshal("EditType::INSERT")
	}
	if ty.IsUPDATE {
		m := map[string]interface{}{"EditType::UPDATE": ty.AsUPDATEField0}
		return json.Marshal(m)
	}
	if ty.IsREMOVE {
		m := map[string]interface{}{"EditType::REMOVE": ty.AsREMOVEField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated WeteePrimitivesTypesEnvKey with id=316
type EnvKey struct {
	IsEnv        bool
	AsEnvField0  []byte
	IsFile       bool
	AsFileField0 []byte
}

func (ty EnvKey) Encode(encoder scale.Encoder) (err error) {
	if ty.IsEnv {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsEnvField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsFile {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsFileField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *EnvKey) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsEnv = true
		err = decoder.Decode(&ty.AsEnvField0)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsFile = true
		err = decoder.Decode(&ty.AsFileField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *EnvKey) Variant() (uint8, error) {
	if ty.IsEnv {
		return 0, nil
	}
	if ty.IsFile {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty EnvKey) MarshalJSON() ([]byte, error) {
	if ty.IsEnv {
		m := map[string]interface{}{"EnvKey::Env": ty.AsEnvField0}
		return json.Marshal(m)
	}
	if ty.IsFile {
		m := map[string]interface{}{"EnvKey::File": ty.AsFileField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated wetee_primitives_types_EnvInput with id={{false [314]}}
type EnvInput struct {
	// Field 0 with TypeId=315
	Etype EditType
	// Field 1 with TypeId=169
	Index uint16
	// Field 2 with TypeId=316
	K EnvKey
	// Field 3 with TypeId=14
	V []byte
}

// Generated WeteePrimitivesTypesDiskClass with id=319
type DiskClass struct {
	IsSSD       bool
	AsSSDField0 []byte
}

func (ty DiskClass) Encode(encoder scale.Encoder) (err error) {
	if ty.IsSSD {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSSDField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *DiskClass) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsSSD = true
		err = decoder.Decode(&ty.AsSSDField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *DiskClass) Variant() (uint8, error) {
	if ty.IsSSD {
		return 0, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty DiskClass) MarshalJSON() ([]byte, error) {
	if ty.IsSSD {
		m := map[string]interface{}{"DiskClass::SSD": ty.AsSSDField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated wetee_primitives_types_Disk with id={{false [318]}}
type Disk struct {
	// Field 0 with TypeId=319
	Path DiskClass
	// Field 1 with TypeId=4
	Size uint32
}

// Generated wetee_primitives_types_Cr with id={{false [322]}}
type Cr struct {
	// Field 0 with TypeId=4
	Cpu uint32
	// Field 1 with TypeId=4
	Mem uint32
	// Field 2 with TypeId=317
	Disk []Disk
	// Field 3 with TypeId=4
	Gpu uint32
}

// Generated wetee_primitives_types_Container with id={{false [321]}}
type Container struct {
	// Field 0 with TypeId=14
	Image []byte
	// Field 1 with TypeId=312
	Command Command
	// Field 2 with TypeId=310
	Port []Service
	// Field 3 with TypeId=322
	Cr Cr
}

// Generated WeteePrimitivesTypesTEEVersion with id=323
type TEEVersion struct {
	IsSGX bool
	IsCVM bool
}

func (ty TEEVersion) Encode(encoder scale.Encoder) (err error) {
	if ty.IsSGX {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCVM {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *TEEVersion) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsSGX = true
		return
	case 1:
		ty.IsCVM = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *TEEVersion) Variant() (uint8, error) {
	if ty.IsSGX {
		return 0, nil
	}
	if ty.IsCVM {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty TEEVersion) MarshalJSON() ([]byte, error) {
	if ty.IsSGX {
		return json.Marshal("TEEVersion::SGX")
	}
	if ty.IsCVM {
		return json.Marshal("TEEVersion::CVM")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated Option with id=324
type OptionTServiceSlice struct {
	IsNone       bool
	IsSome       bool
	AsSomeField0 []Service
}

func (ty OptionTServiceSlice) Encode(encoder scale.Encoder) (err error) {
	if ty.IsNone {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSome {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSomeField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *OptionTServiceSlice) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsNone = true
		return
	case 1:
		ty.IsSome = true
		err = decoder.Decode(&ty.AsSomeField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *OptionTServiceSlice) Variant() (uint8, error) {
	if ty.IsNone {
		return 0, nil
	}
	if ty.IsSome {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty OptionTServiceSlice) MarshalJSON() ([]byte, error) {
	if ty.IsNone {
		return json.Marshal("OptionTServiceSlice::None")
	}
	if ty.IsSome {
		m := map[string]interface{}{"OptionTServiceSlice::Some": ty.AsSomeField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated Option with id=325
type OptionTCommand struct {
	IsNone       bool
	IsSome       bool
	AsSomeField0 *Command
}

func (ty OptionTCommand) Encode(encoder scale.Encoder) (err error) {
	if ty.IsNone {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSome {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSomeField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *OptionTCommand) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsNone = true
		return
	case 1:
		ty.IsSome = true
		var tmp Command
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsSomeField0 = &tmp
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *OptionTCommand) Variant() (uint8, error) {
	if ty.IsNone {
		return 0, nil
	}
	if ty.IsSome {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty OptionTCommand) MarshalJSON() ([]byte, error) {
	if ty.IsNone {
		return json.Marshal("OptionTCommand::None")
	}
	if ty.IsSome {
		m := map[string]interface{}{"OptionTCommand::Some": ty.AsSomeField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated WeteeAppPalletCall with id=309
type WeteeAppPalletCall struct {
	IsCreate               bool
	AsCreateName0          []byte
	AsCreateImage1         []byte
	AsCreateMeta2          []byte
	AsCreatePort3          []Service
	AsCreateCommand4       Command
	AsCreateEnv5           []EnvInput
	AsCreateCpu6           uint32
	AsCreateMemory7        uint32
	AsCreateDisk8          []Disk
	AsCreateSideContainer9 []Container
	AsCreateLevel10        byte
	AsCreateTeeVersion11   TEEVersion
	IsUpdate               bool
	AsUpdateAppId0         uint64
	AsUpdateNewName1       OptionTByteSlice
	AsUpdateNewImage2      OptionTByteSlice
	AsUpdateNewPort3       OptionTServiceSlice
	AsUpdateNewCommand4    OptionTCommand
	AsUpdateNewEnv5        []EnvInput
	AsUpdateWithRestart6   bool
	IsRestart              bool
	AsRestartAppId0        uint64
}

func (ty WeteeAppPalletCall) Encode(encoder scale.Encoder) (err error) {
	if ty.IsCreate {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateName0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateImage1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateMeta2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreatePort3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateCommand4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateEnv5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateCpu6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateMemory7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateDisk8)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateSideContainer9)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateLevel10)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateTeeVersion11)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUpdate {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateAppId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateNewName1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateNewImage2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateNewPort3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateNewCommand4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateNewEnv5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateWithRestart6)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsRestart {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsRestartAppId0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *WeteeAppPalletCall) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 1:
		ty.IsCreate = true
		err = decoder.Decode(&ty.AsCreateName0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateImage1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateMeta2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreatePort3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateCommand4)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateEnv5)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateCpu6)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateMemory7)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateDisk8)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateSideContainer9)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateLevel10)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateTeeVersion11)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsUpdate = true
		err = decoder.Decode(&ty.AsUpdateAppId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateNewName1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateNewImage2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateNewPort3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateNewCommand4)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateNewEnv5)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateWithRestart6)
		if err != nil {
			return err
		}
		return
	case 6:
		ty.IsRestart = true
		err = decoder.Decode(&ty.AsRestartAppId0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *WeteeAppPalletCall) Variant() (uint8, error) {
	if ty.IsCreate {
		return 1, nil
	}
	if ty.IsUpdate {
		return 2, nil
	}
	if ty.IsRestart {
		return 6, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty WeteeAppPalletCall) MarshalJSON() ([]byte, error) {
	if ty.IsCreate {
		m := map[string]interface{}{"WeteeAppPalletCall::create": map[string]interface{}{
			"AsCreateCommand4":       ty.AsCreateCommand4,
			"AsCreateCpu6":           ty.AsCreateCpu6,
			"AsCreateDisk8":          ty.AsCreateDisk8,
			"AsCreateEnv5":           ty.AsCreateEnv5,
			"AsCreateImage1":         ty.AsCreateImage1,
			"AsCreateLevel10":        ty.AsCreateLevel10,
			"AsCreateMemory7":        ty.AsCreateMemory7,
			"AsCreateMeta2":          ty.AsCreateMeta2,
			"AsCreateName0":          ty.AsCreateName0,
			"AsCreatePort3":          ty.AsCreatePort3,
			"AsCreateSideContainer9": ty.AsCreateSideContainer9,
			"AsCreateTeeVersion11":   ty.AsCreateTeeVersion11,
		}}
		return json.Marshal(m)
	}
	if ty.IsUpdate {
		m := map[string]interface{}{"WeteeAppPalletCall::update": map[string]interface{}{
			"AsUpdateAppId0":       ty.AsUpdateAppId0,
			"AsUpdateNewCommand4":  ty.AsUpdateNewCommand4,
			"AsUpdateNewEnv5":      ty.AsUpdateNewEnv5,
			"AsUpdateNewImage2":    ty.AsUpdateNewImage2,
			"AsUpdateNewName1":     ty.AsUpdateNewName1,
			"AsUpdateNewPort3":     ty.AsUpdateNewPort3,
			"AsUpdateWithRestart6": ty.AsUpdateWithRestart6,
		}}
		return json.Marshal(m)
	}
	if ty.IsRestart {
		m := map[string]interface{}{"WeteeAppPalletCall::restart": ty.AsRestartAppId0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated WeteeTaskPalletCall with id=326
type WeteeTaskPalletCall struct {
	IsCreate             bool
	AsCreateName0        []byte
	AsCreateImage1       []byte
	AsCreateMeta2        []byte
	AsCreatePort3        []Service
	AsCreateCommand4     Command
	AsCreateEnv5         []EnvInput
	AsCreateCpu6         uint32
	AsCreateMemory7      uint32
	AsCreateDisk8        []Disk
	AsCreateLevel9       byte
	AsCreateTeeVersion10 TEEVersion
	IsRerun              bool
	AsRerunId0           uint64
	IsUpdate             bool
	AsUpdateAppId0       uint64
	AsUpdateNewName1     OptionTByteSlice
	AsUpdateNewImage2    OptionTByteSlice
	AsUpdateNewPort3     OptionTServiceSlice
	AsUpdateNewCommand4  OptionTCommand
	AsUpdateNewEnv5      []EnvInput
	AsUpdateWithRestart6 bool
}

func (ty WeteeTaskPalletCall) Encode(encoder scale.Encoder) (err error) {
	if ty.IsCreate {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateName0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateImage1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateMeta2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreatePort3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateCommand4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateEnv5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateCpu6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateMemory7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateDisk8)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateLevel9)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateTeeVersion10)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsRerun {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsRerunId0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUpdate {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateAppId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateNewName1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateNewImage2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateNewPort3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateNewCommand4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateNewEnv5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateWithRestart6)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *WeteeTaskPalletCall) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 1:
		ty.IsCreate = true
		err = decoder.Decode(&ty.AsCreateName0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateImage1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateMeta2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreatePort3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateCommand4)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateEnv5)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateCpu6)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateMemory7)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateDisk8)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateLevel9)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateTeeVersion10)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsRerun = true
		err = decoder.Decode(&ty.AsRerunId0)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsUpdate = true
		err = decoder.Decode(&ty.AsUpdateAppId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateNewName1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateNewImage2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateNewPort3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateNewCommand4)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateNewEnv5)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateWithRestart6)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *WeteeTaskPalletCall) Variant() (uint8, error) {
	if ty.IsCreate {
		return 1, nil
	}
	if ty.IsRerun {
		return 2, nil
	}
	if ty.IsUpdate {
		return 3, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty WeteeTaskPalletCall) MarshalJSON() ([]byte, error) {
	if ty.IsCreate {
		m := map[string]interface{}{"WeteeTaskPalletCall::create": map[string]interface{}{
			"AsCreateCommand4":     ty.AsCreateCommand4,
			"AsCreateCpu6":         ty.AsCreateCpu6,
			"AsCreateDisk8":        ty.AsCreateDisk8,
			"AsCreateEnv5":         ty.AsCreateEnv5,
			"AsCreateImage1":       ty.AsCreateImage1,
			"AsCreateLevel9":       ty.AsCreateLevel9,
			"AsCreateMemory7":      ty.AsCreateMemory7,
			"AsCreateMeta2":        ty.AsCreateMeta2,
			"AsCreateName0":        ty.AsCreateName0,
			"AsCreatePort3":        ty.AsCreatePort3,
			"AsCreateTeeVersion10": ty.AsCreateTeeVersion10,
		}}
		return json.Marshal(m)
	}
	if ty.IsRerun {
		m := map[string]interface{}{"WeteeTaskPalletCall::rerun": ty.AsRerunId0}
		return json.Marshal(m)
	}
	if ty.IsUpdate {
		m := map[string]interface{}{"WeteeTaskPalletCall::update": map[string]interface{}{
			"AsUpdateAppId0":       ty.AsUpdateAppId0,
			"AsUpdateNewCommand4":  ty.AsUpdateNewCommand4,
			"AsUpdateNewEnv5":      ty.AsUpdateNewEnv5,
			"AsUpdateNewImage2":    ty.AsUpdateNewImage2,
			"AsUpdateNewName1":     ty.AsUpdateNewName1,
			"AsUpdateNewPort3":     ty.AsUpdateNewPort3,
			"AsUpdateWithRestart6": ty.AsUpdateWithRestart6,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated WeteeGpuPalletCall with id=327
type WeteeGpuPalletCall struct {
	IsCreate                bool
	AsCreateName0           []byte
	AsCreateImage1          []byte
	AsCreateMeta2           []byte
	AsCreatePort3           []Service
	AsCreateCommand4        Command
	AsCreateEnv5            []EnvInput
	AsCreateCpu6            uint32
	AsCreateMemory7         uint32
	AsCreateDisk8           []Disk
	AsCreateGpu9            uint32
	AsCreateSideContainer10 []Container
	AsCreateLevel11         byte
	AsCreateTeeVersion12    TEEVersion
	IsUpdate                bool
	AsUpdateAppId0          uint64
	AsUpdateNewName1        OptionTByteSlice
	AsUpdateNewImage2       OptionTByteSlice
	AsUpdateNewPort3        OptionTServiceSlice
	AsUpdateNewCommand4     OptionTCommand
	AsUpdateNewEnv5         []EnvInput
	AsUpdateWithRestart6    bool
	IsRestart               bool
	AsRestartAppId0         uint64
}

func (ty WeteeGpuPalletCall) Encode(encoder scale.Encoder) (err error) {
	if ty.IsCreate {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateName0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateImage1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateMeta2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreatePort3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateCommand4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateEnv5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateCpu6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateMemory7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateDisk8)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateGpu9)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateSideContainer10)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateLevel11)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCreateTeeVersion12)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUpdate {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateAppId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateNewName1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateNewImage2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateNewPort3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateNewCommand4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateNewEnv5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUpdateWithRestart6)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsRestart {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsRestartAppId0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *WeteeGpuPalletCall) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 1:
		ty.IsCreate = true
		err = decoder.Decode(&ty.AsCreateName0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateImage1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateMeta2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreatePort3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateCommand4)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateEnv5)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateCpu6)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateMemory7)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateDisk8)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateGpu9)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateSideContainer10)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateLevel11)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCreateTeeVersion12)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsUpdate = true
		err = decoder.Decode(&ty.AsUpdateAppId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateNewName1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateNewImage2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateNewPort3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateNewCommand4)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateNewEnv5)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUpdateWithRestart6)
		if err != nil {
			return err
		}
		return
	case 6:
		ty.IsRestart = true
		err = decoder.Decode(&ty.AsRestartAppId0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *WeteeGpuPalletCall) Variant() (uint8, error) {
	if ty.IsCreate {
		return 1, nil
	}
	if ty.IsUpdate {
		return 2, nil
	}
	if ty.IsRestart {
		return 6, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty WeteeGpuPalletCall) MarshalJSON() ([]byte, error) {
	if ty.IsCreate {
		m := map[string]interface{}{"WeteeGpuPalletCall::create": map[string]interface{}{
			"AsCreateCommand4":        ty.AsCreateCommand4,
			"AsCreateCpu6":            ty.AsCreateCpu6,
			"AsCreateDisk8":           ty.AsCreateDisk8,
			"AsCreateEnv5":            ty.AsCreateEnv5,
			"AsCreateGpu9":            ty.AsCreateGpu9,
			"AsCreateImage1":          ty.AsCreateImage1,
			"AsCreateLevel11":         ty.AsCreateLevel11,
			"AsCreateMemory7":         ty.AsCreateMemory7,
			"AsCreateMeta2":           ty.AsCreateMeta2,
			"AsCreateName0":           ty.AsCreateName0,
			"AsCreatePort3":           ty.AsCreatePort3,
			"AsCreateSideContainer10": ty.AsCreateSideContainer10,
			"AsCreateTeeVersion12":    ty.AsCreateTeeVersion12,
		}}
		return json.Marshal(m)
	}
	if ty.IsUpdate {
		m := map[string]interface{}{"WeteeGpuPalletCall::update": map[string]interface{}{
			"AsUpdateAppId0":       ty.AsUpdateAppId0,
			"AsUpdateNewCommand4":  ty.AsUpdateNewCommand4,
			"AsUpdateNewEnv5":      ty.AsUpdateNewEnv5,
			"AsUpdateNewImage2":    ty.AsUpdateNewImage2,
			"AsUpdateNewName1":     ty.AsUpdateNewName1,
			"AsUpdateNewPort3":     ty.AsUpdateNewPort3,
			"AsUpdateWithRestart6": ty.AsUpdateWithRestart6,
		}}
		return json.Marshal(m)
	}
	if ty.IsRestart {
		m := map[string]interface{}{"WeteeGpuPalletCall::restart": ty.AsRestartAppId0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated Option with id=331
type OptionTU128 struct {
	IsNone       bool
	IsSome       bool
	AsSomeField0 types.U128
}

func (ty OptionTU128) Encode(encoder scale.Encoder) (err error) {
	if ty.IsNone {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSome {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSomeField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *OptionTU128) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsNone = true
		return
	case 1:
		ty.IsSome = true
		err = decoder.Decode(&ty.AsSomeField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *OptionTU128) Variant() (uint8, error) {
	if ty.IsNone {
		return 0, nil
	}
	if ty.IsSome {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty OptionTU128) MarshalJSON() ([]byte, error) {
	if ty.IsNone {
		return json.Marshal("OptionTU128::None")
	}
	if ty.IsSome {
		m := map[string]interface{}{"OptionTU128::Some": ty.AsSomeField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated wetee_worker_types_Ip with id={{false [330]}}
type Ip struct {
	// Field 0 with TypeId=182
	Ipv4 OptionTUint32
	// Field 1 with TypeId=331
	Ipv6 OptionTU128
	// Field 2 with TypeId=293
	Domain OptionTByteSlice
}

// Generated wetee_primitives_types_ComCr with id={{false [335]}}
type ComCr struct {
	// Field 0 with TypeId=4
	Cpu uint32
	// Field 1 with TypeId=4
	Mem uint32
	// Field 2 with TypeId=4
	CvmCpu uint32
	// Field 3 with TypeId=4
	CvmMem uint32
	// Field 4 with TypeId=4
	Disk uint32
	// Field 5 with TypeId=4
	Gpu uint32
}

// Generated wetee_worker_types_ProofOfWork with id={{false [334]}}
type ProofOfWork struct {
	// Field 0 with TypeId=14
	LogHash []byte
	// Field 1 with TypeId=335
	Cr ComCr
	// Field 2 with TypeId=14
	CrHash []byte
}

// Generated Option with id=333
type OptionTProofOfWork struct {
	IsNone       bool
	IsSome       bool
	AsSomeField0 ProofOfWork
}

func (ty OptionTProofOfWork) Encode(encoder scale.Encoder) (err error) {
	if ty.IsNone {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSome {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSomeField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *OptionTProofOfWork) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsNone = true
		return
	case 1:
		ty.IsSome = true
		err = decoder.Decode(&ty.AsSomeField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *OptionTProofOfWork) Variant() (uint8, error) {
	if ty.IsNone {
		return 0, nil
	}
	if ty.IsSome {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty OptionTProofOfWork) MarshalJSON() ([]byte, error) {
	if ty.IsNone {
		return json.Marshal("OptionTProofOfWork::None")
	}
	if ty.IsSome {
		m := map[string]interface{}{"OptionTProofOfWork::Some": ty.AsSomeField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated WeteeWorkerPalletCall with id=328
type WeteeWorkerPalletCall struct {
	IsClusterRegister            bool
	AsClusterRegisterName0       []byte
	AsClusterRegisterIp1         []Ip
	AsClusterRegisterPort2       uint32
	AsClusterRegisterLevel3      byte
	IsClusterProofUpload         bool
	AsClusterProofUploadId0      uint64
	AsClusterProofUploadProof1   []byte
	IsClusterMortgage            bool
	AsClusterMortgageId0         uint64
	AsClusterMortgageCpu1        uint32
	AsClusterMortgageMem2        uint32
	AsClusterMortgageCvmCpu3     uint32
	AsClusterMortgageCvmMem4     uint32
	AsClusterMortgageDisk5       uint32
	AsClusterMortgageGpu6        uint32
	AsClusterMortgageDeposit7    types.UCompact
	IsClusterUnmortgage          bool
	AsClusterUnmortgageId0       uint64
	AsClusterUnmortgageBlockNum1 uint32
	IsWorkProofUpload            bool
	AsWorkProofUploadWorkId0     WorkId
	AsWorkProofUploadProof1      OptionTProofOfWork
	AsWorkProofUploadReport2     OptionTByteSlice
	IsClusterWithdrawal          bool
	AsClusterWithdrawalWorkId0   WorkId
	AsClusterWithdrawalAmount1   types.U128
	IsClusterStop                bool
	AsClusterStopId0             uint64
	IsClusterReport              bool
	AsClusterReportClusterId0    uint64
	AsClusterReportWorkId1       WorkId
	AsClusterReportReason2       []byte
	IsReportClose                bool
	AsReportCloseClusterId0      uint64
	AsReportCloseWorkId1         WorkId
	IsWorkStop                   bool
	AsWorkStopWorkId0            WorkId
}

func (ty WeteeWorkerPalletCall) Encode(encoder scale.Encoder) (err error) {
	if ty.IsClusterRegister {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClusterRegisterName0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClusterRegisterIp1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClusterRegisterPort2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClusterRegisterLevel3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsClusterProofUpload {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClusterProofUploadId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClusterProofUploadProof1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsClusterMortgage {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClusterMortgageId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClusterMortgageCpu1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClusterMortgageMem2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClusterMortgageCvmCpu3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClusterMortgageCvmMem4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClusterMortgageDisk5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClusterMortgageGpu6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClusterMortgageDeposit7)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsClusterUnmortgage {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClusterUnmortgageId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClusterUnmortgageBlockNum1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWorkProofUpload {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWorkProofUploadWorkId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWorkProofUploadProof1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWorkProofUploadReport2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsClusterWithdrawal {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClusterWithdrawalWorkId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClusterWithdrawalAmount1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsClusterStop {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClusterStopId0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsClusterReport {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClusterReportClusterId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClusterReportWorkId1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsClusterReportReason2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReportClose {
		err = encoder.PushByte(9)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReportCloseClusterId0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReportCloseWorkId1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWorkStop {
		err = encoder.PushByte(10)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWorkStopWorkId0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *WeteeWorkerPalletCall) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 1:
		ty.IsClusterRegister = true
		err = decoder.Decode(&ty.AsClusterRegisterName0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsClusterRegisterIp1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsClusterRegisterPort2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsClusterRegisterLevel3)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsClusterProofUpload = true
		err = decoder.Decode(&ty.AsClusterProofUploadId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsClusterProofUploadProof1)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsClusterMortgage = true
		err = decoder.Decode(&ty.AsClusterMortgageId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsClusterMortgageCpu1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsClusterMortgageMem2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsClusterMortgageCvmCpu3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsClusterMortgageCvmMem4)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsClusterMortgageDisk5)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsClusterMortgageGpu6)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsClusterMortgageDeposit7)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsClusterUnmortgage = true
		err = decoder.Decode(&ty.AsClusterUnmortgageId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsClusterUnmortgageBlockNum1)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsWorkProofUpload = true
		err = decoder.Decode(&ty.AsWorkProofUploadWorkId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsWorkProofUploadProof1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsWorkProofUploadReport2)
		if err != nil {
			return err
		}
		return
	case 6:
		ty.IsClusterWithdrawal = true
		err = decoder.Decode(&ty.AsClusterWithdrawalWorkId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsClusterWithdrawalAmount1)
		if err != nil {
			return err
		}
		return
	case 7:
		ty.IsClusterStop = true
		err = decoder.Decode(&ty.AsClusterStopId0)
		if err != nil {
			return err
		}
		return
	case 8:
		ty.IsClusterReport = true
		err = decoder.Decode(&ty.AsClusterReportClusterId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsClusterReportWorkId1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsClusterReportReason2)
		if err != nil {
			return err
		}
		return
	case 9:
		ty.IsReportClose = true
		err = decoder.Decode(&ty.AsReportCloseClusterId0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsReportCloseWorkId1)
		if err != nil {
			return err
		}
		return
	case 10:
		ty.IsWorkStop = true
		err = decoder.Decode(&ty.AsWorkStopWorkId0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *WeteeWorkerPalletCall) Variant() (uint8, error) {
	if ty.IsClusterRegister {
		return 1, nil
	}
	if ty.IsClusterProofUpload {
		return 4, nil
	}
	if ty.IsClusterMortgage {
		return 2, nil
	}
	if ty.IsClusterUnmortgage {
		return 3, nil
	}
	if ty.IsWorkProofUpload {
		return 5, nil
	}
	if ty.IsClusterWithdrawal {
		return 6, nil
	}
	if ty.IsClusterStop {
		return 7, nil
	}
	if ty.IsClusterReport {
		return 8, nil
	}
	if ty.IsReportClose {
		return 9, nil
	}
	if ty.IsWorkStop {
		return 10, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty WeteeWorkerPalletCall) MarshalJSON() ([]byte, error) {
	if ty.IsClusterRegister {
		m := map[string]interface{}{"WeteeWorkerPalletCall::cluster_register": map[string]interface{}{
			"AsClusterRegisterIp1":    ty.AsClusterRegisterIp1,
			"AsClusterRegisterLevel3": ty.AsClusterRegisterLevel3,
			"AsClusterRegisterName0":  ty.AsClusterRegisterName0,
			"AsClusterRegisterPort2":  ty.AsClusterRegisterPort2,
		}}
		return json.Marshal(m)
	}
	if ty.IsClusterProofUpload {
		m := map[string]interface{}{"WeteeWorkerPalletCall::cluster_proof_upload": map[string]interface{}{
			"AsClusterProofUploadId0":    ty.AsClusterProofUploadId0,
			"AsClusterProofUploadProof1": ty.AsClusterProofUploadProof1,
		}}
		return json.Marshal(m)
	}
	if ty.IsClusterMortgage {
		m := map[string]interface{}{"WeteeWorkerPalletCall::cluster_mortgage": map[string]interface{}{
			"AsClusterMortgageCpu1":     ty.AsClusterMortgageCpu1,
			"AsClusterMortgageCvmCpu3":  ty.AsClusterMortgageCvmCpu3,
			"AsClusterMortgageCvmMem4":  ty.AsClusterMortgageCvmMem4,
			"AsClusterMortgageDeposit7": ty.AsClusterMortgageDeposit7,
			"AsClusterMortgageDisk5":    ty.AsClusterMortgageDisk5,
			"AsClusterMortgageGpu6":     ty.AsClusterMortgageGpu6,
			"AsClusterMortgageId0":      ty.AsClusterMortgageId0,
			"AsClusterMortgageMem2":     ty.AsClusterMortgageMem2,
		}}
		return json.Marshal(m)
	}
	if ty.IsClusterUnmortgage {
		m := map[string]interface{}{"WeteeWorkerPalletCall::cluster_unmortgage": map[string]interface{}{
			"AsClusterUnmortgageBlockNum1": ty.AsClusterUnmortgageBlockNum1,
			"AsClusterUnmortgageId0":       ty.AsClusterUnmortgageId0,
		}}
		return json.Marshal(m)
	}
	if ty.IsWorkProofUpload {
		m := map[string]interface{}{"WeteeWorkerPalletCall::work_proof_upload": map[string]interface{}{
			"AsWorkProofUploadProof1":  ty.AsWorkProofUploadProof1,
			"AsWorkProofUploadReport2": ty.AsWorkProofUploadReport2,
			"AsWorkProofUploadWorkId0": ty.AsWorkProofUploadWorkId0,
		}}
		return json.Marshal(m)
	}
	if ty.IsClusterWithdrawal {
		m := map[string]interface{}{"WeteeWorkerPalletCall::cluster_withdrawal": map[string]interface{}{
			"AsClusterWithdrawalAmount1": ty.AsClusterWithdrawalAmount1,
			"AsClusterWithdrawalWorkId0": ty.AsClusterWithdrawalWorkId0,
		}}
		return json.Marshal(m)
	}
	if ty.IsClusterStop {
		m := map[string]interface{}{"WeteeWorkerPalletCall::cluster_stop": ty.AsClusterStopId0}
		return json.Marshal(m)
	}
	if ty.IsClusterReport {
		m := map[string]interface{}{"WeteeWorkerPalletCall::cluster_report": map[string]interface{}{
			"AsClusterReportClusterId0": ty.AsClusterReportClusterId0,
			"AsClusterReportReason2":    ty.AsClusterReportReason2,
			"AsClusterReportWorkId1":    ty.AsClusterReportWorkId1,
		}}
		return json.Marshal(m)
	}
	if ty.IsReportClose {
		m := map[string]interface{}{"WeteeWorkerPalletCall::report_close": map[string]interface{}{
			"AsReportCloseClusterId0": ty.AsReportCloseClusterId0,
			"AsReportCloseWorkId1":    ty.AsReportCloseWorkId1,
		}}
		return json.Marshal(m)
	}
	if ty.IsWorkStop {
		m := map[string]interface{}{"WeteeWorkerPalletCall::work_stop": ty.AsWorkStopWorkId0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated Option with id=337
type OptionTUCompact struct {
	IsNone       bool
	IsSome       bool
	AsSomeField0 types.UCompact
}

func (ty OptionTUCompact) Encode(encoder scale.Encoder) (err error) {
	if ty.IsNone {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSome {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSomeField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *OptionTUCompact) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsNone = true
		return
	case 1:
		ty.IsSome = true
		err = decoder.Decode(&ty.AsSomeField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *OptionTUCompact) Variant() (uint8, error) {
	if ty.IsNone {
		return 0, nil
	}
	if ty.IsSome {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty OptionTUCompact) MarshalJSON() ([]byte, error) {
	if ty.IsNone {
		return json.Marshal("OptionTUCompact::None")
	}
	if ty.IsSome {
		m := map[string]interface{}{"OptionTUCompact::Some": ty.AsSomeField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated PalletContractsWasmDeterminism with id=338
type Determinism struct {
	IsEnforced bool
	IsRelaxed  bool
}

func (ty Determinism) Encode(encoder scale.Encoder) (err error) {
	if ty.IsEnforced {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsRelaxed {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Determinism) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsEnforced = true
		return
	case 1:
		ty.IsRelaxed = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Determinism) Variant() (uint8, error) {
	if ty.IsEnforced {
		return 0, nil
	}
	if ty.IsRelaxed {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Determinism) MarshalJSON() ([]byte, error) {
	if ty.IsEnforced {
		return json.Marshal("Determinism::Enforced")
	}
	if ty.IsRelaxed {
		return json.Marshal("Determinism::Relaxed")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated PalletContractsPalletCall with id=336
type PalletContractsPalletCall struct {
	IsCallOldWeight                                    bool
	AsCallOldWeightDest0                               MultiAddress
	AsCallOldWeightValue1                              types.UCompact
	AsCallOldWeightGasLimit2                           types.UCompact
	AsCallOldWeightStorageDepositLimit3                OptionTUCompact
	AsCallOldWeightData4                               []byte
	IsInstantiateWithCodeOldWeight                     bool
	AsInstantiateWithCodeOldWeightValue0               types.UCompact
	AsInstantiateWithCodeOldWeightGasLimit1            types.UCompact
	AsInstantiateWithCodeOldWeightStorageDepositLimit2 OptionTUCompact
	AsInstantiateWithCodeOldWeightCode3                []byte
	AsInstantiateWithCodeOldWeightData4                []byte
	AsInstantiateWithCodeOldWeightSalt5                []byte
	IsInstantiateOldWeight                             bool
	AsInstantiateOldWeightValue0                       types.UCompact
	AsInstantiateOldWeightGasLimit1                    types.UCompact
	AsInstantiateOldWeightStorageDepositLimit2         OptionTUCompact
	AsInstantiateOldWeightCodeHash3                    [32]byte
	AsInstantiateOldWeightData4                        []byte
	AsInstantiateOldWeightSalt5                        []byte
	IsUploadCode                                       bool
	AsUploadCodeCode0                                  []byte
	AsUploadCodeStorageDepositLimit1                   OptionTUCompact
	AsUploadCodeDeterminism2                           Determinism
	IsRemoveCode                                       bool
	AsRemoveCodeCodeHash0                              [32]byte
	IsSetCode                                          bool
	AsSetCodeDest0                                     MultiAddress
	AsSetCodeCodeHash1                                 [32]byte
	IsCall                                             bool
	AsCallDest0                                        MultiAddress
	AsCallValue1                                       types.UCompact
	AsCallGasLimit2                                    Weight
	AsCallStorageDepositLimit3                         OptionTUCompact
	AsCallData4                                        []byte
	IsInstantiateWithCode                              bool
	AsInstantiateWithCodeValue0                        types.UCompact
	AsInstantiateWithCodeGasLimit1                     Weight
	AsInstantiateWithCodeStorageDepositLimit2          OptionTUCompact
	AsInstantiateWithCodeCode3                         []byte
	AsInstantiateWithCodeData4                         []byte
	AsInstantiateWithCodeSalt5                         []byte
	IsInstantiate                                      bool
	AsInstantiateValue0                                types.UCompact
	AsInstantiateGasLimit1                             Weight
	AsInstantiateStorageDepositLimit2                  OptionTUCompact
	AsInstantiateCodeHash3                             [32]byte
	AsInstantiateData4                                 []byte
	AsInstantiateSalt5                                 []byte
	IsMigrate                                          bool
	AsMigrateWeightLimit0                              Weight
}

func (ty PalletContractsPalletCall) Encode(encoder scale.Encoder) (err error) {
	if ty.IsCallOldWeight {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCallOldWeightDest0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCallOldWeightValue1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCallOldWeightGasLimit2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCallOldWeightStorageDepositLimit3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCallOldWeightData4)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsInstantiateWithCodeOldWeight {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInstantiateWithCodeOldWeightValue0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInstantiateWithCodeOldWeightGasLimit1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInstantiateWithCodeOldWeightStorageDepositLimit2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInstantiateWithCodeOldWeightCode3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInstantiateWithCodeOldWeightData4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInstantiateWithCodeOldWeightSalt5)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsInstantiateOldWeight {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInstantiateOldWeightValue0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInstantiateOldWeightGasLimit1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInstantiateOldWeightStorageDepositLimit2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInstantiateOldWeightCodeHash3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInstantiateOldWeightData4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInstantiateOldWeightSalt5)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUploadCode {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUploadCodeCode0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUploadCodeStorageDepositLimit1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUploadCodeDeterminism2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsRemoveCode {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsRemoveCodeCodeHash0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSetCode {
		err = encoder.PushByte(5)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetCodeDest0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSetCodeCodeHash1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCall {
		err = encoder.PushByte(6)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCallDest0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCallValue1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCallGasLimit2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCallStorageDepositLimit3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCallData4)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsInstantiateWithCode {
		err = encoder.PushByte(7)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInstantiateWithCodeValue0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInstantiateWithCodeGasLimit1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInstantiateWithCodeStorageDepositLimit2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInstantiateWithCodeCode3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInstantiateWithCodeData4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInstantiateWithCodeSalt5)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsInstantiate {
		err = encoder.PushByte(8)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInstantiateValue0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInstantiateGasLimit1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInstantiateStorageDepositLimit2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInstantiateCodeHash3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInstantiateData4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsInstantiateSalt5)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsMigrate {
		err = encoder.PushByte(9)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsMigrateWeightLimit0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *PalletContractsPalletCall) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsCallOldWeight = true
		err = decoder.Decode(&ty.AsCallOldWeightDest0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCallOldWeightValue1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCallOldWeightGasLimit2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCallOldWeightStorageDepositLimit3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCallOldWeightData4)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsInstantiateWithCodeOldWeight = true
		err = decoder.Decode(&ty.AsInstantiateWithCodeOldWeightValue0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInstantiateWithCodeOldWeightGasLimit1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInstantiateWithCodeOldWeightStorageDepositLimit2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInstantiateWithCodeOldWeightCode3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInstantiateWithCodeOldWeightData4)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInstantiateWithCodeOldWeightSalt5)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsInstantiateOldWeight = true
		err = decoder.Decode(&ty.AsInstantiateOldWeightValue0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInstantiateOldWeightGasLimit1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInstantiateOldWeightStorageDepositLimit2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInstantiateOldWeightCodeHash3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInstantiateOldWeightData4)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInstantiateOldWeightSalt5)
		if err != nil {
			return err
		}
		return
	case 3:
		ty.IsUploadCode = true
		err = decoder.Decode(&ty.AsUploadCodeCode0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUploadCodeStorageDepositLimit1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsUploadCodeDeterminism2)
		if err != nil {
			return err
		}
		return
	case 4:
		ty.IsRemoveCode = true
		err = decoder.Decode(&ty.AsRemoveCodeCodeHash0)
		if err != nil {
			return err
		}
		return
	case 5:
		ty.IsSetCode = true
		err = decoder.Decode(&ty.AsSetCodeDest0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsSetCodeCodeHash1)
		if err != nil {
			return err
		}
		return
	case 6:
		ty.IsCall = true
		err = decoder.Decode(&ty.AsCallDest0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCallValue1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCallGasLimit2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCallStorageDepositLimit3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsCallData4)
		if err != nil {
			return err
		}
		return
	case 7:
		ty.IsInstantiateWithCode = true
		err = decoder.Decode(&ty.AsInstantiateWithCodeValue0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInstantiateWithCodeGasLimit1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInstantiateWithCodeStorageDepositLimit2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInstantiateWithCodeCode3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInstantiateWithCodeData4)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInstantiateWithCodeSalt5)
		if err != nil {
			return err
		}
		return
	case 8:
		ty.IsInstantiate = true
		err = decoder.Decode(&ty.AsInstantiateValue0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInstantiateGasLimit1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInstantiateStorageDepositLimit2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInstantiateCodeHash3)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInstantiateData4)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsInstantiateSalt5)
		if err != nil {
			return err
		}
		return
	case 9:
		ty.IsMigrate = true
		err = decoder.Decode(&ty.AsMigrateWeightLimit0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *PalletContractsPalletCall) Variant() (uint8, error) {
	if ty.IsCallOldWeight {
		return 0, nil
	}
	if ty.IsInstantiateWithCodeOldWeight {
		return 1, nil
	}
	if ty.IsInstantiateOldWeight {
		return 2, nil
	}
	if ty.IsUploadCode {
		return 3, nil
	}
	if ty.IsRemoveCode {
		return 4, nil
	}
	if ty.IsSetCode {
		return 5, nil
	}
	if ty.IsCall {
		return 6, nil
	}
	if ty.IsInstantiateWithCode {
		return 7, nil
	}
	if ty.IsInstantiate {
		return 8, nil
	}
	if ty.IsMigrate {
		return 9, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty PalletContractsPalletCall) MarshalJSON() ([]byte, error) {
	if ty.IsCallOldWeight {
		m := map[string]interface{}{"PalletContractsPalletCall::call_old_weight": map[string]interface{}{
			"AsCallOldWeightData4":                ty.AsCallOldWeightData4,
			"AsCallOldWeightDest0":                ty.AsCallOldWeightDest0,
			"AsCallOldWeightGasLimit2":            ty.AsCallOldWeightGasLimit2,
			"AsCallOldWeightStorageDepositLimit3": ty.AsCallOldWeightStorageDepositLimit3,
			"AsCallOldWeightValue1":               ty.AsCallOldWeightValue1,
		}}
		return json.Marshal(m)
	}
	if ty.IsInstantiateWithCodeOldWeight {
		m := map[string]interface{}{"PalletContractsPalletCall::instantiate_with_code_old_weight": map[string]interface{}{
			"AsInstantiateWithCodeOldWeightCode3":                ty.AsInstantiateWithCodeOldWeightCode3,
			"AsInstantiateWithCodeOldWeightData4":                ty.AsInstantiateWithCodeOldWeightData4,
			"AsInstantiateWithCodeOldWeightGasLimit1":            ty.AsInstantiateWithCodeOldWeightGasLimit1,
			"AsInstantiateWithCodeOldWeightSalt5":                ty.AsInstantiateWithCodeOldWeightSalt5,
			"AsInstantiateWithCodeOldWeightStorageDepositLimit2": ty.AsInstantiateWithCodeOldWeightStorageDepositLimit2,
			"AsInstantiateWithCodeOldWeightValue0":               ty.AsInstantiateWithCodeOldWeightValue0,
		}}
		return json.Marshal(m)
	}
	if ty.IsInstantiateOldWeight {
		m := map[string]interface{}{"PalletContractsPalletCall::instantiate_old_weight": map[string]interface{}{
			"AsInstantiateOldWeightCodeHash3":            ty.AsInstantiateOldWeightCodeHash3,
			"AsInstantiateOldWeightData4":                ty.AsInstantiateOldWeightData4,
			"AsInstantiateOldWeightGasLimit1":            ty.AsInstantiateOldWeightGasLimit1,
			"AsInstantiateOldWeightSalt5":                ty.AsInstantiateOldWeightSalt5,
			"AsInstantiateOldWeightStorageDepositLimit2": ty.AsInstantiateOldWeightStorageDepositLimit2,
			"AsInstantiateOldWeightValue0":               ty.AsInstantiateOldWeightValue0,
		}}
		return json.Marshal(m)
	}
	if ty.IsUploadCode {
		m := map[string]interface{}{"PalletContractsPalletCall::upload_code": map[string]interface{}{
			"AsUploadCodeCode0":                ty.AsUploadCodeCode0,
			"AsUploadCodeDeterminism2":         ty.AsUploadCodeDeterminism2,
			"AsUploadCodeStorageDepositLimit1": ty.AsUploadCodeStorageDepositLimit1,
		}}
		return json.Marshal(m)
	}
	if ty.IsRemoveCode {
		m := map[string]interface{}{"PalletContractsPalletCall::remove_code": ty.AsRemoveCodeCodeHash0}
		return json.Marshal(m)
	}
	if ty.IsSetCode {
		m := map[string]interface{}{"PalletContractsPalletCall::set_code": map[string]interface{}{
			"AsSetCodeCodeHash1": ty.AsSetCodeCodeHash1,
			"AsSetCodeDest0":     ty.AsSetCodeDest0,
		}}
		return json.Marshal(m)
	}
	if ty.IsCall {
		m := map[string]interface{}{"PalletContractsPalletCall::call": map[string]interface{}{
			"AsCallData4":                ty.AsCallData4,
			"AsCallDest0":                ty.AsCallDest0,
			"AsCallGasLimit2":            ty.AsCallGasLimit2,
			"AsCallStorageDepositLimit3": ty.AsCallStorageDepositLimit3,
			"AsCallValue1":               ty.AsCallValue1,
		}}
		return json.Marshal(m)
	}
	if ty.IsInstantiateWithCode {
		m := map[string]interface{}{"PalletContractsPalletCall::instantiate_with_code": map[string]interface{}{
			"AsInstantiateWithCodeCode3":                ty.AsInstantiateWithCodeCode3,
			"AsInstantiateWithCodeData4":                ty.AsInstantiateWithCodeData4,
			"AsInstantiateWithCodeGasLimit1":            ty.AsInstantiateWithCodeGasLimit1,
			"AsInstantiateWithCodeSalt5":                ty.AsInstantiateWithCodeSalt5,
			"AsInstantiateWithCodeStorageDepositLimit2": ty.AsInstantiateWithCodeStorageDepositLimit2,
			"AsInstantiateWithCodeValue0":               ty.AsInstantiateWithCodeValue0,
		}}
		return json.Marshal(m)
	}
	if ty.IsInstantiate {
		m := map[string]interface{}{"PalletContractsPalletCall::instantiate": map[string]interface{}{
			"AsInstantiateCodeHash3":            ty.AsInstantiateCodeHash3,
			"AsInstantiateData4":                ty.AsInstantiateData4,
			"AsInstantiateGasLimit1":            ty.AsInstantiateGasLimit1,
			"AsInstantiateSalt5":                ty.AsInstantiateSalt5,
			"AsInstantiateStorageDepositLimit2": ty.AsInstantiateStorageDepositLimit2,
			"AsInstantiateValue0":               ty.AsInstantiateValue0,
		}}
		return json.Marshal(m)
	}
	if ty.IsMigrate {
		m := map[string]interface{}{"PalletContractsPalletCall::migrate": ty.AsMigrateWeightLimit0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated ParachainWeteeRuntimeRuntimeCall with id=237
type RuntimeCall struct {
	IsSystem                  bool
	AsSystemField0            *FrameSystemPalletCall
	IsParachainSystem         bool
	AsParachainSystemField0   *CumulusPalletParachainSystemPalletCall
	IsTimestamp               bool
	AsTimestampField0         *PalletTimestampPalletCall
	IsParachainInfo           bool
	AsParachainInfoField0     *struct{}
	IsBalances                bool
	AsBalancesField0          *PalletBalancesPalletCall
	IsSudo                    bool
	AsSudoField0              *PalletSudoPalletCall
	IsCollatorSelection       bool
	AsCollatorSelectionField0 *PalletCollatorSelectionPalletCall
	IsSession                 bool
	AsSessionField0           *PalletSessionPalletCall
	IsXcmpQueue               bool
	AsXcmpQueueField0         *CumulusPalletXcmpQueuePalletCall
	IsPolkadotXcm             bool
	AsPolkadotXcmField0       *PalletXcmPalletCall
	IsCumulusXcm              bool
	AsCumulusXcmField0        *struct{}
	IsMessageQueue            bool
	AsMessageQueueField0      *PalletMessageQueuePalletCall
	IsTokens                  bool
	AsTokensField0            *OrmlTokensModuleCall
	IsWeTEEMessageQueue       bool
	AsWeTEEMessageQueueField0 *WeteeMessageQueuePalletCall
	IsUtility                 bool
	AsUtilityField0           *PalletUtilityPalletCall
	IsWeTEEOrg                bool
	AsWeTEEOrgField0          *WeteeOrgPalletCall
	IsWeTEEAsset              bool
	AsWeTEEAssetField0        *WeteeAssetsPalletCall
	IsWeTEESudo               bool
	AsWeTEESudoField0         *WeteeSudoPalletCall
	IsWeTEEGuild              bool
	AsWeTEEGuildField0        *WeteeGuildPalletCall
	IsWeTEEProject            bool
	AsWeTEEProjectField0      *WeteeProjectPalletCall
	IsWeTEEGov                bool
	AsWeTEEGovField0          *WeteeGovPalletCall
	IsWeTEETreasury           bool
	AsWeTEETreasuryField0     *WeteeTreasuryPalletCall
	IsWeTEEApp                bool
	AsWeTEEAppField0          *WeteeAppPalletCall
	IsWeTEETask               bool
	AsWeTEETaskField0         *WeteeTaskPalletCall
	IsWeTEEGpu                bool
	AsWeTEEGpuField0          *WeteeGpuPalletCall
	IsWeTEEWorker             bool
	AsWeTEEWorkerField0       *WeteeWorkerPalletCall
	IsContracts               bool
	AsContractsField0         *PalletContractsPalletCall
}

func (ty RuntimeCall) Encode(encoder scale.Encoder) (err error) {
	if ty.IsSystem {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSystemField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsParachainSystem {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsParachainSystemField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTimestamp {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTimestampField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsParachainInfo {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsParachainInfoField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsBalances {
		err = encoder.PushByte(10)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsBalancesField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSudo {
		err = encoder.PushByte(15)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSudoField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCollatorSelection {
		err = encoder.PushByte(21)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCollatorSelectionField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSession {
		err = encoder.PushByte(22)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSessionField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsXcmpQueue {
		err = encoder.PushByte(30)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsXcmpQueueField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsPolkadotXcm {
		err = encoder.PushByte(31)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPolkadotXcmField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsCumulusXcm {
		err = encoder.PushByte(32)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsCumulusXcmField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsMessageQueue {
		err = encoder.PushByte(33)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsMessageQueueField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsTokens {
		err = encoder.PushByte(107)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsTokensField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWeTEEMessageQueue {
		err = encoder.PushByte(109)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWeTEEMessageQueueField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsUtility {
		err = encoder.PushByte(110)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsUtilityField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWeTEEOrg {
		err = encoder.PushByte(111)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWeTEEOrgField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWeTEEAsset {
		err = encoder.PushByte(112)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWeTEEAssetField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWeTEESudo {
		err = encoder.PushByte(113)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWeTEESudoField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWeTEEGuild {
		err = encoder.PushByte(114)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWeTEEGuildField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWeTEEProject {
		err = encoder.PushByte(115)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWeTEEProjectField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWeTEEGov {
		err = encoder.PushByte(116)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWeTEEGovField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWeTEETreasury {
		err = encoder.PushByte(117)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWeTEETreasuryField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWeTEEApp {
		err = encoder.PushByte(118)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWeTEEAppField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWeTEETask {
		err = encoder.PushByte(119)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWeTEETaskField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWeTEEGpu {
		err = encoder.PushByte(120)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWeTEEGpuField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsWeTEEWorker {
		err = encoder.PushByte(121)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsWeTEEWorkerField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsContracts {
		err = encoder.PushByte(122)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsContractsField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *RuntimeCall) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsSystem = true
		var tmp FrameSystemPalletCall
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsSystemField0 = &tmp
		return
	case 1:
		ty.IsParachainSystem = true
		var tmp CumulusPalletParachainSystemPalletCall
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsParachainSystemField0 = &tmp
		return
	case 2:
		ty.IsTimestamp = true
		var tmp PalletTimestampPalletCall
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsTimestampField0 = &tmp
		return
	case 3:
		ty.IsParachainInfo = true
		var tmp struct{}
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsParachainInfoField0 = &tmp
		return
	case 10:
		ty.IsBalances = true
		var tmp PalletBalancesPalletCall
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsBalancesField0 = &tmp
		return
	case 15:
		ty.IsSudo = true
		var tmp PalletSudoPalletCall
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsSudoField0 = &tmp
		return
	case 21:
		ty.IsCollatorSelection = true
		var tmp PalletCollatorSelectionPalletCall
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsCollatorSelectionField0 = &tmp
		return
	case 22:
		ty.IsSession = true
		var tmp PalletSessionPalletCall
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsSessionField0 = &tmp
		return
	case 30:
		ty.IsXcmpQueue = true
		var tmp CumulusPalletXcmpQueuePalletCall
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsXcmpQueueField0 = &tmp
		return
	case 31:
		ty.IsPolkadotXcm = true
		var tmp PalletXcmPalletCall
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsPolkadotXcmField0 = &tmp
		return
	case 32:
		ty.IsCumulusXcm = true
		var tmp struct{}
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsCumulusXcmField0 = &tmp
		return
	case 33:
		ty.IsMessageQueue = true
		var tmp PalletMessageQueuePalletCall
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsMessageQueueField0 = &tmp
		return
	case 107:
		ty.IsTokens = true
		var tmp OrmlTokensModuleCall
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsTokensField0 = &tmp
		return
	case 109:
		ty.IsWeTEEMessageQueue = true
		var tmp WeteeMessageQueuePalletCall
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsWeTEEMessageQueueField0 = &tmp
		return
	case 110:
		ty.IsUtility = true
		var tmp PalletUtilityPalletCall
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsUtilityField0 = &tmp
		return
	case 111:
		ty.IsWeTEEOrg = true
		var tmp WeteeOrgPalletCall
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsWeTEEOrgField0 = &tmp
		return
	case 112:
		ty.IsWeTEEAsset = true
		var tmp WeteeAssetsPalletCall
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsWeTEEAssetField0 = &tmp
		return
	case 113:
		ty.IsWeTEESudo = true
		var tmp WeteeSudoPalletCall
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsWeTEESudoField0 = &tmp
		return
	case 114:
		ty.IsWeTEEGuild = true
		var tmp WeteeGuildPalletCall
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsWeTEEGuildField0 = &tmp
		return
	case 115:
		ty.IsWeTEEProject = true
		var tmp WeteeProjectPalletCall
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsWeTEEProjectField0 = &tmp
		return
	case 116:
		ty.IsWeTEEGov = true
		var tmp WeteeGovPalletCall
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsWeTEEGovField0 = &tmp
		return
	case 117:
		ty.IsWeTEETreasury = true
		var tmp WeteeTreasuryPalletCall
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsWeTEETreasuryField0 = &tmp
		return
	case 118:
		ty.IsWeTEEApp = true
		var tmp WeteeAppPalletCall
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsWeTEEAppField0 = &tmp
		return
	case 119:
		ty.IsWeTEETask = true
		var tmp WeteeTaskPalletCall
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsWeTEETaskField0 = &tmp
		return
	case 120:
		ty.IsWeTEEGpu = true
		var tmp WeteeGpuPalletCall
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsWeTEEGpuField0 = &tmp
		return
	case 121:
		ty.IsWeTEEWorker = true
		var tmp WeteeWorkerPalletCall
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsWeTEEWorkerField0 = &tmp
		return
	case 122:
		ty.IsContracts = true
		var tmp PalletContractsPalletCall
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsContractsField0 = &tmp
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *RuntimeCall) Variant() (uint8, error) {
	if ty.IsSystem {
		return 0, nil
	}
	if ty.IsParachainSystem {
		return 1, nil
	}
	if ty.IsTimestamp {
		return 2, nil
	}
	if ty.IsParachainInfo {
		return 3, nil
	}
	if ty.IsBalances {
		return 10, nil
	}
	if ty.IsSudo {
		return 15, nil
	}
	if ty.IsCollatorSelection {
		return 21, nil
	}
	if ty.IsSession {
		return 22, nil
	}
	if ty.IsXcmpQueue {
		return 30, nil
	}
	if ty.IsPolkadotXcm {
		return 31, nil
	}
	if ty.IsCumulusXcm {
		return 32, nil
	}
	if ty.IsMessageQueue {
		return 33, nil
	}
	if ty.IsTokens {
		return 107, nil
	}
	if ty.IsWeTEEMessageQueue {
		return 109, nil
	}
	if ty.IsUtility {
		return 110, nil
	}
	if ty.IsWeTEEOrg {
		return 111, nil
	}
	if ty.IsWeTEEAsset {
		return 112, nil
	}
	if ty.IsWeTEESudo {
		return 113, nil
	}
	if ty.IsWeTEEGuild {
		return 114, nil
	}
	if ty.IsWeTEEProject {
		return 115, nil
	}
	if ty.IsWeTEEGov {
		return 116, nil
	}
	if ty.IsWeTEETreasury {
		return 117, nil
	}
	if ty.IsWeTEEApp {
		return 118, nil
	}
	if ty.IsWeTEETask {
		return 119, nil
	}
	if ty.IsWeTEEGpu {
		return 120, nil
	}
	if ty.IsWeTEEWorker {
		return 121, nil
	}
	if ty.IsContracts {
		return 122, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty RuntimeCall) MarshalJSON() ([]byte, error) {
	if ty.IsSystem {
		m := map[string]interface{}{"RuntimeCall::System": ty.AsSystemField0}
		return json.Marshal(m)
	}
	if ty.IsParachainSystem {
		m := map[string]interface{}{"RuntimeCall::ParachainSystem": ty.AsParachainSystemField0}
		return json.Marshal(m)
	}
	if ty.IsTimestamp {
		m := map[string]interface{}{"RuntimeCall::Timestamp": ty.AsTimestampField0}
		return json.Marshal(m)
	}
	if ty.IsParachainInfo {
		m := map[string]interface{}{"RuntimeCall::ParachainInfo": ty.AsParachainInfoField0}
		return json.Marshal(m)
	}
	if ty.IsBalances {
		m := map[string]interface{}{"RuntimeCall::Balances": ty.AsBalancesField0}
		return json.Marshal(m)
	}
	if ty.IsSudo {
		m := map[string]interface{}{"RuntimeCall::Sudo": ty.AsSudoField0}
		return json.Marshal(m)
	}
	if ty.IsCollatorSelection {
		m := map[string]interface{}{"RuntimeCall::CollatorSelection": ty.AsCollatorSelectionField0}
		return json.Marshal(m)
	}
	if ty.IsSession {
		m := map[string]interface{}{"RuntimeCall::Session": ty.AsSessionField0}
		return json.Marshal(m)
	}
	if ty.IsXcmpQueue {
		m := map[string]interface{}{"RuntimeCall::XcmpQueue": ty.AsXcmpQueueField0}
		return json.Marshal(m)
	}
	if ty.IsPolkadotXcm {
		m := map[string]interface{}{"RuntimeCall::PolkadotXcm": ty.AsPolkadotXcmField0}
		return json.Marshal(m)
	}
	if ty.IsCumulusXcm {
		m := map[string]interface{}{"RuntimeCall::CumulusXcm": ty.AsCumulusXcmField0}
		return json.Marshal(m)
	}
	if ty.IsMessageQueue {
		m := map[string]interface{}{"RuntimeCall::MessageQueue": ty.AsMessageQueueField0}
		return json.Marshal(m)
	}
	if ty.IsTokens {
		m := map[string]interface{}{"RuntimeCall::Tokens": ty.AsTokensField0}
		return json.Marshal(m)
	}
	if ty.IsWeTEEMessageQueue {
		m := map[string]interface{}{"RuntimeCall::WeTEEMessageQueue": ty.AsWeTEEMessageQueueField0}
		return json.Marshal(m)
	}
	if ty.IsUtility {
		m := map[string]interface{}{"RuntimeCall::Utility": ty.AsUtilityField0}
		return json.Marshal(m)
	}
	if ty.IsWeTEEOrg {
		m := map[string]interface{}{"RuntimeCall::WeTEEOrg": ty.AsWeTEEOrgField0}
		return json.Marshal(m)
	}
	if ty.IsWeTEEAsset {
		m := map[string]interface{}{"RuntimeCall::WeTEEAsset": ty.AsWeTEEAssetField0}
		return json.Marshal(m)
	}
	if ty.IsWeTEESudo {
		m := map[string]interface{}{"RuntimeCall::WeTEESudo": ty.AsWeTEESudoField0}
		return json.Marshal(m)
	}
	if ty.IsWeTEEGuild {
		m := map[string]interface{}{"RuntimeCall::WeTEEGuild": ty.AsWeTEEGuildField0}
		return json.Marshal(m)
	}
	if ty.IsWeTEEProject {
		m := map[string]interface{}{"RuntimeCall::WeTEEProject": ty.AsWeTEEProjectField0}
		return json.Marshal(m)
	}
	if ty.IsWeTEEGov {
		m := map[string]interface{}{"RuntimeCall::WeTEEGov": ty.AsWeTEEGovField0}
		return json.Marshal(m)
	}
	if ty.IsWeTEETreasury {
		m := map[string]interface{}{"RuntimeCall::WeTEETreasury": ty.AsWeTEETreasuryField0}
		return json.Marshal(m)
	}
	if ty.IsWeTEEApp {
		m := map[string]interface{}{"RuntimeCall::WeTEEApp": ty.AsWeTEEAppField0}
		return json.Marshal(m)
	}
	if ty.IsWeTEETask {
		m := map[string]interface{}{"RuntimeCall::WeTEETask": ty.AsWeTEETaskField0}
		return json.Marshal(m)
	}
	if ty.IsWeTEEGpu {
		m := map[string]interface{}{"RuntimeCall::WeTEEGpu": ty.AsWeTEEGpuField0}
		return json.Marshal(m)
	}
	if ty.IsWeTEEWorker {
		m := map[string]interface{}{"RuntimeCall::WeTEEWorker": ty.AsWeTEEWorkerField0}
		return json.Marshal(m)
	}
	if ty.IsContracts {
		m := map[string]interface{}{"RuntimeCall::Contracts": ty.AsContractsField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated cumulus_pallet_parachain_system_unincluded_segment_HrmpChannelUpdate with id={{false [175]}}
type HrmpChannelUpdate struct {
	// Field 0 with TypeId=4
	MsgCount uint32
	// Field 1 with TypeId=4
	TotalBytes uint32
}

// Tuple type generated from metadata id 177
type TupleOfUint32HrmpChannelUpdate struct {
	Elem0 uint32
	Elem1 HrmpChannelUpdate
}

// Generated cumulus_pallet_parachain_system_unincluded_segment_UsedBandwidth with id={{false [173]}}
type UsedBandwidth struct {
	// Field 0 with TypeId=4
	UmpMsgCount uint32
	// Field 1 with TypeId=4
	UmpTotalBytes uint32
	// Field 2 with TypeId=174
	HrmpOutgoing []TupleOfUint32HrmpChannelUpdate
}

// Generated Option with id=178
type OptionTByteArray322 struct {
	IsNone       bool
	IsSome       bool
	AsSomeField0 [32]byte
}

func (ty OptionTByteArray322) Encode(encoder scale.Encoder) (err error) {
	if ty.IsNone {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSome {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSomeField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *OptionTByteArray322) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsNone = true
		return
	case 1:
		ty.IsSome = true
		err = decoder.Decode(&ty.AsSomeField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *OptionTByteArray322) Variant() (uint8, error) {
	if ty.IsNone {
		return 0, nil
	}
	if ty.IsSome {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty OptionTByteArray322) MarshalJSON() ([]byte, error) {
	if ty.IsNone {
		return json.Marshal("OptionTByteArray322::None")
	}
	if ty.IsSome {
		m := map[string]interface{}{"OptionTByteArray322::Some": ty.AsSomeField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated PolkadotPrimitivesV7UpgradeGoAhead with id=180
type UpgradeGoAhead struct {
	IsAbort   bool
	IsGoAhead bool
}

func (ty UpgradeGoAhead) Encode(encoder scale.Encoder) (err error) {
	if ty.IsAbort {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsGoAhead {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *UpgradeGoAhead) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsAbort = true
		return
	case 1:
		ty.IsGoAhead = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *UpgradeGoAhead) Variant() (uint8, error) {
	if ty.IsAbort {
		return 0, nil
	}
	if ty.IsGoAhead {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty UpgradeGoAhead) MarshalJSON() ([]byte, error) {
	if ty.IsAbort {
		return json.Marshal("UpgradeGoAhead::Abort")
	}
	if ty.IsGoAhead {
		return json.Marshal("UpgradeGoAhead::GoAhead")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated Option with id=179
type OptionTUpgradeGoAhead struct {
	IsNone       bool
	IsSome       bool
	AsSomeField0 *UpgradeGoAhead
}

func (ty OptionTUpgradeGoAhead) Encode(encoder scale.Encoder) (err error) {
	if ty.IsNone {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSome {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSomeField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *OptionTUpgradeGoAhead) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsNone = true
		return
	case 1:
		ty.IsSome = true
		var tmp UpgradeGoAhead
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsSomeField0 = &tmp
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *OptionTUpgradeGoAhead) Variant() (uint8, error) {
	if ty.IsNone {
		return 0, nil
	}
	if ty.IsSome {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty OptionTUpgradeGoAhead) MarshalJSON() ([]byte, error) {
	if ty.IsNone {
		return json.Marshal("OptionTUpgradeGoAhead::None")
	}
	if ty.IsSome {
		m := map[string]interface{}{"OptionTUpgradeGoAhead::Some": ty.AsSomeField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated cumulus_pallet_parachain_system_unincluded_segment_Ancestor with id={{false [172]}}
type Ancestor struct {
	// Field 0 with TypeId=173
	UsedBandwidth UsedBandwidth
	// Field 1 with TypeId=178
	ParaHeadHash OptionTByteArray322
	// Field 2 with TypeId=179
	ConsumedGoAheadSignal OptionTUpgradeGoAhead
}

// Generated cumulus_pallet_parachain_system_unincluded_segment_SegmentTracker with id={{false [181]}}
type SegmentTracker struct {
	// Field 0 with TypeId=173
	UsedBandwidth UsedBandwidth
	// Field 1 with TypeId=182
	HrmpWatermark OptionTUint32
	// Field 2 with TypeId=179
	ConsumedGoAheadSignal OptionTUpgradeGoAhead
}

// Generated PolkadotPrimitivesV7UpgradeRestriction with id=186
type UpgradeRestriction struct {
	IsPresent bool
}

func (ty UpgradeRestriction) Encode(encoder scale.Encoder) (err error) {
	if ty.IsPresent {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *UpgradeRestriction) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsPresent = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *UpgradeRestriction) Variant() (uint8, error) {
	if ty.IsPresent {
		return 0, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty UpgradeRestriction) MarshalJSON() ([]byte, error) {
	if ty.IsPresent {
		return json.Marshal("UpgradeRestriction::Present")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated Option with id=185
type OptionTUpgradeRestriction struct {
	IsNone       bool
	IsSome       bool
	AsSomeField0 *UpgradeRestriction
}

func (ty OptionTUpgradeRestriction) Encode(encoder scale.Encoder) (err error) {
	if ty.IsNone {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSome {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSomeField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *OptionTUpgradeRestriction) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsNone = true
		return
	case 1:
		ty.IsSome = true
		var tmp UpgradeRestriction
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsSomeField0 = &tmp
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *OptionTUpgradeRestriction) Variant() (uint8, error) {
	if ty.IsNone {
		return 0, nil
	}
	if ty.IsSome {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty OptionTUpgradeRestriction) MarshalJSON() ([]byte, error) {
	if ty.IsNone {
		return json.Marshal("OptionTUpgradeRestriction::None")
	}
	if ty.IsSome {
		m := map[string]interface{}{"OptionTUpgradeRestriction::Some": ty.AsSomeField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated cumulus_pallet_parachain_system_relay_state_snapshot_RelayDispatchQueueRemainingCapacity with id={{false [190]}}
type RelayDispatchQueueRemainingCapacity struct {
	// Field 0 with TypeId=4
	RemainingCount uint32
	// Field 1 with TypeId=4
	RemainingSize uint32
}

// Generated polkadot_primitives_v7_AbridgedHrmpChannel with id={{false [193]}}
type AbridgedHrmpChannel struct {
	// Field 0 with TypeId=4
	MaxCapacity uint32
	// Field 1 with TypeId=4
	MaxTotalSize uint32
	// Field 2 with TypeId=4
	MaxMessageSize uint32
	// Field 3 with TypeId=4
	MsgCount uint32
	// Field 4 with TypeId=4
	TotalSize uint32
	// Field 5 with TypeId=178
	MqcHead OptionTByteArray322
}

// Tuple type generated from metadata id 192
type TupleOfUint32AbridgedHrmpChannel struct {
	Elem0 uint32
	Elem1 AbridgedHrmpChannel
}

// Generated cumulus_pallet_parachain_system_relay_state_snapshot_MessagingStateSnapshot with id={{false [189]}}
type MessagingStateSnapshot struct {
	// Field 0 with TypeId=13
	DmqMqcHead [32]byte
	// Field 1 with TypeId=190
	RelayDispatchQueueRemainingCapacity RelayDispatchQueueRemainingCapacity
	// Field 2 with TypeId=191
	IngressChannels []TupleOfUint32AbridgedHrmpChannel
	// Field 3 with TypeId=191
	EgressChannels []TupleOfUint32AbridgedHrmpChannel
}

// Generated polkadot_primitives_v7_async_backing_AsyncBackingParams with id={{false [195]}}
type AsyncBackingParams struct {
	// Field 0 with TypeId=4
	MaxCandidateDepth uint32
	// Field 1 with TypeId=4
	AllowedAncestryLen uint32
}

// Generated polkadot_primitives_v7_AbridgedHostConfiguration with id={{false [194]}}
type AbridgedHostConfiguration struct {
	// Field 0 with TypeId=4
	MaxCodeSize uint32
	// Field 1 with TypeId=4
	MaxHeadDataSize uint32
	// Field 2 with TypeId=4
	MaxUpwardQueueCount uint32
	// Field 3 with TypeId=4
	MaxUpwardQueueSize uint32
	// Field 4 with TypeId=4
	MaxUpwardMessageSize uint32
	// Field 5 with TypeId=4
	MaxUpwardMessageNumPerCandidate uint32
	// Field 6 with TypeId=4
	HrmpMaxMessageNumPerCandidate uint32
	// Field 7 with TypeId=4
	ValidationUpgradeCooldown uint32
	// Field 8 with TypeId=4
	ValidationUpgradeDelay uint32
	// Field 9 with TypeId=195
	AsyncBackingParams AsyncBackingParams
}

// Tuple type generated from metadata id 199
type TupleOfUint32ByteArray32 struct {
	Elem0 uint32
	Elem1 [32]byte
}

// Generated polkadot_core_primitives_OutboundHrmpMessage with id={{false [201]}}
type OutboundHrmpMessage struct {
	// Field 0 with TypeId=122
	Recipient uint32
	// Field 1 with TypeId=14
	Data []byte
}

// Generated PalletBalancesTypesReasons with id=217
type Reasons struct {
	IsFee  bool
	IsMisc bool
	IsAll  bool
}

func (ty Reasons) Encode(encoder scale.Encoder) (err error) {
	if ty.IsFee {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsMisc {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsAll {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Reasons) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsFee = true
		return
	case 1:
		ty.IsMisc = true
		return
	case 2:
		ty.IsAll = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Reasons) Variant() (uint8, error) {
	if ty.IsFee {
		return 0, nil
	}
	if ty.IsMisc {
		return 1, nil
	}
	if ty.IsAll {
		return 2, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Reasons) MarshalJSON() ([]byte, error) {
	if ty.IsFee {
		return json.Marshal("Reasons::Fee")
	}
	if ty.IsMisc {
		return json.Marshal("Reasons::Misc")
	}
	if ty.IsAll {
		return json.Marshal("Reasons::All")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated pallet_balances_types_BalanceLock with id={{false [216]}}
type BalanceLock struct {
	// Field 0 with TypeId=74
	Id [8]byte
	// Field 1 with TypeId=6
	Amount types.U128
	// Field 2 with TypeId=217
	Reasons Reasons
}

// Generated pallet_balances_types_ReserveData with id={{false [220]}}
type ReserveData struct {
	// Field 0 with TypeId=74
	Id [8]byte
	// Field 1 with TypeId=6
	Amount types.U128
}

// Generated PalletContractsPalletHoldReason with id=225
type HoldReason struct {
	IsCodeUploadDepositReserve bool
	IsStorageDepositReserve    bool
}

func (ty HoldReason) Encode(encoder scale.Encoder) (err error) {
	if ty.IsCodeUploadDepositReserve {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsStorageDepositReserve {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *HoldReason) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsCodeUploadDepositReserve = true
		return
	case 1:
		ty.IsStorageDepositReserve = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *HoldReason) Variant() (uint8, error) {
	if ty.IsCodeUploadDepositReserve {
		return 0, nil
	}
	if ty.IsStorageDepositReserve {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty HoldReason) MarshalJSON() ([]byte, error) {
	if ty.IsCodeUploadDepositReserve {
		return json.Marshal("HoldReason::CodeUploadDepositReserve")
	}
	if ty.IsStorageDepositReserve {
		return json.Marshal("HoldReason::StorageDepositReserve")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated ParachainWeteeRuntimeRuntimeHoldReason with id=224
type RuntimeHoldReason struct {
	IsContracts       bool
	AsContractsField0 *HoldReason
}

func (ty RuntimeHoldReason) Encode(encoder scale.Encoder) (err error) {
	if ty.IsContracts {
		err = encoder.PushByte(122)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsContractsField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *RuntimeHoldReason) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 122:
		ty.IsContracts = true
		var tmp HoldReason
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsContractsField0 = &tmp
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *RuntimeHoldReason) Variant() (uint8, error) {
	if ty.IsContracts {
		return 122, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty RuntimeHoldReason) MarshalJSON() ([]byte, error) {
	if ty.IsContracts {
		m := map[string]interface{}{"RuntimeHoldReason::Contracts": ty.AsContractsField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated pallet_balances_types_IdAmount with id={{false [223]}}
type IdAmount struct {
	// Field 0 with TypeId=224
	Id RuntimeHoldReason
	// Field 1 with TypeId=6
	Amount types.U128
}

// Generated pallet_balances_types_IdAmount with id={{false [228]}}
type IdAmountIdStruct struct {
	// Field 0 with TypeId=38
	Id struct{}
	// Field 1 with TypeId=6
	Amount types.U128
}

// Generated PalletTransactionPaymentReleases with id=235
type Releases struct {
	IsV1Ancient bool
	IsV2        bool
}

func (ty Releases) Encode(encoder scale.Encoder) (err error) {
	if ty.IsV1Ancient {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsV2 {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Releases) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsV1Ancient = true
		return
	case 1:
		ty.IsV2 = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Releases) Variant() (uint8, error) {
	if ty.IsV1Ancient {
		return 0, nil
	}
	if ty.IsV2 {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Releases) MarshalJSON() ([]byte, error) {
	if ty.IsV1Ancient {
		return json.Marshal("Releases::V1Ancient")
	}
	if ty.IsV2 {
		return json.Marshal("Releases::V2")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated pallet_collator_selection_pallet_CandidateInfo with id={{false [342]}}
type CandidateInfo struct {
	// Field 0 with TypeId=0
	Who [32]byte
	// Field 1 with TypeId=6
	Deposit types.U128
}

// Tuple type generated from metadata id 346
type TupleOfByteArray32ByteArray32 struct {
	Elem0 [32]byte
	Elem1 [32]byte
}

// Tuple type generated from metadata id 348
type TupleOfByteArray4ByteSlice struct {
	Elem0 [4]byte
	Elem1 []byte
}

// Tuple type generated from metadata id 354
type TupleOfUint64Uint32 struct {
	Elem0 uint64
	Elem1 uint32
}

// Generated CumulusPalletXcmpQueueOutboundState with id=360
type OutboundState struct {
	IsOk        bool
	IsSuspended bool
}

func (ty OutboundState) Encode(encoder scale.Encoder) (err error) {
	if ty.IsOk {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSuspended {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *OutboundState) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsOk = true
		return
	case 1:
		ty.IsSuspended = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *OutboundState) Variant() (uint8, error) {
	if ty.IsOk {
		return 0, nil
	}
	if ty.IsSuspended {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty OutboundState) MarshalJSON() ([]byte, error) {
	if ty.IsOk {
		return json.Marshal("OutboundState::Ok")
	}
	if ty.IsSuspended {
		return json.Marshal("OutboundState::Suspended")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated cumulus_pallet_xcmp_queue_OutboundChannelDetails with id={{false [359]}}
type OutboundChannelDetails struct {
	// Field 0 with TypeId=122
	Recipient uint32
	// Field 1 with TypeId=360
	State OutboundState
	// Field 2 with TypeId=8
	SignalsExist bool
	// Field 3 with TypeId=169
	FirstIndex uint16
	// Field 4 with TypeId=169
	LastIndex uint16
}

// Tuple type generated from metadata id 361
type TupleOfUint32Uint16 struct {
	Elem0 uint32
	Elem1 uint16
}

// Generated cumulus_pallet_xcmp_queue_QueueConfigData with id={{false [362]}}
type QueueConfigData struct {
	// Field 0 with TypeId=4
	SuspendThreshold uint32
	// Field 1 with TypeId=4
	DropThreshold uint32
	// Field 2 with TypeId=4
	ResumeThreshold uint32
}

// Generated Option with id=365
type OptionTVersionedLocation struct {
	IsNone       bool
	IsSome       bool
	AsSomeField0 *VersionedLocation
}

func (ty OptionTVersionedLocation) Encode(encoder scale.Encoder) (err error) {
	if ty.IsNone {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSome {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSomeField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *OptionTVersionedLocation) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsNone = true
		return
	case 1:
		ty.IsSome = true
		var tmp VersionedLocation
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsSomeField0 = &tmp
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *OptionTVersionedLocation) Variant() (uint8, error) {
	if ty.IsNone {
		return 0, nil
	}
	if ty.IsSome {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty OptionTVersionedLocation) MarshalJSON() ([]byte, error) {
	if ty.IsNone {
		return json.Marshal("OptionTVersionedLocation::None")
	}
	if ty.IsSome {
		m := map[string]interface{}{"OptionTVersionedLocation::Some": ty.AsSomeField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Tuple type generated from metadata id 367
type TupleOfByteByte struct {
	Elem0 byte
	Elem1 byte
}

// Generated Option with id=366
type OptionTTupleOfByteByte struct {
	IsNone       bool
	IsSome       bool
	AsSomeField0 TupleOfByteByte
}

func (ty OptionTTupleOfByteByte) Encode(encoder scale.Encoder) (err error) {
	if ty.IsNone {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSome {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSomeField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *OptionTTupleOfByteByte) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsNone = true
		return
	case 1:
		ty.IsSome = true
		err = decoder.Decode(&ty.AsSomeField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *OptionTTupleOfByteByte) Variant() (uint8, error) {
	if ty.IsNone {
		return 0, nil
	}
	if ty.IsSome {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty OptionTTupleOfByteByte) MarshalJSON() ([]byte, error) {
	if ty.IsNone {
		return json.Marshal("OptionTTupleOfByteByte::None")
	}
	if ty.IsSome {
		m := map[string]interface{}{"OptionTTupleOfByteByte::Some": ty.AsSomeField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated XcmVersionedResponse with id=368
type VersionedResponse struct {
	IsV2       bool
	AsV2Field0 *Response1
	IsV3       bool
	AsV3Field0 *Response2
	IsV4       bool
	AsV4Field0 *Response
}

func (ty VersionedResponse) Encode(encoder scale.Encoder) (err error) {
	if ty.IsV2 {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsV2Field0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsV3 {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsV3Field0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsV4 {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsV4Field0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *VersionedResponse) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 2:
		ty.IsV2 = true
		var tmp Response1
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsV2Field0 = &tmp
		return
	case 3:
		ty.IsV3 = true
		var tmp Response2
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsV3Field0 = &tmp
		return
	case 4:
		ty.IsV4 = true
		var tmp Response
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsV4Field0 = &tmp
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *VersionedResponse) Variant() (uint8, error) {
	if ty.IsV2 {
		return 2, nil
	}
	if ty.IsV3 {
		return 3, nil
	}
	if ty.IsV4 {
		return 4, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty VersionedResponse) MarshalJSON() ([]byte, error) {
	if ty.IsV2 {
		m := map[string]interface{}{"VersionedResponse::V2": ty.AsV2Field0}
		return json.Marshal(m)
	}
	if ty.IsV3 {
		m := map[string]interface{}{"VersionedResponse::V3": ty.AsV3Field0}
		return json.Marshal(m)
	}
	if ty.IsV4 {
		m := map[string]interface{}{"VersionedResponse::V4": ty.AsV4Field0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated PalletXcmPalletQueryStatus with id=364
type QueryStatus struct {
	IsPending                   bool
	AsPendingResponder0         VersionedLocation
	AsPendingMaybeMatchQuerier1 OptionTVersionedLocation
	AsPendingMaybeNotify2       OptionTTupleOfByteByte
	AsPendingTimeout3           uint32
	IsVersionNotifier           bool
	AsVersionNotifierOrigin0    VersionedLocation
	AsVersionNotifierIsActive1  bool
	IsReady                     bool
	AsReadyResponse0            VersionedResponse
	AsReadyAt1                  uint32
}

func (ty QueryStatus) Encode(encoder scale.Encoder) (err error) {
	if ty.IsPending {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPendingResponder0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPendingMaybeMatchQuerier1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPendingMaybeNotify2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsPendingTimeout3)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsVersionNotifier {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsVersionNotifierOrigin0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsVersionNotifierIsActive1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsReady {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReadyResponse0)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsReadyAt1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *QueryStatus) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsPending = true
		err = decoder.Decode(&ty.AsPendingResponder0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsPendingMaybeMatchQuerier1)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsPendingMaybeNotify2)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsPendingTimeout3)
		if err != nil {
			return err
		}
		return
	case 1:
		ty.IsVersionNotifier = true
		err = decoder.Decode(&ty.AsVersionNotifierOrigin0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsVersionNotifierIsActive1)
		if err != nil {
			return err
		}
		return
	case 2:
		ty.IsReady = true
		err = decoder.Decode(&ty.AsReadyResponse0)
		if err != nil {
			return err
		}
		err = decoder.Decode(&ty.AsReadyAt1)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *QueryStatus) Variant() (uint8, error) {
	if ty.IsPending {
		return 0, nil
	}
	if ty.IsVersionNotifier {
		return 1, nil
	}
	if ty.IsReady {
		return 2, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty QueryStatus) MarshalJSON() ([]byte, error) {
	if ty.IsPending {
		m := map[string]interface{}{"QueryStatus::Pending": map[string]interface{}{
			"AsPendingMaybeMatchQuerier1": ty.AsPendingMaybeMatchQuerier1,
			"AsPendingMaybeNotify2":       ty.AsPendingMaybeNotify2,
			"AsPendingResponder0":         ty.AsPendingResponder0,
			"AsPendingTimeout3":           ty.AsPendingTimeout3,
		}}
		return json.Marshal(m)
	}
	if ty.IsVersionNotifier {
		m := map[string]interface{}{"QueryStatus::VersionNotifier": map[string]interface{}{
			"AsVersionNotifierIsActive1": ty.AsVersionNotifierIsActive1,
			"AsVersionNotifierOrigin0":   ty.AsVersionNotifierOrigin0,
		}}
		return json.Marshal(m)
	}
	if ty.IsReady {
		m := map[string]interface{}{"QueryStatus::Ready": map[string]interface{}{
			"AsReadyAt1":       ty.AsReadyAt1,
			"AsReadyResponse0": ty.AsReadyResponse0,
		}}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Tuple type generated from metadata id 369
type TupleOfUint32VersionedLocation struct {
	Elem0 uint32
	Elem1 VersionedLocation
}

// Tuple type generated from metadata id 370
type Tuple370 struct {
	Elem0 uint64
	Elem1 Weight
	Elem2 uint32
}

// Tuple type generated from metadata id 372
type TupleOfVersionedLocationUint32 struct {
	Elem0 VersionedLocation
	Elem1 uint32
}

// Generated PalletXcmPalletVersionMigrationStage with id=374
type VersionMigrationStage struct {
	IsMigrateSupportedVersion    bool
	IsMigrateVersionNotifiers    bool
	IsNotifyCurrentTargets       bool
	AsNotifyCurrentTargetsField0 *OptionTByteSlice
	IsMigrateAndNotifyOldTargets bool
}

func (ty VersionMigrationStage) Encode(encoder scale.Encoder) (err error) {
	if ty.IsMigrateSupportedVersion {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsMigrateVersionNotifiers {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsNotifyCurrentTargets {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsNotifyCurrentTargetsField0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsMigrateAndNotifyOldTargets {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *VersionMigrationStage) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsMigrateSupportedVersion = true
		return
	case 1:
		ty.IsMigrateVersionNotifiers = true
		return
	case 2:
		ty.IsNotifyCurrentTargets = true
		var tmp OptionTByteSlice
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsNotifyCurrentTargetsField0 = &tmp
		return
	case 3:
		ty.IsMigrateAndNotifyOldTargets = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *VersionMigrationStage) Variant() (uint8, error) {
	if ty.IsMigrateSupportedVersion {
		return 0, nil
	}
	if ty.IsMigrateVersionNotifiers {
		return 1, nil
	}
	if ty.IsNotifyCurrentTargets {
		return 2, nil
	}
	if ty.IsMigrateAndNotifyOldTargets {
		return 3, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty VersionMigrationStage) MarshalJSON() ([]byte, error) {
	if ty.IsMigrateSupportedVersion {
		return json.Marshal("VersionMigrationStage::MigrateSupportedVersion")
	}
	if ty.IsMigrateVersionNotifiers {
		return json.Marshal("VersionMigrationStage::MigrateVersionNotifiers")
	}
	if ty.IsNotifyCurrentTargets {
		m := map[string]interface{}{"VersionMigrationStage::NotifyCurrentTargets": ty.AsNotifyCurrentTargetsField0}
		return json.Marshal(m)
	}
	if ty.IsMigrateAndNotifyOldTargets {
		return json.Marshal("VersionMigrationStage::MigrateAndNotifyOldTargets")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated XcmVersionedAssetId with id=376
type VersionedAssetId struct {
	IsV3       bool
	AsV3Field0 *AssetId1
	IsV4       bool
	AsV4Field0 Location
}

func (ty VersionedAssetId) Encode(encoder scale.Encoder) (err error) {
	if ty.IsV3 {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsV3Field0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsV4 {
		err = encoder.PushByte(4)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsV4Field0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *VersionedAssetId) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 3:
		ty.IsV3 = true
		var tmp AssetId1
		err = decoder.Decode(&tmp)
		if err != nil {
			return err
		}
		ty.AsV3Field0 = &tmp
		return
	case 4:
		ty.IsV4 = true
		err = decoder.Decode(&ty.AsV4Field0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *VersionedAssetId) Variant() (uint8, error) {
	if ty.IsV3 {
		return 3, nil
	}
	if ty.IsV4 {
		return 4, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty VersionedAssetId) MarshalJSON() ([]byte, error) {
	if ty.IsV3 {
		m := map[string]interface{}{"VersionedAssetId::V3": ty.AsV3Field0}
		return json.Marshal(m)
	}
	if ty.IsV4 {
		m := map[string]interface{}{"VersionedAssetId::V4": ty.AsV4Field0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Tuple type generated from metadata id 375
type Tuple375 struct {
	Elem0 uint32
	Elem1 [32]byte
	Elem2 VersionedAssetId
}

// Tuple type generated from metadata id 379
type TupleOfStructU128 struct {
	Elem0 struct{}
	Elem1 types.U128
}

// Generated pallet_xcm_pallet_RemoteLockedFungibleRecord with id={{false [377]}}
type RemoteLockedFungibleRecord struct {
	// Field 0 with TypeId=6
	Amount types.U128
	// Field 1 with TypeId=118
	Owner VersionedLocation
	// Field 2 with TypeId=118
	Locker VersionedLocation
	// Field 3 with TypeId=378
	Consumers []TupleOfStructU128
}

// Tuple type generated from metadata id 382
type TupleOfU128VersionedLocation struct {
	Elem0 types.U128
	Elem1 VersionedLocation
}

// Generated pallet_message_queue_Neighbours with id={{false [387]}}
type Neighbours struct {
	// Field 0 with TypeId=121
	Prev AggregateMessageOrigin
	// Field 1 with TypeId=121
	Next AggregateMessageOrigin
}

// Generated Option with id=386
type OptionTNeighbours struct {
	IsNone       bool
	IsSome       bool
	AsSomeField0 Neighbours
}

func (ty OptionTNeighbours) Encode(encoder scale.Encoder) (err error) {
	if ty.IsNone {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSome {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSomeField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *OptionTNeighbours) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsNone = true
		return
	case 1:
		ty.IsSome = true
		err = decoder.Decode(&ty.AsSomeField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *OptionTNeighbours) Variant() (uint8, error) {
	if ty.IsNone {
		return 0, nil
	}
	if ty.IsSome {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty OptionTNeighbours) MarshalJSON() ([]byte, error) {
	if ty.IsNone {
		return json.Marshal("OptionTNeighbours::None")
	}
	if ty.IsSome {
		m := map[string]interface{}{"OptionTNeighbours::Some": ty.AsSomeField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated pallet_message_queue_BookState with id={{false [385]}}
type BookState struct {
	// Field 0 with TypeId=4
	Begin uint32
	// Field 1 with TypeId=4
	End uint32
	// Field 2 with TypeId=4
	Count uint32
	// Field 3 with TypeId=386
	ReadyNeighbours OptionTNeighbours
	// Field 4 with TypeId=12
	MessageCount uint64
	// Field 5 with TypeId=12
	Size uint64
}

// Tuple type generated from metadata id 388
type TupleOfAggregateMessageOriginUint32 struct {
	Elem0 AggregateMessageOrigin
	Elem1 uint32
}

// Generated pallet_message_queue_Page with id={{false [389]}}
type Page struct {
	// Field 0 with TypeId=4
	Remaining uint32
	// Field 1 with TypeId=4
	RemainingSize uint32
	// Field 2 with TypeId=4
	FirstIndex uint32
	// Field 3 with TypeId=4
	First uint32
	// Field 4 with TypeId=4
	Last uint32
	// Field 5 with TypeId=390
	Heap []byte
}

// Tuple type generated from metadata id 392
type TupleOfByteArray32Uint64 struct {
	Elem0 [32]byte
	Elem1 uint64
}

// Generated orml_tokens_BalanceLock with id={{false [394]}}
type BalanceLock1 struct {
	// Field 0 with TypeId=74
	Id [8]byte
	// Field 1 with TypeId=6
	Amount types.U128
}

// Generated orml_tokens_AccountData with id={{false [396]}}
type AccountData1 struct {
	// Field 0 with TypeId=6
	Free types.U128
	// Field 1 with TypeId=6
	Reserved types.U128
	// Field 2 with TypeId=6
	Frozen types.U128
}

// Generated orml_tokens_ReserveData with id={{false [398]}}
type ReserveDataReserveIdentifierByteArray8 struct {
	// Field 0 with TypeId=74
	Id [8]byte
	// Field 1 with TypeId=6
	Amount types.U128
}

// Generated wetee_message_queue_Neighbours with id={{false [404]}}
type Neighbours1 struct {
	// Field 0 with TypeId=126
	Prev MessageOrigin
	// Field 1 with TypeId=126
	Next MessageOrigin
}

// Generated Option with id=403
type OptionTNeighbours1 struct {
	IsNone       bool
	IsSome       bool
	AsSomeField0 Neighbours1
}

func (ty OptionTNeighbours1) Encode(encoder scale.Encoder) (err error) {
	if ty.IsNone {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsSome {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		err = encoder.Encode(ty.AsSomeField0)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *OptionTNeighbours1) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsNone = true
		return
	case 1:
		ty.IsSome = true
		err = decoder.Decode(&ty.AsSomeField0)
		if err != nil {
			return err
		}
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *OptionTNeighbours1) Variant() (uint8, error) {
	if ty.IsNone {
		return 0, nil
	}
	if ty.IsSome {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty OptionTNeighbours1) MarshalJSON() ([]byte, error) {
	if ty.IsNone {
		return json.Marshal("OptionTNeighbours1::None")
	}
	if ty.IsSome {
		m := map[string]interface{}{"OptionTNeighbours1::Some": ty.AsSomeField0}
		return json.Marshal(m)
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated wetee_message_queue_BookState with id={{false [402]}}
type BookState1 struct {
	// Field 0 with TypeId=4
	Begin uint32
	// Field 1 with TypeId=4
	End uint32
	// Field 2 with TypeId=4
	Count uint32
	// Field 3 with TypeId=403
	ReadyNeighbours OptionTNeighbours1
	// Field 4 with TypeId=12
	MessageCount uint64
	// Field 5 with TypeId=12
	Size uint64
}

// Tuple type generated from metadata id 405
type TupleOfMessageOriginUint32 struct {
	Elem0 MessageOrigin
	Elem1 uint32
}

// Generated wetee_message_queue_Page with id={{false [406]}}
type PageSizeUint32 struct {
	// Field 0 with TypeId=4
	Remaining uint32
	// Field 1 with TypeId=4
	RemainingSize uint32
	// Field 2 with TypeId=4
	FirstIndex uint32
	// Field 3 with TypeId=4
	First uint32
	// Field 4 with TypeId=4
	Last uint32
	// Field 5 with TypeId=407
	Heap []byte
}

// Generated wetee_org_OrgInfo with id={{false [410]}}
type OrgInfo struct {
	// Field 0 with TypeId=12
	Id uint64
	// Field 1 with TypeId=0
	Creator [32]byte
	// Field 2 with TypeId=4
	StartBlock uint32
	// Field 3 with TypeId=0
	DaoAccountId [32]byte
	// Field 4 with TypeId=14
	Name []byte
	// Field 5 with TypeId=14
	Desc []byte
	// Field 6 with TypeId=14
	Purpose []byte
	// Field 7 with TypeId=14
	MetaData []byte
	// Field 8 with TypeId=14
	ImApi []byte
	// Field 9 with TypeId=14
	Bg []byte
	// Field 10 with TypeId=14
	Logo []byte
	// Field 11 with TypeId=14
	Img []byte
	// Field 12 with TypeId=14
	HomeUrl []byte
	// Field 13 with TypeId=295
	Status Status
}

// Generated wetee_org_GuildInfo with id={{false [412]}}
type GuildInfo struct {
	// Field 0 with TypeId=12
	Id uint64
	// Field 1 with TypeId=0
	Creator [32]byte
	// Field 2 with TypeId=4
	StartBlock uint32
	// Field 3 with TypeId=0
	DaoAccountId [32]byte
	// Field 4 with TypeId=14
	Name []byte
	// Field 5 with TypeId=14
	Desc []byte
	// Field 6 with TypeId=14
	MetaData []byte
	// Field 7 with TypeId=295
	Status Status
}

// Tuple type generated from metadata id 414
type TupleOfUint64Uint321 struct {
	Elem0 uint64
	Elem1 uint32
}

// Generated wetee_org_QuarterTask with id={{false [416]}}
type QuarterTask struct {
	// Field 0 with TypeId=12
	Id uint64
	// Field 1 with TypeId=14
	Name []byte
	// Field 2 with TypeId=2
	Priority byte
	// Field 3 with TypeId=0
	Creator [32]byte
	// Field 4 with TypeId=14
	Tags []byte
	// Field 5 with TypeId=2
	Status byte
}

// Tuple type generated from metadata id 419
type TupleOfUint64Uint64 struct {
	Elem0 uint64
	Elem1 uint64
}

// Generated wetee_org_App with id={{false [420]}}
type App struct {
	// Field 0 with TypeId=12
	Id uint64
	// Field 1 with TypeId=14
	Url []byte
	// Field 2 with TypeId=14
	Name []byte
	// Field 3 with TypeId=14
	Desc []byte
	// Field 4 with TypeId=14
	Icon []byte
	// Field 5 with TypeId=0
	Creator [32]byte
	// Field 6 with TypeId=295
	Status Status
}

// Generated wetee_org_OrgApp with id={{false [422]}}
type OrgApp struct {
	// Field 0 with TypeId=12
	Id uint64
	// Field 1 with TypeId=12
	AppId uint64
	// Field 2 with TypeId=4
	StartBlock uint32
	// Field 3 with TypeId=14
	Name []byte
	// Field 4 with TypeId=14
	Desc []byte
	// Field 5 with TypeId=14
	Icon []byte
	// Field 6 with TypeId=14
	Url []byte
	// Field 7 with TypeId=295
	Status Status
}

// Tuple type generated from metadata id 424
type TupleOfUint64ByteArray32 struct {
	Elem0 uint64
	Elem1 [32]byte
}

// Generated wetee_assets_DaoAssetInfo with id={{false [427]}}
type DaoAssetInfo struct {
	// Field 0 with TypeId=0
	Owner [32]byte
	// Field 1 with TypeId=131
	Metadata DaoAssetMeta
}

// Generated wetee_sudo_SudoTask with id={{false [430]}}
type SudoTask struct {
	// Field 0 with TypeId=4
	Id uint32
	// Field 1 with TypeId=237
	Proposal RuntimeCall
	// Field 2 with TypeId=4
	Time uint32
}

// Generated WeteeProjectStatus with id=436
type Status1 struct {
	IsActive   bool
	IsInActive bool
}

func (ty Status1) Encode(encoder scale.Encoder) (err error) {
	if ty.IsActive {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsInActive {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *Status1) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsActive = true
		return
	case 1:
		ty.IsInActive = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *Status1) Variant() (uint8, error) {
	if ty.IsActive {
		return 0, nil
	}
	if ty.IsInActive {
		return 1, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty Status1) MarshalJSON() ([]byte, error) {
	if ty.IsActive {
		return json.Marshal("Status1::Active")
	}
	if ty.IsInActive {
		return json.Marshal("Status1::InActive")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated wetee_project_ProjectInfo with id={{false [435]}}
type ProjectInfo struct {
	// Field 0 with TypeId=12
	Id uint64
	// Field 1 with TypeId=14
	Name []byte
	// Field 2 with TypeId=14
	Description []byte
	// Field 3 with TypeId=0
	DaoAccountId [32]byte
	// Field 4 with TypeId=0
	Creator [32]byte
	// Field 5 with TypeId=436
	Status Status1
}

// Tuple type generated from metadata id 441
type TupleOfUint64U128 struct {
	Elem0 uint64
	Elem1 types.U128
}

// Generated WeteeProjectTaskStatus with id=442
type TaskStatus struct {
	IsToDo       bool
	IsInProgress bool
	IsInReview   bool
	IsDone       bool
}

func (ty TaskStatus) Encode(encoder scale.Encoder) (err error) {
	if ty.IsToDo {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsInProgress {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsInReview {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsDone {
		err = encoder.PushByte(3)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *TaskStatus) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsToDo = true
		return
	case 1:
		ty.IsInProgress = true
		return
	case 2:
		ty.IsInReview = true
		return
	case 3:
		ty.IsDone = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *TaskStatus) Variant() (uint8, error) {
	if ty.IsToDo {
		return 0, nil
	}
	if ty.IsInProgress {
		return 1, nil
	}
	if ty.IsInReview {
		return 2, nil
	}
	if ty.IsDone {
		return 3, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty TaskStatus) MarshalJSON() ([]byte, error) {
	if ty.IsToDo {
		return json.Marshal("TaskStatus::ToDo")
	}
	if ty.IsInProgress {
		return json.Marshal("TaskStatus::InProgress")
	}
	if ty.IsInReview {
		return json.Marshal("TaskStatus::InReview")
	}
	if ty.IsDone {
		return json.Marshal("TaskStatus::Done")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated wetee_project_TaskInfo with id={{false [439]}}
type TaskInfo struct {
	// Field 0 with TypeId=12
	Id uint64
	// Field 1 with TypeId=14
	Name []byte
	// Field 2 with TypeId=14
	Description []byte
	// Field 3 with TypeId=169
	Point uint16
	// Field 4 with TypeId=2
	Priority byte
	// Field 5 with TypeId=12
	ProjectId uint64
	// Field 6 with TypeId=0
	Creator [32]byte
	// Field 7 with TypeId=440
	Rewards []TupleOfUint64U128
	// Field 8 with TypeId=2
	MaxAssignee byte
	// Field 9 with TypeId=41
	Assignees [][32]byte
	// Field 10 with TypeId=41
	Reviewers [][32]byte
	// Field 11 with TypeId=14
	Skills []byte
	// Field 12 with TypeId=442
	Status TaskStatus
}

// Generated wetee_project_ReviewRecord with id={{false [446]}}
type ReviewRecord struct {
	// Field 0 with TypeId=0
	Who [32]byte
	// Field 1 with TypeId=14
	Meta []byte
	// Field 2 with TypeId=302
	Option ReviewOpinion
}

// Generated wetee_project_Tally with id={{false [447]}}
type Tally struct {
	// Field 0 with TypeId=4
	Yes uint32
	// Field 1 with TypeId=4
	No uint32
}

// Generated wetee_project_ReviewStatus with id={{false [444]}}
type ReviewStatus struct {
	// Field 0 with TypeId=445
	Records []ReviewRecord
	// Field 1 with TypeId=447
	Tally Tally
}

// Generated wetee_gov_PreProp with id={{false [451]}}
type PreProp struct {
	// Field 0 with TypeId=4
	Id uint32
	// Field 1 with TypeId=13
	Hash [32]byte
	// Field 2 with TypeId=237
	Call RuntimeCall
	// Field 3 with TypeId=304
	MemberData MemberData
	// Field 4 with TypeId=0
	Creater [32]byte
	// Field 5 with TypeId=4
	PeriodIndex uint32
	// Field 6 with TypeId=4
	Start uint32
}

// Tuple type generated from metadata id 452
type TupleOfByteArray32SliceU128 struct {
	Elem0 [][32]byte
	Elem1 types.U128
}

// Generated wetee_gov_Tally with id={{false [454]}}
type Tally1 struct {
	// Field 0 with TypeId=6
	Yes types.U128
	// Field 1 with TypeId=6
	No types.U128
}

// Generated WeteeGovPropStatus with id=455
type PropStatus struct {
	IsOngoing  bool
	IsApproved bool
	IsRejected bool
}

func (ty PropStatus) Encode(encoder scale.Encoder) (err error) {
	if ty.IsOngoing {
		err = encoder.PushByte(0)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsApproved {
		err = encoder.PushByte(1)
		if err != nil {
			return err
		}
		return nil
	}
	if ty.IsRejected {
		err = encoder.PushByte(2)
		if err != nil {
			return err
		}
		return nil
	}
	return fmt.Errorf("Unrecognized variant")
}
func (ty *PropStatus) Decode(decoder scale.Decoder) (err error) {
	variant, err := decoder.ReadOneByte()
	if err != nil {
		return err
	}
	switch variant {
	case 0:
		ty.IsOngoing = true
		return
	case 1:
		ty.IsApproved = true
		return
	case 2:
		ty.IsRejected = true
		return
	default:
		return fmt.Errorf("Unrecognized variant")
	}
}
func (ty *PropStatus) Variant() (uint8, error) {
	if ty.IsOngoing {
		return 0, nil
	}
	if ty.IsApproved {
		return 1, nil
	}
	if ty.IsRejected {
		return 2, nil
	}
	return 0, fmt.Errorf("No variant detected")
}
func (ty PropStatus) MarshalJSON() ([]byte, error) {
	if ty.IsOngoing {
		return json.Marshal("PropStatus::Ongoing")
	}
	if ty.IsApproved {
		return json.Marshal("PropStatus::Approved")
	}
	if ty.IsRejected {
		return json.Marshal("PropStatus::Rejected")
	}
	return nil, fmt.Errorf("No variant detected")
}

// Generated wetee_gov_Prop with id={{false [453]}}
type Prop struct {
	// Field 0 with TypeId=4
	Id uint32
	// Field 1 with TypeId=237
	Proposal RuntimeCall
	// Field 2 with TypeId=4
	Start uint32
	// Field 3 with TypeId=4
	PeriodIndex uint32
	// Field 4 with TypeId=454
	Tally Tally1
	// Field 5 with TypeId=304
	MemberData MemberData
	// Field 6 with TypeId=455
	Status PropStatus
}

// Tuple type generated from metadata id 457
type TupleOfU128Uint32 struct {
	Elem0 types.U128
	Elem1 uint32
}

// Generated wetee_gov_VoteInfo with id={{false [459]}}
type VoteInfo struct {
	// Field 0 with TypeId=12
	DaoId uint64
	// Field 1 with TypeId=136
	Pledge Pledge
	// Field 2 with TypeId=305
	Opinion Opinion
	// Field 3 with TypeId=6
	VoteWeight types.U128
	// Field 4 with TypeId=4
	UnlockBlock uint32
	// Field 5 with TypeId=4
	PropIndex uint32
}

// Generated wetee_app_TeeApp with id={{false [462]}}
type TeeApp struct {
	// Field 0 with TypeId=12
	Id uint64
	// Field 1 with TypeId=0
	Creator [32]byte
	// Field 2 with TypeId=0
	ContractId [32]byte
	// Field 3 with TypeId=4
	StartBlock uint32
	// Field 4 with TypeId=14
	Name []byte
	// Field 5 with TypeId=14
	Image []byte
	// Field 6 with TypeId=14
	Meta []byte
	// Field 7 with TypeId=312
	Command Command
	// Field 8 with TypeId=310
	Port []Service
	// Field 9 with TypeId=322
	Cr Cr
	// Field 10 with TypeId=320
	SideContainer []Container
	// Field 11 with TypeId=2
	Level byte
	// Field 12 with TypeId=323
	TeeVersion TEEVersion
	// Field 13 with TypeId=2
	Status byte
}

// Generated wetee_app_Price with id={{false [463]}}
type Price struct {
	// Field 0 with TypeId=4
	CpuPer uint32
	// Field 1 with TypeId=4
	MemoryPer uint32
	// Field 2 with TypeId=4
	DiskPer uint32
}

// Tuple type generated from metadata id 464
type TupleOfUint64Uint16 struct {
	Elem0 uint64
	Elem1 uint16
}

// Generated wetee_primitives_types_Env with id={{false [465]}}
type Env struct {
	// Field 0 with TypeId=169
	Index uint16
	// Field 1 with TypeId=316
	K EnvKey
	// Field 2 with TypeId=14
	V []byte
}

// Generated wetee_task_TeeTask with id={{false [467]}}
type TeeTask struct {
	// Field 0 with TypeId=12
	Id uint64
	// Field 1 with TypeId=0
	Creator [32]byte
	// Field 2 with TypeId=0
	ContractId [32]byte
	// Field 3 with TypeId=4
	StartBlock uint32
	// Field 4 with TypeId=14
	Name []byte
	// Field 5 with TypeId=14
	Image []byte
	// Field 6 with TypeId=14
	Meta []byte
	// Field 7 with TypeId=312
	Command Command
	// Field 8 with TypeId=310
	Port []Service
	// Field 9 with TypeId=2
	Status byte
	// Field 10 with TypeId=322
	Cr Cr
	// Field 11 with TypeId=2
	Level byte
	// Field 12 with TypeId=323
	TeeVersion TEEVersion
}

// Generated wetee_task_Price with id={{false [468]}}
type Price1 struct {
	// Field 0 with TypeId=4
	CpuPerBlock uint32
	// Field 1 with TypeId=4
	MemoryPerBlock uint32
	// Field 2 with TypeId=4
	DiskPerBlock uint32
}

// Generated wetee_gpu_GpuApp with id={{false [470]}}
type GpuApp struct {
	// Field 0 with TypeId=12
	Id uint64
	// Field 1 with TypeId=0
	Creator [32]byte
	// Field 2 with TypeId=0
	ContractId [32]byte
	// Field 3 with TypeId=4
	StartBlock uint32
	// Field 4 with TypeId=14
	Name []byte
	// Field 5 with TypeId=14
	Image []byte
	// Field 6 with TypeId=14
	Meta []byte
	// Field 7 with TypeId=312
	Command Command
	// Field 8 with TypeId=310
	Port []Service
	// Field 9 with TypeId=2
	Status byte
	// Field 10 with TypeId=322
	Cr Cr
	// Field 11 with TypeId=2
	Level byte
	// Field 12 with TypeId=323
	TeeVersion TEEVersion
	// Field 13 with TypeId=320
	SideContainer []Container
}

// Generated wetee_gpu_Price with id={{false [471]}}
type Price2 struct {
	// Field 0 with TypeId=4
	CpuPer uint32
	// Field 1 with TypeId=4
	MemoryPer uint32
	// Field 2 with TypeId=4
	DiskPer uint32
}

// Generated wetee_worker_types_K8sCluster with id={{false [473]}}
type K8sCluster struct {
	// Field 0 with TypeId=12
	Id uint64
	// Field 1 with TypeId=0
	Account [32]byte
	// Field 2 with TypeId=4
	StartBlock uint32
	// Field 3 with TypeId=182
	StopBlock OptionTUint32
	// Field 4 with TypeId=182
	TerminalBlock OptionTUint32
	// Field 5 with TypeId=14
	Name []byte
	// Field 6 with TypeId=329
	Ip []Ip
	// Field 7 with TypeId=4
	Port uint32
	// Field 8 with TypeId=2
	Status byte
}

// Tuple type generated from metadata id 474
type TupleOfComCrComCr struct {
	Elem0 ComCr
	Elem1 ComCr
}

// Generated wetee_worker_types_DepositPrice with id={{false [475]}}
type DepositPrice struct {
	// Field 0 with TypeId=4
	CpuPer uint32
	// Field 1 with TypeId=4
	CvmCpuPer uint32
	// Field 2 with TypeId=4
	MemoryPer uint32
	// Field 3 with TypeId=4
	CvmMemoryPer uint32
	// Field 4 with TypeId=4
	DiskPer uint32
	// Field 5 with TypeId=4
	GpuPer uint32
}

// Generated wetee_worker_types_Deposit with id={{false [476]}}
type Deposit struct {
	// Field 0 with TypeId=6
	Deposit types.U128
	// Field 1 with TypeId=4
	Cpu uint32
	// Field 2 with TypeId=4
	CvmCpu uint32
	// Field 3 with TypeId=4
	Mem uint32
	// Field 4 with TypeId=4
	CvmMem uint32
	// Field 5 with TypeId=4
	Disk uint32
	// Field 6 with TypeId=4
	Gpu uint32
}

// Tuple type generated from metadata id 477
type TupleOfUint64WorkId struct {
	Elem0 uint64
	Elem1 WorkId
}

// Generated wetee_worker_types_ClusterContractState with id={{false [478]}}
type ClusterContractState struct {
	// Field 0 with TypeId=4
	StartNumber uint32
	// Field 1 with TypeId=0
	User [32]byte
	// Field 2 with TypeId=139
	WorkId WorkId
}

// Tuple type generated from metadata id 479
type TupleOfWorkIdUint64 struct {
	Elem0 WorkId
	Elem1 uint64
}

// Generated wetee_worker_types_ContractState with id={{false [480]}}
type ContractState struct {
	// Field 0 with TypeId=4
	BlockNumber uint32
	// Field 1 with TypeId=6
	Minted types.U128
	// Field 2 with TypeId=6
	Withdrawal types.U128
}

// Tuple type generated from metadata id 481
type TupleOfWorkIdUint32 struct {
	Elem0 WorkId
	Elem1 uint32
}

// Generated pallet_contracts_wasm_CodeInfo with id={{false [484]}}
type CodeInfo struct {
	// Field 0 with TypeId=0
	Owner [32]byte
	// Field 1 with TypeId=55
	Deposit types.UCompact
	// Field 2 with TypeId=11
	Refcount types.UCompact
	// Field 3 with TypeId=338
	Determinism Determinism
	// Field 4 with TypeId=4
	CodeLen uint32
}

// Tuple type generated from metadata id 490
type TupleOfByteArray32U128 struct {
	Elem0 [32]byte
	Elem1 types.U128
}

// Generated pallet_contracts_storage_ContractInfo with id={{false [485]}}
type ContractInfo struct {
	// Field 0 with TypeId=486
	TrieId []byte
	// Field 1 with TypeId=13
	CodeHash [32]byte
	// Field 2 with TypeId=4
	StorageBytes uint32
	// Field 3 with TypeId=4
	StorageItems uint32
	// Field 4 with TypeId=6
	StorageByteDeposit types.U128
	// Field 5 with TypeId=6
	StorageItemDeposit types.U128
	// Field 6 with TypeId=6
	StorageBaseDeposit types.U128
	// Field 7 with TypeId=487
	DelegateDependencies []TupleOfByteArray32U128
}

// Generated pallet_contracts_storage_DeletionQueueManager with id={{false [491]}}
type DeletionQueueManager struct {
	// Field 0 with TypeId=4
	InsertCounter uint32
	// Field 1 with TypeId=4
	DeleteCounter uint32
}

func (c *RuntimeCall) AsCall() (ret types.Call, err error) {
	var cb []byte
	cb, err = codec.Encode(c)
	if err != nil {
		return
	}
	ret = types.Call{
		CallIndex: types.CallIndex{
			SectionIndex: cb[0],
			MethodIndex:  cb[1],
		},
		Args: cb[2:],
	}
	return
}
